{"version":3,"sources":["components/GameItem.tsx","components/GamesList.tsx","components/Header.tsx","hooks/useLocalStorage.js","categories/categories.tsx","actions/actions.ts","categories/CategoriesJoin.tsx","constants.tsx","context/socket2.js","categories/CategoriesWaiting.tsx","categories/CategoriesGame.tsx","categories/CategoriesScoring.tsx","pictureguess/Pictureguess.tsx","wordGrid/WordGridSetup.tsx","wordGrid/WordGridJoin.tsx","wordGrid/WordGridWaiting.tsx","wordGrid/WordGridScoring.tsx","wordGrid/WordGridGame.tsx","wordGridSolver/wordGridSolver.tsx","App.tsx","reportWebVitals.ts","reducers/category-list.ts","reducers/wordgrid.ts","reducers/wordgrid-scoring.ts","reducers/wordgrid-game-data.ts","reducers/wordgrid-solver-data.ts","reducers/index.ts","index.tsx"],"names":["GameItem","gameData","to","gameID","className","name","style","fontSize","biline","GamesList","allGames","map","game","url","Header","location","useLocation","pathname","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","randomLetter","String","fromCharCode","Math","floor","random","CategoriesStart","dispatch","useDispatch","gameLetter","setLetter","userNameError","setUserNameError","categoryError","setCategoryError","history","useHistory","setGameID","userName","setUserName","setGameData","setPlayerData","gameSessionID","setGameSessionID","userID","setUserID","returning","setReturning","setPlayerList","categoryList","useSelector","s","id","onClick","newLetter","category","type","defaultValue","onChange","e","payload","event","target","uuidv4","console","log","placeholder","newUserID","newGameSessionID","newGameID","toString","newReturning","list","handleUserNameChange","length","push","CategoriesJoin","props","gameIDPath","split","reverse","SOCKETURL","includes","window","hostname","socket","io","SocketContext","React","createContext","picturesocket","PictureSocketContext","wordGridsocket","wordGridSocketContext","wordGridSolversocket","wordGridSolverSocketContext","CategoriesWaiting","categoriesSocket","useContext","copySuccess","setCopySuccess","playerData","playerList","setJoined","baseJoinLink","joinLink","handleJoinedRoom","useCallback","handleNewPlayer","data","handleStartGame","handleSendStart","emit","on","off","readOnly","navigator","clipboard","writeText","focus","linkToClipboard","player","ind","gameLeader","gamesWon","totalPoints","reload","CategoriesGame","minutes","setMinutes","seconds","setSeconds","answers","setAnswers","stopBus","setBus","handleStopBus","handleTimerTick","handleForceEndGame","paddingBottom","newAnswers","numAnswers","ans","charAt","toLowerCase","handleChange","textAlign","CategoriesScoring","categories","allAnswers","setAllAnswers","userScores","setUserScores","markedRows","setMarkedRows","handleAnswerTable","handleUpdateScore","handleMark","rowInd","colInd","rowId","handleStartNewGame","handleNewGameRequested","user","row","userScore","PictureGuess","pictureSocket","joinStatus","setJoinStatus","startButtonStatus","getGameID","playerStatus","currentWord","setCurGuess","currentPlayer","nextPlayer","width","height","handleGuessChange","WordGridSetup","onKeyPress","WordGridJoin","WordGridWaiting","wordGridSocket","wordGridGameData","handleBootedPlayer","handleBootPlayer","bootPlayerID","border","borderRadius","marginBottom","marginLeft","WordGridScoring","counter","setCounter","newGame","useRef","newBoard","isInitialMount","allDictionaryAnswers","setAllDictionaryAnswers","highlightedCells","setHighlightedCells","current","dictionaryAnswers","highlightCells","path","deHighlightCells","borderRight","borderBottom","answerRow","playerScore","arrLengths","answer","longestArrLen","max","rowList","i","forEach","cell","score","onMouseEnter","onMouseLeave","word","drawAnswers","tableLayout","A1","A2","A3","A4","B1","B2","B3","B4","C1","C2","C3","C4","D1","D2","D3","D4","definition","WordGridGame","newWord","setNewWord","errorStatus","setErrorStatus","errorStatusMessage","setErrorStatusMessage","enteredWords","wordGridEnteredWords","rotatePos","setRotatePos","enteredWordsRef","submitAnswers","wordList","addWord","guess","handleAnswerRes","renderGrid","curPos","autoComplete","val","videoConstraints","facingMode","WordGridSolver","wordGridSolverSocket","gridData","wordGridSolverData","webcamRef","imgSrc","setImgSrc","keepLooking","handleSearchBoundaries","capture","getScreenshot","audio","ref","screenshotFormat","alt","src","App","Provider","exact","component","Categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","genNewCategories","sampleCategories","initalCategoryList","state","action","concat","filter","item","intialEmptyWordsState","wordGridEnteredWordList","intialAllWordGridAnswers","wordGridPlayerAnswers","genNewBoard","availableOptions","x","arrayOrder","array","j","shuffleArray","board","tilePlacement","randInd","intialWordGridBoardLayout","wordGridBoardLayout","genEmptySolverBoard","intialWordGridSolverBoardLayout","wordGridSolverLayout","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.480f2a1e.chunk.js","sourcesContent":["import {Link} from 'react-router-dom';\n\ntype gameData = {\n    gameID : string,\n    name : string,\n    url: string,\n    biline: string\n}\n\n\nfunction GameItem(gameData: gameData) {\n    return (\n    <Link to={gameData.gameID}>\n      <div className=\"game-item\">\n          \n              <p>\n                  {gameData.name}\n              </p>\n              <p style={{fontSize:\"24px\"}}>\n                  {gameData.biline}\n              </p>\n      </div>\n    </Link>\n    );\n  }\n  \n  export default GameItem;","import GameItem from \"./GameItem\";\nimport allGames from \"../models/gamedata.json\";\n\ninterface game {\n    gameID: string,\n    name: string,\n    biline: string,\n    url: string\n}\n\nfunction GamesList() {\n\n    return <div className=\"game-list\">\n        <div className=\"about-message\">\n          <p>Click an option below to start a game!</p>\n        </div>\n        { \n            allGames.map(\n                (game:game) => {\n                    return <GameItem gameID={game.gameID} name={game.name} biline={game.biline} url={game.url} />\n                }\n            )\n        }\n\n      </div>\n    \n  }\n  \n  export default GamesList;","import {Link, useLocation} from 'react-router-dom';\n\n\nfunction Header() {\n    const location = useLocation()\n\n    return (\n      <div className=\"header\">\n        <Link className=\"header-item\" to=\"/\">Tom Davenport</Link>\n        {\n            location.pathname === \"/\" ? <></> : <Link className=\"header-item\" to=\"/\">Return to game list</Link>\n        }\n      </div>\n    );\n  }\n  \n  export default Header;","  \nimport { useEffect, useState } from 'react'\n\nconst PREFIX = 'categories-game-'\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey)\n    if (jsonValue === \"undefined\") return \"\"\n    if (jsonValue != null) return JSON.parse(jsonValue)\n    if (typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\n  }, [prefixedKey, value])\n\n  return [value, setValue]\n}","import { v4 as uuidv4 } from 'uuid';\nimport {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Category from \"../models/Category\";\nimport {\n    addCategory,\n    removeCategory,\n    updateCategory,\n    resetCategories\n} from \"../actions/actions\"\n\n\nfunction randomLetter(){\n    return String.fromCharCode(65+Math.floor(Math.random() * 26))\n}\n\n\nfunction CategoriesStart() {\n\n    const dispatch = useDispatch();\n\n    // random letter\n    const [gameLetter, setLetter] = useState(randomLetter())\n\n    const [userNameError, setUserNameError] = useState(false)\n    const [categoryError, setCategoryError] = useState(false)\n    \n    const history = useHistory();\n    // const ws = useContext(WebSocketContext);\n\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\n    let [userName, setUserName] = useLocalStorage('userName', '')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage('gameData', {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\n    let [userID, setUserID] = useLocalStorage('userID', '')\n    let [returning, setReturning] = useLocalStorage('returning', false)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\n\n    let categoryList = useSelector((s:any) => s.categoryList)\n\n    useEffect(() => {\n        return setGameData(\n            {\n                \"categories\" : categoryList.categoryList,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoryList]);\n\n\n    function newLetter(){\n        let newLetter = randomLetter()\n        setLetter(newLetter)\n        setGameData(\n            {\n                \"categories\" : categoryList.categoryList,\n                \"gameLetter\" : newLetter\n            }\n        )\n    }\n\n    // category list\n\n    function handleChange(event : any){\n        dispatch(\n            updateCategory(\n                {\n                    key: event.target.id,\n                    name: event.target.value\n                }\n            )\n        )\n        setGameData(\n            {\n                \"categories\" : categoryList.categoryList,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    }\n  \n    function handleRemove(key : string){\n        dispatch(\n            removeCategory(\n                {\n                    key: key\n                }\n            )\n        )\n        setGameData(\n            {\n                \"categories\" : categoryList.categoryList,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    }\n\n    function handleAdd(){\n        dispatch(\n            addCategory(\n                {\n                    key: uuidv4()\n                }\n            )\n        )\n\n        console.log(categoryList.categoryList)\n        setGameData(\n            {\n                \"categories\" : categoryList.categoryList,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    }\n\n    function handleReset(){\n        dispatch(\n            resetCategories()\n        )\n        setGameData(\n            {\n                \"categories\" : categoryList.categoryList,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    }\n\n    // user\n    \n    function handleUserNameChange(event:any){\n        \n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\n        var newReturning = returning ? returning : false\n\n        setGameID(newGameID)\n        setGameSessionID(newGameSessionID)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        setPlayerList([{\n            userID,\n            userName : event.target.value,\n            \"gameLeader\" : true\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value,\n            \"gameLeader\" : true\n        }\n        )\n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n\n    }\n\n    // submit form\n\n    function startGame(event:any){\n\n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n\n        // check that the player has at least one category\n        setCategoryError(categoryList.categoryList.length === 0) \n        setUserNameError(!userName)\n\n        // check that the player has added a username\n        if ((categoryList.categoryList.length === 0) || (!userName)){\n            return\n        }\n        else {\n            history.push(\n                {\n                    \"pathname\" : '/categories-waiting-room',\n                }\n            )\n\n        }\n\n    }\n\n    return (\n    <div className=\"project\">\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\n        \n        <p className=\"explainer\">\n            As the game leader, it's up to you to set the game up!\n        </p>\n        \n        <p>Letter to guess: </p>\n        <span className=\"gameLetter\" id=\"gameLetter\">{gameLetter}</span>\n        <button \n            id=\"newLetter\"\n            onClick={()=>{newLetter()}}\n            style={{\n                \"marginLeft\": \"20px\"\n            }}\n        >\n            New letter\n        </button>\n\n        <p>1. (Optional) Change or add more categories:</p>\n        <p className=\"explainer\">Click a category to change the name, or the button to remove it. </p>\n        { \n            categoryList.categoryList.map(\n                (category: Category) => {\n                    return (\n                    <div className=\"category\">\n                        <input\n                            key={category.key}\n                            type=\"text\" \n                            id={category.key} \n                            defaultValue={category.name}\n                            onChange={(e)=>handleChange(e)}\n                        />\n                        <button onClick={()=>handleRemove(category.key)}>\n                            Remove\n                        </button>\n                    </div>\n                    )\n                }\n            )\n        }\n\n        <button\n            type=\"button\"\n            onClick={()=>handleAdd()}\n            style={{\n                \"marginRight\": \"5px\"\n            }}\n        >\n            Add category\n        </button>\n\n        <button\n            type=\"button\"\n            onClick={()=>handleReset()}\n        >\n            Reset to default\n        </button>\n\n        <p className={ categoryError ? \"showError\" : \"hideError\" }>Please have at least one category before continuing.</p>\n        <p>2. Enter your user name:</p>\n        \n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName}\n            style={{\n                \"paddingRight\": \"5px\"\n            }}\n        />\n\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\n        <p>3. Click start game:</p>\n\n        <button \n            className=\"start-game\" \n            onClick={(e)=>{startGame(e)}}\n            style={{\n                \"marginBottom\": \"20px\"\n            }}\n        >\n            Start Game\n        </button>\n    </div>\n  );\n}\n\nexport default CategoriesStart;","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\n// categories\n\nexport const addCategory = (payload: any): ReduxAction => ({\n    type: \"ADD_CATEGORY\",\n    payload: payload\n})\n\nexport const removeCategory = (payload: any): ReduxAction => ({\n    type: \"REMOVE_CATEGORY\",\n    payload: payload\n})\n\nexport const updateCategory = (payload: any): ReduxAction => ({\n    type: \"UPDATE_CATEGORY\",\n    payload: payload\n})\n\nexport const resetCategories = (): ReduxAction => ({\n    type: \"RESET_CATEGORIES\",\n})\n\n\n// wordgrid\n\nexport const addWordGridWord = (payload: any): ReduxAction => ({\n    type: \"ADD_WORD_WORDGRID\",\n    payload: payload.word\n})\n\nexport const clearWordGridEnteredWords = (): ReduxAction => ({\n    type: \"CLEAR_WORDGRID_ENTERED_WORDS\",\n})\n\nexport const setWordGridGameData = (payload:any): ReduxAction => ({\n    type: \"SET_GAME_DATA\",\n    payload: payload\n})\n\nexport const setAllWordGridAnswers = (payload:any): ReduxAction => ({\n    type: \"SET_WORDGRID_ANSWERS\",\n    payload: payload\n}\n)\n\nexport const setNewWordGridBoard = (): ReduxAction => ({\n    type: \"SET_NEW_WORDGRID_BOARD\",\n})\n\n// wordgrid solver\n\nexport const clearWordGridSolver = (): ReduxAction => ({\n    type: \"CLEAR_WORD_GRID_SOLVER\",\n})\n","\nimport {useState,} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\n\nfunction CategoriesJoin(props:any) {\n\n    const history = useHistory();\n    \n    const [userNameError, setUserNameError] = useState(false)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\n    \n    function handleUserNameChange(event:any){\n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newReturning = returning ? returning : false\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\n\n        setGameID(gameIDPath)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        \n        setPlayerList([{\n            userID,\n            userName:event.target.value\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value\n        }\n        )\n    }\n\n    \n\n    function joinGameRoom(){\n        setUserNameError(!userName)\n        // check that the player has added a username\n        if (!userName){\n            return\n        }\n        \n        history.push(\n            {\n                \"pathname\" : '/categories-waiting-room'\n            }\n        )\n\n        \n    }\n    \n    return (\n    <div className=\"project\">\n        <h1>Join game</h1>\n\n        <p>Enter a username:</p>\n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName} \n        />\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\n        <br/>\n        <button onClick={()=>joinGameRoom()}>Join game</button>\n        \n    </div>\n  );\n}\n\nexport default CategoriesJoin;","export const SOCKETURL = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:8000/\" : \"https://tom-games.azurewebsites.net/\"","import {io} from \"socket.io-client\";\nimport React from 'react';\nimport { SOCKETURL } from '../constants'\n\n// console.log(SOCKETURL + 'categories')\n// export const socket = io( 'https://tom-games.azurewebsites.net/categories');\nexport const socket = io( SOCKETURL + 'categories')\nexport const SocketContext = React.createContext(socket);\n\nexport const picturesocket = io(SOCKETURL + \"picture-guess\")\nexport const PictureSocketContext = React.createContext(picturesocket)\n\nexport const wordGridsocket = io(SOCKETURL + \"wordGrid\")\nexport const wordGridSocketContext = React.createContext(wordGridsocket)\n\nexport const wordGridSolversocket = io(SOCKETURL + \"wordGridSolver\")\nexport const wordGridSolverSocketContext = React.createContext(wordGridSolversocket)","\nimport {useState, useContext, useEffect, useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {SocketContext}  from '../context/socket2'\n\ntype Player = {\n    userName: string,\n    userID: string,\n    gameLeader?: boolean,\n    gamesWon?: number,\n    totalPoints?: number\n}\n\n\nfunction CategoriesWaiting(props:any) {\n    \n    const categoriesSocket = useContext(SocketContext)\n    const [copySuccess, setCopySuccess] = useState('');\n    const history = useHistory();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    let [gameData, setGameData] = useLocalStorage('gameData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [joined, setJoined] = useState(false);\n\n    const baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\n    const joinLink = `${baseJoinLink}/games-frontend#/join-categories/${gameID}`\n\n\n    const handleJoinedRoom = useCallback(()=>{\n        setJoined(true)\n        console.log(true)\n    }, [])\n\n    const handleNewPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        setGameData(data[\"gameData\"])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleStartGame = useCallback((data:any)=>{\n        history.push(\n            {\n                \"pathname\" : '/categories-game-room'\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleSendStart = useCallback(()=>{\n        console.log(\"START!\")\n        categoriesSocket.emit(\"send-start\", {gameID})\n        categoriesSocket.emit(\"start-timer\", {gameID})\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n        \n        categoriesSocket.on('connect',\n            () => {\n                console.log(\"connected categories\")\n            }\n        );\n\n        if (gameID){\n            console.log(\"joining room\")\n\n            categoriesSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n        }\n\n        categoriesSocket.on(\"joined-room\", handleJoinedRoom)\n        categoriesSocket.on(\"new-player\",handleNewPlayer);\n        categoriesSocket.on(\"start-game\", handleStartGame)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            categoriesSocket.off(\"joined-room\", handleJoinedRoom);\n            categoriesSocket.off(\"new-player\", handleNewPlayer);\n            categoriesSocket.off(\"start-game\", handleStartGame);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoriesSocket, handleJoinedRoom, handleNewPlayer, handleStartGame])\n    \n\n    // direct link \n    function linkToClipboard(e:any){\n        navigator.clipboard.writeText(joinLink)\n        e.target.focus();\n        setCopySuccess('Copied!');\n    }\n\n\n    function refreshPage(){\n        window.location.reload()\n    }\n    \n    return (\n    <div className=\"project\">\n        <h1>Categories</h1>\n        <h4>Waiting room</h4>\n\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\n        \n        {/* <p>Your game id is: <span className=\"gameID\">{gameID}</span></p> */}\n        <input readOnly value={joinLink} />\n        <button onClick={(e)=>{linkToClipboard(e)}}>Copy invite link</button>\n        <p>{copySuccess}</p>\n\n        <table className=\"waitingTable\" style={{\"borderCollapse\": \"collapse\"}}>\n        <thead>\n            <th>\n                Player\n            </th>\n            <th>\n                Games won\n            </th>\n            <th>\n                Total score\n            </th>\n        </thead>\n        <tbody>\n            {\n                playerList.map(\n                        (player: Player, ind: number ) => {\n                            return (\n                            <tr key={player.userID}>\n                                <td>\n                                    {player.userName} {player.gameLeader ?  \" (Game leader)\" : \"\" }\n                                </td>\n                                {\n                                    player.gamesWon ?\n                                    <td>\n                                        {player.gamesWon} \n                                    </td>: <td>0</td>\n                                    }\n                                    {\n                                    player.totalPoints ?\n                                    <td>\n                                        {player.totalPoints}\n                                    </td> : <td>0</td>\n                                    }\n                            </tr>\n                            )\n                        }\n                    )\n            }\n        </tbody>\n        </table>\n        { \n            playerList.length === 0 ? <> Can't see any other players? <button onClick={()=>{refreshPage()}}>Refresh</button>  </>: <></> \n        }\n        { playerData.gameLeader && <div> \n        <p>All players ready?</p>\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\n        </div>\n        }\n\n    </div>\n  );\n}\n\nexport default CategoriesWaiting;","import {useState, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Category from \"../models/Category\";\nimport {SocketContext}  from '../context/socket2'\n\n\ntype Answers = [\n    {\n        key : string,\n        name: string,\n        answer? :string\n    }\n]\n\nfunction CategoriesGame(props:any) {\n\n    \n    const history = useHistory();\n    const categoriesSocket = useContext(SocketContext);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userName, setUserName] = useLocalStorage('userName')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage('gameData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userID, setUserID] = useLocalStorage('userID')\n\n    let [minutes, setMinutes] = useState(\"\")\n    let [seconds, setSeconds] = useState(\"\")\n    \n    let [answers, setAnswers] = useState(gameData[\"categories\"])\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameLetter, setGameLetter] = useState(gameData[\"gameLetter\"])\n    let [stopBus, setBus] = useState(false)\n\n\n    const handleChange = (e:any) =>{\n\n        let newAnswers: Answers[] =[]\n        let numAnswers = 0\n        \n        newAnswers = answers.map( (ans:any) =>{\n            if (e.target.id === ans.key){\n                ans[\"answer\"] = e.target.value\n                \n                numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\n            }else{\n                if (ans[\"answer\"]){\n\n                    numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\n                }\n            }\n            return ans\n        })\n\n        if (numAnswers === answers.length){\n            setBus(true)\n        }else{\n            setBus(false)\n        }\n        setAnswers(newAnswers)\n    }\n\n\n    const handleStopBus = useCallback(()=>{\n        console.log(\" handle send answers\")\n        setBus(true)\n        categoriesSocket.emit(\"send-answers\", {\n            gameID,\n            userID,\n            userName,\n            answers,\n            \"stopBus\" : true\n        })\n        history.push(\n            {\n                \"pathname\" : '/categories-scoring',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleTimerTick = useCallback((data: any)=>{\n        \n        setMinutes(data[\"minutes\"])\n        setSeconds(data[\"seconds\"])\n        \n        if ( data[\"minutes\"] === 0 && data[\"seconds\"] === 0 ){\n            handleForceEndGame()\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleForceEndGame = useCallback(()=>{\n        \n        categoriesSocket.emit(\"send-answers\", {\n            gameID,\n            userID,\n            userName,\n            answers,\n            stopBus : false\n        })\n        history.push(\n            {\n                \"pathname\" : '/categories-scoring',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    \n    useEffect( ()=>{\n\n        categoriesSocket.on(\"send-answers\", handleForceEndGame);\n        categoriesSocket.on(\"timer-tick\", handleTimerTick);\n        categoriesSocket.on(\"end-game\", handleForceEndGame)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            categoriesSocket.off(\"send-answers\", handleForceEndGame);\n            categoriesSocket.off(\"timer-tick\", handleTimerTick);\n            categoriesSocket.off(\"end-game\", handleForceEndGame)\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoriesSocket, handleForceEndGame, handleTimerTick])\n\n    return (\n    <div className=\"project\">\n        <h1>Let's play</h1>\n        <p>Time left: {minutes ? minutes.toString() + \" minute\" : \"\" } { seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\n        <p>Enter something for each category that starts with:</p>\n        <p><span className=\"gameLetter\" style={{fontSize: \"55px\"}}>{gameLetter}</span></p>\n\n        <table style={{paddingBottom: \"20px\"}}>\n        <tr>\n            <th>Category</th>\n            <th>Answer</th>\n            <th>{/* Error */}</th>\n        </tr>\n        {answers.map(\n                (category: Category) => {\n                    return (\n                    <tr>\n                        <td>{category.name}</td>\n                        <td>\n                            <input\n                                type=\"text\" \n                                id={category.key} \n                                defaultValue={ category[\"answer\"] ? category[\"answer\"] : '' }\n                                onChange={(e)=>handleChange(e)}\n                            />\n                        </td>\n                        <td style={{textAlign: \"center\"}}>\n                            <p className={ category[\"answer\"] && category[\"answer\"].charAt(0).toLowerCase() !== gameLetter.toLowerCase() ? \"showError\" : \"hideError\" }>Category has to start with {gameLetter}!</p>\n                        </td>\n                    </tr>\n                    )\n                }\n            )\n        }\n        <tr>\n            <td>\n            </td>\n            <td>\n            { stopBus ? <button id=\"stop\" onClick={()=>handleStopBus()}>Stop!</button> : <></>}\n            </td>\n            <td>\n            </td>\n        </tr>\n        </table>\n\n        \n    </div>\n  );\n}\n\nexport default CategoriesGame;","import {useState, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {SocketContext}  from '../context/socket2'\n\n\n\ntype AnswerList = [\n    gameID : string,\n    gameSessionID : string,\n    userID : string,\n    userName : string,\n    answers : Answers[]\n]\n\ntype Answers = [\n    {\n        key : string,\n        name: string,\n        answer? :string\n    }\n]\n\n\nfunction CategoriesScoring(props:any) {\n\n    \n    const history = useHistory();\n    const categoriesSocket = useContext(SocketContext);\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage('gameData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    let [returning, setReturning] = useLocalStorage('returning')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [categories, setCategories] = useState(gameData[\"categories\"])\n    let [allAnswers , setAllAnswers] = useState<AnswerList[]>([]); //useState([])\n    \n    let [userScores, setUserScores] = useState<any[]>([]); \n    let [markedRows, setMarkedRows] = useState<string[]>([]); \n\n    const handleAnswerTable = useCallback( (data:any) => {\n        setAllAnswers(data)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleUpdateScore = useCallback((data:any)=>{\n        setMarkedRows(data[\"rowIds\"])\n        setUserScores(data[\"userScores\"])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleMark = useCallback((rowInd : number, colInd: number, rowId : string)=>{\n        categoriesSocket.emit(\"mark-answer\", {\n            gameID,\n            rowId,\n            colInd,\n            rowInd\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleStartNewGame = useCallback( () => {\n        // so the game leader can make any updates they want\n        categoriesSocket.emit(\"request-new-game\", {\n            gameID\n        })\n        console.log(returning)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        returning = setReturning(true)\n        history.push(\n            {\n                \"pathname\" : '/categories',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const handleNewGameRequested = useCallback( ()=> {\n        // to return players to the waiting room\n\n        setReturning(true)\n\n        history.push(\n            {\n                \"pathname\" : \"/categories-waiting-room\"\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n\n        console.log(allAnswers)\n        \n        if (allAnswers.length === 0){\n            console.log(\"doing this once\")\n            categoriesSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n            categoriesSocket.emit(\"get-all-answers\", {\n                gameID\n            })\n        }\n        \n        categoriesSocket.on(\"get-answers\", handleAnswerTable);\n        categoriesSocket.on(\"update-scores\", handleUpdateScore);\n        categoriesSocket.on(\"start-new-game\", handleNewGameRequested);\n\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            categoriesSocket.off(\"get-answers\", handleAnswerTable);\n            categoriesSocket.off(\"update-scores\", handleUpdateScore);\n            categoriesSocket.off(\"start-new-game\", handleNewGameRequested);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoriesSocket, handleAnswerTable, handleUpdateScore, handleNewGameRequested])\n\n\n    useEffect(() => {\n        console.log(allAnswers)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [allAnswers])\n\n    \n    return (\n    <div className=\"project\">\n        <h1>Time to score!</h1>        \n        <p>The game leader will now mark the answers:</p>\n        <table>\n            <thead>\n                <th>\n                    Category\n                </th>\n                {\n                    allAnswers.map( (user:any) => {\n                        return (\n                        <th>\n                            { user[\"userName\"] ? user[\"userName\"] : 0 }\n                        </th>\n                        )\n                    } )\n                }\n            </thead>\n            <tbody>\n                {\n                    categories.map( (row: any, rowInd: any) => {\n                        return (\n                        <tr>\n                            <td>\n                                { row[\"name\"] }\n                            </td>\n                            { \n                              allAnswers.map( (user:any, colInd) => {\n                                  return (\n                                      <td \n                                        id={ `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}` }\n                                        onClick={ () => {\n                                            // console.log(\"clicked\")\n                                            // console.log(playerData)\n                                            if (playerData[\"gameLeader\"]) {\n                                                // console.log(\"clickedHandler\")\n                                                handleMark(colInd, rowInd, `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}`)\n                                            }\n                                        }\n                                        }\n                                        className={  markedRows.includes('rowIndIS' + rowInd.toString() + 'ANDcolIndIS' + colInd.toString() ) ? \"accepted\" : \"\" }\n                                      >\n                                          { user[\"answers\"][rowInd][\"answer\"] }\n                                      </td>\n                                  )\n                              } )\n                            }\n                        </tr>\n                        )\n                    } )\n                }\n            </tbody>\n            <tfoot>\n                <tr>\n                    <th>\n                        Score\n                    </th>\n                    {\n                        allAnswers.map( (user:any, ind: any) => {\n                            return (\n                            <th>\n                                { \n                                    // eslint-disable-next-line array-callback-return\n                                    userScores.map((userScore:any)=>{\n                                        if (userScore[\"userID\"] === user[\"userID\"]){\n                                            return userScore[\"score\"]\n                                        }\n                                    })\n                                }\n                            </th>\n                            )\n                        } )\n                    }\n                </tr>\n            </tfoot>\n        </table>\n        \n        \n        { playerData[\"gameLeader\"] ? <div>\n                <p>Play again?</p>\n                <button onClick={()=>{\n                    handleStartNewGame()\n                }}>New game</button>\n            </div> : <></>\n        }\n\n        \n    </div>\n  );\n}\n\nexport default CategoriesScoring;","import {useState, useContext, useEffect, useCallback} from 'react';\nimport {PictureSocketContext}  from '../context/socket2'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction PictureGuess(props:any) {\n    // context stuff\n    const pictureSocket = useContext(PictureSocketContext)\n    \n    // class handlers\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [copySuccess, setCopySuccess] = useState('');\n    let [joinStatus, setJoinStatus] = useState('');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [startButtonStatus, setStartButtonStatus] = useState('')\n\n    // user data\n    let [userName, setUserName] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userID, setUserID] = useState(uuidv4())\n\n    // game data in general\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useState(getGameID())\n    let [playerData, setPlayerData] = useState({})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerStatus, setPlayerStatus] = useState('')\n    let [playerList, setPlayerList] = useState([])\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useState({})\n    \n    //current game\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [currentWord, setCurrentWord] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [curGuess, setCurGuess] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [currentPlayer, setCurrentPlayer] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [nextPlayer, setNextPlayer] = useState('')\n\n\n    function getGameID(){\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\n        if (!gameIDPath){\n            let newGameID =  (Math.floor(Math.random() * 1000000) + 100000).toString()\n            return newGameID\n        }else{\n            return gameIDPath\n        }\n    }\n\n    useEffect( () => {\n        setUserName(userName)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [userName])\n\n\n    const handleJoinedRoom = useCallback(()=>{\n        setJoinStatus('hideJoin')\n        console.log(true)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleNewPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        setGameData(data[\"gameData\"])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    // const handleStartGame = useCallback((data:any)=>{\n    //     history.push(\n    //         {\n    //             \"pathname\" : '/categories-game-room'\n    //         }\n    //     )\n    // }, [])\n\n    // const handleSendStart = useCallback(()=>{\n    //     console.log(\"START!\")\n    //     pictureSocket.emit(\"send-start\", {gameID})\n    //     pictureSocket.emit(\"start-timer\", {gameID})\n    // }, [])\n\n    useEffect( ()=>{\n        \n        pictureSocket.on('connect',\n            () => {\n                console.log(\"connected picture-guess\")\n            }\n        );\n\n        pictureSocket.on(\"joined-room\", handleJoinedRoom)\n        pictureSocket.on(\"new-player\",handleNewPlayer);\n        // pictureSocket.on(\"start-game\", handleStartGame)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            pictureSocket.off(\"joined-room\", handleJoinedRoom);\n            pictureSocket.off(\"new-player\", handleNewPlayer);\n            // pictureSocket.off(\"start-game\", handleStartGame);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pictureSocket])//, handleJoinedRoom, handleNewPlayer, handleStartGame])\n    \n\n\n    // direct link \n    function linkToClipboard(e:any){\n        \n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\n\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/picture-guess/${gameID}`)\n        // This is just personal preference.\n        // I prefer to not show the whole text area selected.\n        e.target.focus();\n        setCopySuccess('Copied!');\n    }\n\n    function makeGuess(){\n        \n    }\n\n    function handleGuessChange(e:any){\n        setCurGuess(e.target.value)\n    }\n\n    function handleUserNameChange(e:any){\n        setUserName(e.target.value)\n        setPlayerData(\n            {\n                userID,\n                userName\n            }\n        )\n    }\n\n    function handleJoinGame(){\n        // console.log(gameID)\n        // console.log(userID)\n        // console.log(userName)\n        // console.log(playerData)\n        if (gameID && userID && userName){\n            console.log(\"joining room\")\n\n            pictureSocket.emit(\"join\", {\n                gameID,\n                playerData,\n            })\n        }\n    }\n\n    function newWord(){\n        return \n    }\n\n\n\n    \n    return (\n    <div className=\"project\">\n        <h1>Picture guess</h1>\n        \n        <div className=\"pictureGuess\">\n        \n            <div className=\"leftBar\">\n\n                <div className=\"pictureTimer\">\n                    <p>Timer</p>\n                    <button className={startButtonStatus}>Start</button>\n                </div>\n\n                <div className=\"wordData\">\n                    <p>word to guess: {currentWord}</p>\n                    <p>Too hard?<button onClick={newWord}>New word</button></p>\n                </div>\n                <div className=\"currentTurn\">\n                    <p>Who's turn:</p>\n                    {currentPlayer}\n                    <p>Next:</p>\n                    {nextPlayer}\n                    <p>You are: {playerStatus}</p>\n                </div>\n\n            </div>\n\n            <div className=\"drawingPanel\">\n                <canvas id=\"drawingCanvas\" width=\"500\" height=\"400\">\n\n                </canvas>\n            </div>\n            \n            <div className=\"rightBar\">\n                <div className=\"currentPlayers\">\n                    <p>Game ID: {gameID} <br></br><button onClick={linkToClipboard}>copy share link</button></p>\n                    <p className={joinStatus}><input onChange={(e)=>{handleUserNameChange(e)}} placeholder=\"join game\"></input> <button onClick={handleJoinGame}>Join</button></p>\n                    <p>List of players</p>\n                    <ol>\n                        {\n                            playerList.map( (player)=>{\n                                return (\n                                    <li>{player[\"userName\"]}</li>\n                                )\n                            })\n                        }\n                    </ol>\n                </div>\n                <div className=\"guesses\">\n                    <p>Guess list</p>\n                    <input id=\"guessID\" onChange={(e)=>{handleGuessChange(e)}}></input> <button onClick={makeGuess}>Make guess</button>\n                </div>\n            \n            </div>\n        \n        </div>\n\n    </div>\n  );\n}\n\nexport default PictureGuess;","import {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\n\n\n\n\nfunction WordGridSetup() {\n\n    // random letter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [userNameError, setUserNameError] = useState(false)\n    \n    const history = useHistory();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\n\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\n    let [userName, setUserName] = useLocalStorage('userName', '')\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\n    let [userID, setUserID] = useLocalStorage('userID', '')\n    let [returning, setReturning] = useLocalStorage('returning', false)\n    \n\n    useEffect(()=>{\n        // reset any local storage stuff to defaults\n        setGameID(\"\")\n        setUserName(\"\")\n        setPlayerData({})\n        setGameSessionID(\"\")\n        setUserID(\"\")\n        setReturning(false)\n        setPlayerList([])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    function handleUserNameChange(event:any){\n        \n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\n        var newReturning = returning ? returning : false\n\n        setGameID(newGameID)\n        setGameSessionID(newGameSessionID)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        setPlayerList([{\n            userID,\n            userName : event.target.value,\n            \"gameLeader\" : true\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value,\n            \"gameLeader\" : true\n        }\n        )\n\n    }\n    const handleKeyPress = (e:any) => {\n        if (e.key === \"Enter\"){\n            handleUserNameChange(e)\n        }\n    }\n\n    function startGame(event:any){\n        \n        \n            // check that the player has at least one category\n        setUserNameError(!userName)\n\n        // check that the player has added a username\n        if (!userName){\n            return\n        }\n        else {\n            history.push(\n                {\n                    \"pathname\" : '/wordGrid-waiting-room',\n                }\n            )\n\n        }\n\n    }\n\n    return (\n    <div className=\"project\">\n        <p>A multiplayer game - find words in the grid:</p>\n        <ol>\n            <li>The word has to be made up of letters that are next to each other.</li>\n            <li>In each word, a letter on the board can only be used once.</li>\n        </ol>\n        <p>User name</p>\n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName}\n            onKeyPress={handleKeyPress}\n        />\n        <button className=\"start-game\" onClick={(e)=>{startGame(e)}}>Start Game</button>\n\n    </div>\n  );\n}\n\nexport default WordGridSetup;","import {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\n\nfunction WordGridJoin(props:any) {\n\n    const history = useHistory();\n    \n    const [userNameError, setUserNameError] = useState(false)\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage(\"gameData\", {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage(\"gameSessionID\", \"\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\n    \n    useEffect(()=>{\n        // reset any local storage stuff to defaults\n        setGameID(\"\")\n        setUserName(\"\")\n        setGameData({})\n        setPlayerData({})\n        setGameSessionID(\"\")\n        setUserID(\"\")\n        setReturning(false)\n        setPlayerList([])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    function handleUserNameChange(event:any){\n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newReturning = returning ? returning : false\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\n\n        setGameID(gameIDPath)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        \n        setPlayerList([{\n            userID,\n            userName:event.target.value\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value\n        }\n        )\n    }\n\n    function joinGameRoom(){\n        setUserNameError(!userName)\n        // check that the player has added a username\n        if (!userName){\n            return\n        }\n        \n        history.push(\n            {\n                \"pathname\" : '/wordGrid-waiting-room'\n            }\n        )\n    }\n    \n    return (\n    <div className=\"project\">\n        <h1>Join game</h1>\n\n        <p>Enter a username:</p>\n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName} \n        />\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\n        <br/>\n        <button onClick={()=>joinGameRoom()}>Join game</button>\n        \n    </div>\n  );\n}\n\nexport default WordGridJoin;","\nimport {useState, useContext, useEffect, useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {wordGridSocketContext}  from '../context/socket2'\nimport {clearWordGridEnteredWords} from \"../actions/actions\"\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {setWordGridGameData} from \"../actions/actions\";\n\ntype Player = {\n    userName : string,\n    userID : string,\n    gameLeader? : boolean,\n    gamesWon?: number,\n    totalPoints?: number\n}\n\nfunction WordGridWaiting(props:any) {\n    \n    const wordGridSocket = useContext(wordGridSocketContext)\n    const [copySuccess, setCopySuccess] = useState('');\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [joined, setJoined] = useState(false);\n    \n    let gameData = useSelector((s:any) => s.wordGridGameData)\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\n\n    const baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\n    const joinLink = `${baseJoinLink}/games-frontend#/join-wordGrid/${gameID}`\n\n\n    // TODO: dump this so the build process works\n\n    const handleJoinedRoom = useCallback(()=>{\n        setJoined(true)\n    }, [])\n\n    const handleNewPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        dispatch(setWordGridGameData(data[\"gameData\"]))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleStartGame = useCallback((data:any)=>{\n        history.push(\n            {\n                \"pathname\" : '/wordGrid-game-room'\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleSendStart = useCallback(()=>{\n        console.log(\"START!\")\n        wordGridSocket.emit(\"send-start\", {gameID})\n        wordGridSocket.emit(\"start-timer\", {gameID})\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleBootedPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        if (playerData[\"userID\"] === data[\"bootPlayerID\"]){\n            history.push(\n                {\n                    \"pathname\" : '/wordGrid'\n                }\n            )\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n        \n        wordGridSocket.on('connect',\n            () => {\n                console.log(\"connected wordGrid\")\n            }\n        );\n\n        if (gameID){\n            console.log(\"joining room\")\n\n            wordGridSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n        }\n\n        wordGridSocket.on(\"joined-room\", handleJoinedRoom)\n        wordGridSocket.on(\"new-player\",handleNewPlayer);\n        wordGridSocket.on(\"start-game\", handleStartGame)\n        wordGridSocket.on(\"booted-player\", handleBootedPlayer)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSocket.off(\"joined-room\", handleJoinedRoom);\n            wordGridSocket.off(\"new-player\", handleNewPlayer);\n            wordGridSocket.off(\"start-game\", handleStartGame);\n            wordGridSocket.off(\"booted-player\", handleBootedPlayer)\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSocket, handleJoinedRoom, handleNewPlayer, handleStartGame, handleBootedPlayer])\n    \n\n    // direct link \n    function linkToClipboard(e:any){\n        navigator.clipboard.writeText(joinLink)\n        // This is just personal preference.\n        // I prefer to not show the whole text area selected.\n        e.target.focus();\n        setCopySuccess('Copied!');\n    }\n\n\n    function refreshPage(){\n        window.location.reload()\n    }\n\n    // console.log(\"words pre clearing\")\n    // console.log(enteredWords)\n    dispatch(clearWordGridEnteredWords())\n    // console.log(enteredWords)\n    // console.log(\"words post clearing\")\n    \n    const handleBootPlayer = useCallback((bootPlayerID: string)=>{\n        console.log(\"START!\")\n        wordGridSocket.emit(\"boot-player\", {\n            gameID,\n            bootPlayerID\n        }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    return (\n    <div className=\"project\">\n        <h1>Word Grid</h1>\n        <h4>Waiting room</h4>\n        \n        <div \n            className=\"explainer\"\n            style={{\n                textAlign: \"left\",\n                border: \"solid 2px white\",\n                borderRadius: \"10px\",\n            }}\n        >\n        <p>Rules</p>\n        <ol>\n            <li>The word has to be made up of letters that are next to each other.</li>\n            <li>In each word, a letter on the board can only be used once.</li>\n            <li>Words must be at least 4 letters long.</li>\n        </ol>\n        </div>\n\n        <p className=\"explainer\" style={{marginBottom:\"10px\"}} >Share this link to invite friends</p>\n        <input readOnly style={{width:\"400px\"}} value={joinLink}/>\n        <button style={{marginLeft: \"20px\"}} onClick={(e)=>{linkToClipboard(e)}}>Copy direct invite link</button>\n        <p>{copySuccess}</p>\n\n        <p>Current players:</p>\n        <table className=\"wordGridTable\" style={{\"borderCollapse\": \"collapse\"}}>\n        <thead>\n            <tr>\n                <th>\n                    Player\n                </th>\n                <th> Games won </th>\n                <th> Total points </th>\n            </tr>\n        </thead>\n        <tbody>\n            {\n                playerList.map(\n                        (player: Player, ind: number ) => {\n                            return (\n                            <tr key={player.userID}>\n                                <td>\n                                    {player.userName}\n                                    {player.gameLeader ?  \" (Game leader)\" : \"\" }\n                                    <br/>\n                                    {\n                                        \n                                        playerData.gameLeader ? \n                                            player.gameLeader ? <></> : <button onClick={()=> handleBootPlayer(player.userID)}>Boot</button>\n                                        : \"\"\n                                    \n                                    }\n                                </td>\n                                \n                                    {\n                                    player.gamesWon ?\n                                    <td>\n                                        {player.gamesWon} \n                                    </td>: <td>0</td>\n                                    }\n                                    {\n                                    player.totalPoints ?\n                                    <td>\n                                        {player.totalPoints}\n                                    </td> : <td>0</td>\n                                    }\n                            </tr>\n                            )\n                        }\n                    )\n            }\n        </tbody>\n        </table>\n        { \n            playerList.length === 0 ? <> Can't see any other players? <button onClick={()=>{refreshPage()}}>Refresh</button>  </>: <></> \n        }\n        { playerData.gameLeader && <div> \n        <p>Ready?</p>\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\n        </div>\n        }\n\n    </div>\n  );\n}\n\nexport default WordGridWaiting;","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {wordGridSocketContext}  from '../context/socket2'\nimport {setAllWordGridAnswers} from \"../actions/actions\";\nimport {setNewWordGridBoard} from \"../actions/actions\";\nimport {clearWordGridEnteredWords} from \"../actions/actions\"\n\ntype Answer = {\n    word?: string\n    path?: string[]\n    score?: number\n}\n\ntype AnswerList = [\n    Answer[]\n]\n\nfunction WordGridScoring(props:any) {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const wordGridSocket = useContext(wordGridSocketContext);\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [returning, setReturning] = useLocalStorage('returning')\n    \n    let [counter, setCounter] = useState(0)\n\n    let newGame = useRef(false)\n    \n    const newBoard = useRef({});\n\n    const isInitialMount = useRef(true)\n\n    let gameData = useSelector((s:any) => s.wordGridGameData)\n\n    let [allAnswers, setAllAnswers] = useState([])\n    let [allDictionaryAnswers, setAllDictionaryAnswers] = useState([])\n\n    let [highlightedCells, setHighlightedCells] = useState<string[]>([]);\n    // if (playerData.gameLeader){\n    //     // newBoard.current = genNewBoard()\n    // } else {\n    //     // newBoard.current = {\"b\": 2}\n    // }\n    useEffect(()=>{\n        \n        console.log(\"using effect\")\n        console.log(newGame.current)\n        \n        if (newGame.current === true){\n            console.log(\"actually using effect\")\n            console.log(newGame.current)\n            console.log(newBoard.current)\n\n            // setGameData(newBoard.current)\n\n            dispatch(clearWordGridEnteredWords())\n            dispatch(setNewWordGridBoard())\n            setAllAnswers([])\n            setAllDictionaryAnswers([])\n            setReturning(true)\n            newGame.current = false\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [counter])\n\n    const handleAnswerTable = useCallback( (data:any) => {\n        console.log(\"received answers\")\n        // console.log(data)\n\n        dispatch(setAllWordGridAnswers(data))\n        setCounter(counter + 1)\n\n        setAllAnswers(data.allAnswers)\n        setAllDictionaryAnswers(data.dictionaryAnswers)\n\n        // console.log(allWordGridAnswers)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    // function wipeCurGameData (gameLeader:boolean) {\n    //     console.log(gameLeader)\n        \n    // }\n\n    function handleStartNewGame() {\n        // so the game leader can make any updates they want\n        \n        // wipeCurGameData(playerData.gameLeader)\n        newGame.current = true\n        setCounter(counter + 1) // trigger page update\n\n        console.log(\"new game\")\n        console.log(newGame)\n        \n        wordGridSocket.emit(\"request-new-game\", {\n            gameID,\n            gameData\n        })\n\n        // history.push(\n        //     {\n        //         \"pathname\" : '/wordGrid-waiting-room',\n        //     }\n        // )\n\n    }\n\n    const handleNewGameRequested = useCallback( ()=> {\n        // to return players to the waiting room\n\n        newGame.current = true\n        setCounter(counter + 1) // trigger page update\n\n        history.push(\n            {\n                \"pathname\" : \"/wordGrid-waiting-room\"\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    useEffect( ()=>{\n        \n        if (isInitialMount.current){\n            isInitialMount.current = false\n            console.log(\"doing this once\")\n            wordGridSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n            wordGridSocket.emit(\"get-all-answers\", {\n                gameID\n            })\n        }\n        \n        wordGridSocket.on(\"get-answers\", handleAnswerTable);\n        wordGridSocket.on(\"start-new-game\", handleNewGameRequested);\n\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSocket.off(\"get-answers\", handleAnswerTable);\n            wordGridSocket.off(\"start-new-game\", handleNewGameRequested);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSocket, handleAnswerTable, handleNewGameRequested])\n\n    const highlightCells = (path:string[]) => {\n        // first get the path\n        setHighlightedCells(path)\n    }\n\n    const deHighlightCells = () => {\n        setHighlightedCells([])\n    }\n\n    function drawAnswers(allAnswers:any){\n\n        var arrLengths = allAnswers.map((answer:any)=>{\n            // console.log(answer)\n            return answer[\"enteredWords\"][\"wordList\"].length\n        })\n\n        var longestArrLen = Math.max(...arrLengths)\n\n        // console.log(longestArrLen)\n\n        let rowList = []\n\n        for (let i = 0; i < longestArrLen; i++ ){\n            // console.log(i)\n            let row: Array<AnswerList> = []\n            allAnswers.forEach((answer:any)=>{\n                // console.log(answer)\n                if (answer[\"scoredAnswers\"][i]){\n                    row.push(\n                        answer[\"scoredAnswers\"][i]\n                    )\n                }else{\n                    var blankAns =  {\n                        \"word\": \"\",\n                        \"score\": -1,\n                        \"path\": []\n                    }\n                    answer[\"scoredAnswers\"][i] = blankAns\n                    row.push(\n                        answer[\"scoredAnswers\"][i]\n                    )\n                }\n            })\n\n            rowList.push(row)\n        }\n\n        // console.log(rowList)\n\n        return rowList.map((row: any)=>{\n            return (\n            <tr>\n                <td style={{borderRight:\"3px solid\"}}></td>\n                {\n                    row.map((cell: any)=>{\n                        return (\n                                <td className={cell.score === 0 ? \"seenWord\" : \"\"} onMouseEnter={() => highlightCells(cell.path)} onMouseLeave={()=>deHighlightCells()}>\n                                    {cell.word}\n                                </td>\n                        )\n                    })\n                }\n            </tr>\n            )\n        })\n    }\n\n\n    return (\n    <div className=\"project\">\n        <h1>Results!</h1>        \n\n        {/* <p style={{fontSize: \"10px\"}}>{JSON.stringify(allAnswers)}</p> */}\n        \n        <table className=\"playerAnswers\" style={{\"borderCollapse\": \"collapse\"}}>\n        <thead>\n            <tr>\n                <td style={{borderRight:\"3px solid\", borderBottom: \"3px solid\"}}>Player</td>\n                {\n                    allAnswers && allAnswers.map((answerRow:any)=>{\n                        return <th style={{borderBottom: \"3px solid\"}}>{answerRow.userName}</th>\n                    })\n                }\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td style={{borderRight:\"3px solid\", borderBottom: \"3px solid\"}}>\n                    Score\n                </td>\n                {\n                    allAnswers && allAnswers.map((answerRow:any)=>{\n                        return <th style={{borderBottom: \"3px solid\"}}>{answerRow.playerScore}</th>\n                    })\n                }\n            </tr>\n            {\n                allAnswers && drawAnswers(allAnswers)\n            }\n        \n        </tbody>\n        </table>\n        \n        \n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\n            <thead>\n            </thead>\n            <tbody>\n            <tr><td className={highlightedCells.includes(\"A1\") ? \"highlight\" : \"\"}>{gameData.A1}</td><td className={highlightedCells.includes(\"A2\") ? \"highlight\" : \"\"}>{gameData.A2}</td><td className={highlightedCells.includes(\"A3\") ? \"highlight\" : \"\"}>{gameData.A3}</td><td className={highlightedCells.includes(\"A4\") ? \"highlight\" : \"\"}>{gameData.A4}</td></tr>\n            <tr><td className={highlightedCells.includes(\"B1\") ? \"highlight\" : \"\"}>{gameData.B1}</td><td className={highlightedCells.includes(\"B2\") ? \"highlight\" : \"\"}>{gameData.B2}</td><td className={highlightedCells.includes(\"B3\") ? \"highlight\" : \"\"}>{gameData.B3}</td><td className={highlightedCells.includes(\"B4\") ? \"highlight\" : \"\"}>{gameData.B4}</td></tr>\n            <tr><td className={highlightedCells.includes(\"C1\") ? \"highlight\" : \"\"}>{gameData.C1}</td><td className={highlightedCells.includes(\"C2\") ? \"highlight\" : \"\"}>{gameData.C2}</td><td className={highlightedCells.includes(\"C3\") ? \"highlight\" : \"\"}>{gameData.C3}</td><td className={highlightedCells.includes(\"C4\") ? \"highlight\" : \"\"}>{gameData.C4}</td></tr>\n            <tr><td className={highlightedCells.includes(\"D1\") ? \"highlight\" : \"\"}>{gameData.D1}</td><td className={highlightedCells.includes(\"D2\") ? \"highlight\" : \"\"}>{gameData.D2}</td><td className={highlightedCells.includes(\"D3\") ? \"highlight\" : \"\"}>{gameData.D3}</td><td className={highlightedCells.includes(\"D4\") ? \"highlight\" : \"\"}>{gameData.D4}</td></tr>\n            </tbody>\n        </table>\n        <p style={{fontSize: \"15px\"}}>All words:</p>\n        <table className=\"wordGridDictionaryTable\" style={{fontSize: \"10px\"}}>\n            <thead>\n                {\n                    allDictionaryAnswers && <tr>\n                        <th>Word</th>\n                        <th>Definition</th>\n                        <th>Score</th>\n                        </tr>\n                }\n            </thead>\n            <tbody>\n            {\n            allDictionaryAnswers && allDictionaryAnswers.map(\n                (word:any)=>{\n                return <tr onMouseEnter={() => highlightCells(word.path)} onMouseLeave={()=>deHighlightCells()}>\n                    <td>\n                        {word.word}\n                    </td>\n                    <td>\n                        {word.definition}\n                    </td>\n                    <td>\n                        {word.score}\n                    </td>\n                </tr>\n            })\n            }\n            </tbody>\n        </table>\n\n        \n        { playerData[\"gameLeader\"] ? <div>\n                <p>Play again?</p>\n                <button onClick={handleStartNewGame}>New game</button>\n            </div> : <></>\n        }\n\n        \n    </div>\n  );\n}\n\nexport default WordGridScoring;","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {wordGridSocketContext}  from '../context/socket2'\nimport {addWordGridWord} from \"../actions/actions\"\n\nfunction WordGridGame(props:any) {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const wordGridSocket = useContext(wordGridSocketContext);\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userName, setUserName] = useLocalStorage('userName')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userID, setUserID] = useLocalStorage('userID')\n\n    let [minutes, setMinutes] = useState(\"\")\n    let [seconds, setSeconds] = useState(\"\")\n    \n    let [newWord, setNewWord] = useState('');\n    let [errorStatus, setErrorStatus] = useState('');\n    let [errorStatusMessage, setErrorStatusMessage] = useState('');\n\n    let enteredWords = useSelector((s:any) => s.wordGridEnteredWords)\n    let gameData = useSelector((s:any) => s.wordGridGameData)\n    \n    let [rotatePos, setRotatePos] = useState(0);\n\n    const enteredWordsRef = useRef<string[]>([])\n\n    const handleTimerTick = useCallback((data: any)=>{\n        \n        setMinutes(data[\"minutes\"])\n        setSeconds(data[\"seconds\"])\n        \n        if ( data[\"minutes\"] === 0 && data[\"seconds\"] === 0 ){\n            handleForceEndGame()\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleForceEndGame = useCallback(()=>{\n        // console.log(\"entered words\")\n        // console.log(enteredWords)\n\n        const submitAnswers = {\n            gameID,\n            userID,\n            userName,\n            enteredWords: {\n                wordList: enteredWordsRef.current\n            }\n        }\n        console.log(\"submit answers is\")\n        console.log(submitAnswers)\n        \n        wordGridSocket.emit(\"send-answers-wordGrid\", submitAnswers)\n\n        history.push(\n            {\n                \"pathname\" : '/wordGrid-scoring',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    const addWord = useCallback((newWord)=>{\n        \n        var guess = {\n            gameID: gameID,\n            guess: newWord\n        }\n        // console.log(enteredWords)\n        if (enteredWords.wordList.includes(newWord)){\n            setErrorStatus('showError')\n            setErrorStatusMessage(\"Sorry, word already entered\")\n            setNewWord(\"\")\n            \n        }else{\n            console.log(guess)\n        \n            wordGridSocket.emit(\n                \"check-answer\",\n                guess\n            )\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleAnswerRes = useCallback((data: any)=>{\n        // console.log(\"handling response from server\")\n        // console.log(enteredWords)\n        \n        if (data[\"inDict\"]){\n    \n            dispatch(\n                addWordGridWord(\n                    {\n                        word: data[\"word\"]\n                    }\n                )\n            )\n\n            enteredWordsRef.current = [...enteredWordsRef.current, data[\"word\"]]\n\n            console.log(enteredWordsRef)\n\n            setNewWord(\"\")\n        }else{\n            setErrorStatus(\"showError\")\n            setErrorStatusMessage(\"Sorry, word not found in the grid / dictionary\")\n            setNewWord(\"\")\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n        wordGridSocket.on(\"get-answers\", handleForceEndGame);\n        wordGridSocket.on(\"timer-tick\", handleTimerTick);\n        wordGridSocket.on(\"end-game\", handleForceEndGame)\n        wordGridSocket.on(\"answer-res\", handleAnswerRes)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSocket.off(\"get-answers\", handleForceEndGame);\n            wordGridSocket.off(\"timer-tick\", handleTimerTick);\n            wordGridSocket.off(\"end-game\", handleForceEndGame);\n            wordGridSocket.off(\"answer-res\", handleAnswerRes);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSocket, handleForceEndGame, handleTimerTick, handleAnswerRes])\n\n    const handleKeyPress = (e:any) => {\n        if (e.key === \"Enter\"){\n            addWord(newWord)\n        }\n    }\n\n    const rotateGrid = () => {\n        // console.log(rotatePos)\n        var curPos = rotatePos\n        if (curPos + 1 === 4){\n            curPos = 0\n            setRotatePos(curPos)\n        }else{\n            setRotatePos(curPos + 1)\n        }\n    }\n\n    const renderGrid = ()=>{\n        switch (rotatePos){\n            case 0:\n                return (\n                <tbody>\n                    <tr><td>{gameData.A1}</td><td>{gameData.A2}</td><td>{gameData.A3}</td><td>{gameData.A4}</td></tr>\n                    <tr><td>{gameData.B1}</td><td>{gameData.B2}</td><td>{gameData.B3}</td><td>{gameData.B4}</td></tr>\n                    <tr><td>{gameData.C1}</td><td>{gameData.C2}</td><td>{gameData.C3}</td><td>{gameData.C4}</td></tr>\n                    <tr><td>{gameData.D1}</td><td>{gameData.D2}</td><td>{gameData.D3}</td><td>{gameData.D4}</td></tr>\n                </tbody>\n                );\n            case 1:\n                return ( \n                    <tbody>\n                        <tr><td>{gameData.D1}</td><td>{gameData.C1}</td><td>{gameData.B1}</td><td>{gameData.A1}</td></tr>\n                        <tr><td>{gameData.D2}</td><td>{gameData.C2}</td><td>{gameData.B2}</td><td>{gameData.A2}</td></tr>\n                        <tr><td>{gameData.D3}</td><td>{gameData.C3}</td><td>{gameData.B3}</td><td>{gameData.A3}</td></tr>\n                        <tr><td>{gameData.D4}</td><td>{gameData.C4}</td><td>{gameData.B4}</td><td>{gameData.A4}</td></tr>\n                    </tbody>\n                    );\n            case 2:\n                return ( \n                    <tbody>\n                        <tr><td>{gameData.D4}</td><td>{gameData.D3}</td><td>{gameData.D2}</td><td>{gameData.D1}</td></tr>\n                        <tr><td>{gameData.C4}</td><td>{gameData.C3}</td><td>{gameData.C2}</td><td>{gameData.C1}</td></tr>\n                        <tr><td>{gameData.B4}</td><td>{gameData.B3}</td><td>{gameData.B2}</td><td>{gameData.B1}</td></tr>\n                        <tr><td>{gameData.A4}</td><td>{gameData.A3}</td><td>{gameData.A2}</td><td>{gameData.A1}</td></tr>\n                    </tbody>\n                    )\n            case 3:\n                return ( \n                    <tbody>\n                        <tr><td>{gameData.A4}</td><td>{gameData.B4}</td><td>{gameData.C4}</td><td>{gameData.D4}</td></tr>\n                        <tr><td>{gameData.A3}</td><td>{gameData.B3}</td><td>{gameData.C3}</td><td>{gameData.D3}</td></tr>\n                        <tr><td>{gameData.A2}</td><td>{gameData.B2}</td><td>{gameData.C2}</td><td>{gameData.D2}</td></tr>\n                        <tr><td>{gameData.A1}</td><td>{gameData.B1}</td><td>{gameData.C1}</td><td>{gameData.D1}</td></tr>\n                    </tbody>\n                    )\n        }\n    }\n\n    return (\n    <div className=\"project\">\n        <h1>Let's play</h1>\n        <p>Time left: </p>\n        <p>{minutes ? minutes.toString() + \" minute\" : \"\" } { minutes || seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\n\n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\n            <thead>\n            </thead>\n                {renderGrid()}\n        </table>\n        <p style={{fontSize: \"14px\"}}>stuck? try rotating: </p><button onClick={rotateGrid}>Rotate</button>\n        <p>\n            Enter words\n        </p>\n        <input \n            autoComplete=\"off\"\n            type=\"text\" \n            id=\"newWord\" \n            placeholder=\"Add word\" \n            onChange={e=>{\n                const val = e.target.value\n                setErrorStatus(\"hideError\")\n                setNewWord(val)}\n            }\n            value={newWord}\n            onKeyPress={handleKeyPress}\n        />\n        <button className=\"add-word\"  onClick={e=>{\n            addWord(newWord)\n        }}>Add word</button>\n\n        { playerData.gameLeader && <div> \n            <button className=\"end-game\" onClick={handleForceEndGame}>Force End Game</button>\n        </div>\n        }\n        \n        <p className={errorStatus}>{errorStatusMessage}</p>\n\n        <p>Your words: </p>\n\n        <ul>\n        {\n            enteredWords.wordList.map( (word: string) => {\n                return (\n                <li key={word}>\n                    {word}\n                </li>\n                )\n        })\n        }\n        </ul>\n    </div>\n  );\n}\n\nexport default WordGridGame;","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {wordGridSolverSocketContext}  from '../context/socket2'\nimport Webcam from 'react-webcam';\n\nconst videoConstraints = {\n    width: 250,\n    height: 250,\n    facingMode: \"user\"\n  };\n\n\nfunction WordGridSolver(props:any) {\n\n    const wordGridSolverSocket = useContext(wordGridSolverSocketContext);\n    const gridData = useSelector((s:any) => s.wordGridSolverData);\n    const webcamRef = useRef<Webcam>(null);\n    const [imgSrc, setImgSrc] = useState<string | null>(null);\n\n    let keepLooking = useRef(true)\n\n    // useEffect(()=>{\n    //     console.log(\"using effect\")\n    //     if (webcamRef.current){\n    //         let interval = setInterval(\n    //             function(){ \n    //                 if (webcamRef.current){\n    //                     wordGridSolverSocket.emit(\"solve-image\", {\n    //                         \"imageData\" : webcamRef.current.getScreenshot()\n    //                     })\n    //                 }\n    //             },1000\n    //         );\n    //     }\n\n    // }, [])\n\n    const handleSearchBoundaries = useCallback((data)=>{\n        console.log(\"New search boundaries!\")\n        if (webcamRef.current){\n            //const imageSrc = webcamRef.current.getScreenshot();\n            // console.log(imageSrc)\n            setImgSrc(data[\"imgWithBoundaries\"]);\n            // console.log(data[\"imgWithBoundaries\"])\n            keepLooking.current = false\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n\n    useEffect( ()=>{\n        \n        wordGridSolverSocket.on('connect',\n            () => {\n                console.log(\"connected wordGrid\")\n            }\n        );\n\n        wordGridSolverSocket.emit(\"join\", {})\n\n        wordGridSolverSocket.on(\"solved-image\", handleSearchBoundaries)\n\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSolverSocket.off(\"solved-image\", handleSearchBoundaries)\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSolverSocket, handleSearchBoundaries])\n\n    const capture = useCallback(\n        () => {\n            if (webcamRef.current) {\n                // const imageSrc = webcamRef.current.getScreenshot();\n                // // console.log(imageSrc)\n                // setImgSrc(imageSrc);\n\n                wordGridSolverSocket.emit(\"solve-image\", {\n                    \"imageData\" : webcamRef.current.getScreenshot()//imgSrc\n                })\n            }\n        },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n        [webcamRef]\n    );\n\n    // const renderImg = () => {\n    //     console.log(\"render img\")\n    //     // console.log(imgSrc)\n    //     if (imgSrc){\n    //         console.log(\"passed\")\n    //         console.log(imgSrc)\n    //         return <img src={imgSrc} />\n    //     }\n    // }\n\n    // useEffect(()=>{\n    //     renderImg()\n    // }, [imgSrc])\n\n    return (\n    <div className=\"project\">\n        <p>Use your camera to populate the grid:</p>\n\n        <p  style={{ \"fontSize\": \"12px\"}}>\n            In progress - text detection is a challenging problem - pressing capture photo\n            will return the image with the bounding boxes of where text might be located.\n        </p>\n\n        <table>\n        <tr>\n        <td>{\n            <Webcam\n                audio={false}\n                height={250}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                width={250}\n                videoConstraints={videoConstraints}\n            />\n        }</td>\n        <td>\n            {\n                imgSrc && <img alt=\"\" src={imgSrc} />\n            }\n        </td>\n        </tr>\n        <td>\n            <button onClick={capture}>Capture photo</button>\n        </td>\n        <td>\n\n        </td>\n        </table>\n        <div className=\"webcamPreview\">\n        \n        </div>\n        <div className=\"webcamScreenshot\">\n\n        </div>\n\n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\n            <thead>\n            </thead>\n            <tbody>\n                <tr><td>{gridData.A1}</td><td>{gridData.A2}</td><td>{gridData.A3}</td><td>{gridData.A4}</td></tr>\n                <tr><td>{gridData.B1}</td><td>{gridData.B2}</td><td>{gridData.B3}</td><td>{gridData.B4}</td></tr>\n                <tr><td>{gridData.C1}</td><td>{gridData.C2}</td><td>{gridData.C3}</td><td>{gridData.C4}</td></tr>\n                <tr><td>{gridData.D1}</td><td>{gridData.D2}</td><td>{gridData.D3}</td><td>{gridData.D4}</td></tr>\n            </tbody>\n        </table>\n\n        <p>Or enter each letter, reading left to right</p>\n        <input></input><button>Solve</button>\n    </div>\n  );\n}\n\nexport default WordGridSolver;","import { Switch, Route } from 'react-router-dom';\nimport GamesList from \"./components/GamesList\";\nimport Header from \"./components/Header\";\nimport Categories from \"./categories/categories\";\nimport CategoriesJoin from \"./categories/CategoriesJoin\";\nimport CategoriesWaiting from \"./categories/CategoriesWaiting\";\nimport CategoriesGame from \"./categories/CategoriesGame\";\nimport CategoriesScoring from \"./categories/CategoriesScoring\";\nimport PictureGuess from \"./pictureguess/Pictureguess\";\nimport WordGridSetup from \"./wordGrid/WordGridSetup\";\nimport WordGridJoin from \"./wordGrid/WordGridJoin\";\nimport WordGridWaiting from \"./wordGrid/WordGridWaiting\";\nimport WordGridScoring from \"./wordGrid/WordGridScoring\";\nimport WordGridGame from \"./wordGrid/WordGridGame\";\nimport './App.css';\nimport {SocketContext, socket} from \"./context/socket2\"\nimport {PictureSocketContext, picturesocket} from \"./context/socket2\"\nimport WordGridSolver from './wordGridSolver/wordGridSolver';\n\nfunction App() {\n    return (\n        <PictureSocketContext.Provider value={picturesocket}>\n        <SocketContext.Provider value={socket}>\n            <div className=\"App\">\n                <div className=\"header\">\n                    <Header/>\n                </div>\n                \n                <div className=\"main-content\">\n                    <Switch>\n                        <Route exact path=\"/\" component={GamesList}/>\n                        \n                        <Route path=\"/categories\" component={Categories}/>\n                        <Route exact path=\"/join-categories/:gameID\" component={CategoriesJoin}/>\n                        <Route path=\"/categories-waiting-room\" component={CategoriesWaiting}/>\n                        <Route path=\"/categories-game-room\" component={CategoriesGame}/>\n                        <Route path=\"/categories-scoring\" component={CategoriesScoring}/>\n                        \n                        <Route path=\"/picture-guess/:gameID\" component={PictureGuess}/>\n                        <Route path=\"/picture-guess\" component={PictureGuess}/>\n\n                        <Route path=\"/wordGrid\" component={WordGridSetup} />\n                        <Route exact path=\"/join-wordGrid/:gameID\" component={WordGridJoin}/>\n                        <Route path=\"/wordGrid-waiting-room\" component={WordGridWaiting}/>\n                        <Route path=\"/wordGrid-game-room\" component={WordGridGame}/>\n                        <Route path=\"/wordGrid-scoring\" component={WordGridScoring}/>\n\n                        <Route path=\"/wordGridSolver\" component={WordGridSolver} />\n                    </Switch>\n                </div>\n            </div>\n        </SocketContext.Provider>\n        </PictureSocketContext.Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import sampleCategories from \"../models/sampleCategories.json\";\n\ninterface ReduxAction {\n    type: string\n    payload?: any\n}\n\nexport interface Category {\n    key: string,\n    name: string,\n    answer: string\n}\n\nexport interface CategoryList {\n    categoryList: Category[]\n}\n\nfunction genNewCategories(){\n    return {\n        categoryList: sampleCategories\n    }\n}\n\nexport const initalCategoryList = genNewCategories() as CategoryList\n\nexport const categoryList = (\n    state: CategoryList = initalCategoryList,\n    action: ReduxAction\n): CategoryList => {\n    switch(action.type){\n        case 'ADD_CATEGORY':\n            return ({\n                ...state,\n                categoryList : state.categoryList.concat({name: action.payload.name, key: action.payload.key, answer: \"\"})\n            })\n        case 'UPDATE_CATEGORY':\n            return ({\n                ...state,\n                categoryList : state.categoryList.map(\n                    (category: Category) => {\n                        if (action.payload.key === category.key){\n                            const updatedItem = {\n                                ...category,\n                                name : action.payload.name\n                            };\n                            return updatedItem\n                        }else{\n                            return category\n                        }\n                    }\n                )\n            })\n        case 'REMOVE_CATEGORY':\n            return ({\n                ...state,\n                categoryList : state.categoryList.filter((item:Category) => item.key !== action.payload.key)\n            })\n        case 'RESET_CATEGORIES':\n            return genNewCategories()\n        default:\n            return state\n    }\n\n}\n\nexport default categoryList","\ninterface ReduxAction {\n    type: string\n    payload?: any\n}\n\nexport interface EnteredWordState {\n    wordList: String[]\n}\n\nexport const intialEmptyWordsState = {\n    wordList: []\n} as EnteredWordState\n\nexport const wordGridEnteredWordList = (\n    state: EnteredWordState = intialEmptyWordsState,\n    action: ReduxAction\n): EnteredWordState => {\n    switch(action.type){\n        case 'ADD_WORD_WORDGRID':\n            return {\n                wordList: [action.payload, ...state.wordList]\n            }\n        case 'GET_WORDGRID_ENTERED_WORDS':\n            return state\n        case 'CLEAR_WORDGRID_ENTERED_WORDS':\n            return intialEmptyWordsState\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridEnteredWordList","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\nexport interface WordGridDictWord {\n    word: string\n    path: string[],\n    definition: string\n}\n\nexport interface EnteredWords {\n    wordList?: string[]\n}\n\nexport interface WordGridPlayerAnswers {\n    enteredWords: EnteredWords,\n    gameID: string,\n    playerScore: number,\n    userID: string,\n    userName: string\n}\n\nexport interface AllWordGridAnswers {\n    dictionaryAnswers: WordGridDictWord[]\n    allAnswers: WordGridPlayerAnswers[]\n}\n\nexport const intialAllWordGridAnswers = {\n    dictionaryAnswers: [],\n    allAnswers: []\n} as AllWordGridAnswers\n\nexport const wordGridPlayerAnswers = (\n    state: AllWordGridAnswers = intialAllWordGridAnswers,\n    action: ReduxAction\n): AllWordGridAnswers => {\n    switch(action.type){\n        case 'SET_WORDGRID_ANSWERS':\n            // console.log(\"setting wordGrid answers\")\n            // console.log(action.payload)\n            return {\n                dictionaryAnswers: action.payload[\"dictionaryAnswers\"],\n                allAnswers: action.payload[\"allAnswers\"]\n            }\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridPlayerAnswers","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\nfunction genNewBoard(){\n    const availableOptions = \"AAEEGN, ELRTTY, AOOTTW, ABBJOO, EHRTVW, CIMOTU, DISTTY, EIOSST, DELRVY, ACHOPS, HIMNQU, EEINSU, EEGHNW, AFFKPS, HLNNRZ, DEILRX\".split(\", \").map(x=>x.split(''))\n\n    function shuffleArray(array: number[]) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array\n    }\n\n    // shuffle list of indicies\n    //let arrayOrder =  Array(16).fill(-1).map( (_, i) => i+1 ).map( (_, i) => i -1 == -1 ? 15 : i-1 )\n    let arrayOrder = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    arrayOrder = shuffleArray(arrayOrder)\n    \n    const tilePlacement = [\n        \"A1\", \"A2\", \"A3\", \"A4\",\n        \"B1\", \"B2\", \"B3\", \"B4\",\n        \"C1\", \"C2\", \"C3\", \"C4\",\n        \"D1\", \"D2\", \"D3\", \"D4\"\n    ]\n\n    var board : BoardLayout;\n    board = {}\n\n    for (var ind in tilePlacement){\n        var randInd = Math.floor(Math.random() * 6);\n        board[tilePlacement[ind]] = availableOptions[arrayOrder[ind]][randInd]\n    }\n\n    return board\n\n}\n\n\nexport interface BoardLayout  {\n    [key: string] : string\n}\n\nexport const intialWordGridBoardLayout = genNewBoard() as BoardLayout\n\nexport const wordGridBoardLayout = (\n    state: BoardLayout = intialWordGridBoardLayout,\n    action: ReduxAction\n): BoardLayout => {\n    switch(action.type){\n        case 'SET_GAME_DATA':\n            console.log(\"setting wordGrid answers\")\n            console.log(action.payload)\n            return action.payload\n        case 'SET_NEW_WORDGRID_BOARD':\n            return genNewBoard()\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridBoardLayout","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\n\n\nfunction genEmptySolverBoard(){\n\n    const tilePlacement = [\n        \"A1\", \"A2\", \"A3\", \"A4\",\n        \"B1\", \"B2\", \"B3\", \"B4\",\n        \"C1\", \"C2\", \"C3\", \"C4\",\n        \"D1\", \"D2\", \"D3\", \"D4\"\n    ]\n\n    var board : BoardSolverLayout;\n    board = {}\n\n    for (var ind in tilePlacement){\n        board[tilePlacement[ind]] = \"\"\n    }\n\n    console.log(\"empty board\")\n    console.log(board)\n\n    return board\n\n}\n\nexport interface BoardSolverLayout  {\n    [key: string] : string\n}\nexport const intialWordGridSolverBoardLayout = genEmptySolverBoard() as BoardSolverLayout\n\nexport const wordGridSolverLayout = (\n    state: BoardSolverLayout = intialWordGridSolverBoardLayout,\n    action: ReduxAction\n): BoardSolverLayout => {\n    switch(action.type){\n        case 'SET_WORD_GRID_SOLVER':\n            // console.log(\"setting wordGrid answers\")\n            // console.log(action.payload)\n            return action.payload\n        case 'CLEAR_WORD_GRID_SOLVER':\n            return genEmptySolverBoard()\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridSolverLayout","import { combineReducers } from 'redux';\nimport categoryList from \"./category-list\";\nimport wordGridEnteredWordList from './wordgrid';\nimport wordGridPlayerAnswers from './wordgrid-scoring';\nimport wordGridGameData from \"./wordgrid-game-data\";\nimport wordGridSolverLayout from \"./wordgrid-solver-data\";\n\n\nconst allReducers = combineReducers({\n    categoryList: categoryList,\n\n    wordGridEnteredWords: wordGridEnteredWordList,\n    wordGridPlayerAnswers: wordGridPlayerAnswers,\n    wordGridGameData: wordGridGameData,\n\n    wordGridSolverData: wordGridSolverLayout\n});\n\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport allReducers from './reducers'\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    allReducers\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}