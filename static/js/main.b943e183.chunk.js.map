{"version":3,"sources":["components/GameItem.tsx","gamedata.js","components/GamesList.tsx","components/Header.tsx","hooks/useLocalStorage.js","categories/categories.tsx","categories/CategoriesJoin.tsx","constants.tsx","context/socket2.js","categories/CategoriesWaiting.tsx","categories/CategoriesGame.tsx","categories/CategoriesScoring.tsx","pictureguess/Pictureguess.tsx","wordGrid/WordGridSetup.tsx","wordGrid/WordGridJoin.tsx","wordGrid/WordGridWaiting.tsx","actions/actions.ts","wordGrid/WordGridScoring.tsx","wordGrid/WordGridGame.tsx","wordGridSolver/wordGridSolver.tsx","App.tsx","reportWebVitals.ts","reducers/wordgrid.ts","reducers/wordgrid-scoring.ts","reducers/wordgrid-game-data.ts","reducers/wordgrid-solver-data.ts","reducers/index.ts","index.tsx"],"names":["BlogItem","blogData","to","id","className","name","style","fontSize","biline","allGames","GamesList","map","game","GameItem","url","Header","location","useLocation","pathname","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","categoriesReducer","state","action","type","list","filter","item","concat","answer","category","sampleCategories","Error","randomLetter","String","fromCharCode","Math","floor","random","CategoriesStart","gameLetter","setLetter","useReducer","categoryList","dispatchListData","userNameError","setUserNameError","categoryError","setCategoryError","history","useHistory","gameID","setGameID","userName","setUserName","setGameData","setPlayerData","gameSessionID","setGameSessionID","userID","setUserID","returning","setReturning","setPlayerList","onClick","newLetter","defaultValue","onChange","e","event","target","console","log","uuidv4","placeholder","newUserID","newGameSessionID","newGameID","toString","newReturning","handleUserNameChange","length","push","CategoriesJoin","props","gameIDPath","split","reverse","SOCKETURL","includes","window","hostname","socket","io","SocketContext","React","createContext","picturesocket","PictureSocketContext","wordGridsocket","wordGridSocketContext","wordGridSolversocket","wordGridSolverSocketContext","CategoriesWaiting","categoriesSocket","useContext","copySuccess","setCopySuccess","gameData","playerData","playerList","setJoined","handleJoinedRoom","useCallback","handleNewPlayer","data","handleStartGame","handleSendStart","emit","on","off","baseJoinLink","navigator","clipboard","writeText","focus","linkToClipboard","player","ind","gameLeader","reload","CategoriesGame","minutes","setMinutes","seconds","setSeconds","answers","setAnswers","stopBus","setBus","handleStopBus","handleTimerTick","handleForceEndGame","paddingBottom","newAnswers","numAnswers","ans","charAt","toLowerCase","handleChange","CategoriesScoring","categories","allAnswers","setAllAnswers","userScores","setUserScores","markedRows","setMarkedRows","handleAnswerTable","handleUpdateScore","handleMark","rowInd","colInd","rowId","handleStartNewGame","handleNewGameRequested","user","row","userScore","PictureGuess","pictureSocket","joinStatus","setJoinStatus","startButtonStatus","getGameID","playerStatus","currentWord","setCurGuess","currentPlayer","nextPlayer","width","height","handleGuessChange","WordGridSetup","onKeyPress","WordGridJoin","WordGridWaiting","wordGridSocket","dispatch","useDispatch","useSelector","s","wordGridGameData","payload","handleBootedPlayer","handleBootPlayer","bootPlayerID","gamesWon","totalPoints","WordGridScoring","counter","setCounter","newGame","useRef","newBoard","isInitialMount","allDictionaryAnswers","setAllDictionaryAnswers","highlightedCells","setHighlightedCells","current","dictionaryAnswers","highlightCells","path","deHighlightCells","borderRight","borderBottom","answerRow","playerScore","arrLengths","longestArrLen","max","rowList","i","forEach","cell","score","onMouseEnter","onMouseLeave","word","drawAnswers","tableLayout","A1","A2","A3","A4","B1","B2","B3","B4","C1","C2","C3","C4","D1","D2","D3","D4","definition","WordGridGame","newWord","setNewWord","errorStatus","setErrorStatus","errorStatusMessage","setErrorStatusMessage","enteredWords","wordGridEnteredWords","rotatePos","setRotatePos","enteredWordsRef","submitAnswers","wordList","addWord","guess","handleAnswerRes","renderGrid","curPos","autoComplete","val","videoConstraints","facingMode","WordGridSolver","wordGridSolverSocket","gridData","wordGridSolverData","webcamRef","imgSrc","setImgSrc","keepLooking","handleSearchBoundaries","capture","getScreenshot","audio","ref","screenshotFormat","alt","src","App","Provider","exact","component","Categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","intialEmptyWordsState","wordGridEnteredWordList","intialAllWordGridAnswers","wordGridPlayerAnswers","genNewBoard","availableOptions","x","arrayOrder","array","j","shuffleArray","board","tilePlacement","randInd","intialWordGridBoardLayout","wordGridBoardLayout","genEmptySolverBoard","intialWordGridSolverBoardLayout","wordGridSolverLayout","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b943e183.chunk.js","sourcesContent":["import {Link} from 'react-router-dom';\n\ntype blogData = {\n    id : string,\n    name : string,\n    url: string,\n    biline: string\n}\n\n\nfunction BlogItem(blogData: blogData) {\n    return (\n    <Link to={blogData.id}>\n      <div className=\"blog-item\">\n          \n              {blogData.name}\n              <p style={{fontSize:\"smaller\"}}>\n                  {blogData.biline}\n              </p>\n      </div>\n    </Link>\n    );\n  }\n  \n  export default BlogItem;","var allGames = [\n    {\n        \"id\" : \"categories\",\n        \"name\" : \"Categories\",\n        \"url\" : \"categories\",\n        \"biline\": \"A multiplayer game where you have to get an answer for each category that starts with the same letter.\"\n    },\n    {\n        \"id\": \"wordGrid\",\n        \"name\": \"Multiplayer word grid\",\n        \"url\": \"wordGrid\",\n        \"biline\": \"A multiplayer game where you have to find words in a grid.\"\n    },\n    {\n        \"id\": \"wordGridSolver\",\n        \"name\": \"Word grid solver\",\n        \"url\": \"word-grid-solver\",\n        \"biline\": \"Use your camera to solve real-world games of wordgrid!\"\n    },\n    {\n        \"id\" : \"picture-guess\",\n        \"name\" : \"Picture guess\",\n        \"url\" : \"picture-guess\",\n        \"biline\": \"A multiplayer game where other players have to guess what you are trying to draw!\"\n    },\n    \n]\n\nexport default allGames;","import GameItem from \"./GameItem\";\nimport allGames from \"../gamedata\";\n\ntype game = {\n    id : string,\n    name : string,\n    biline: string,\n    url: string\n}\n\nfunction GamesList() {\n    return <div className=\"blog-list\">\n        <div className=\"about-message\">\n          <p>Click an option below to start a game!</p>\n        </div>\n        { \n            allGames.map(\n                (game: game) => {\n                    return <GameItem id={game.id} name={game.name} biline={game.biline} url={game.url} />\n                }\n            )\n        }\n\n      </div>\n    \n  }\n  \n  export default GamesList;","import {Link, useLocation} from 'react-router-dom';\n\n\nfunction Header() {\n    const location = useLocation()\n\n    return (\n      <div className=\"header\">\n        <Link className=\"header-item\" to=\"/\">Tom Davenport</Link>\n        {\n            location.pathname === \"/\" ? <></> : <Link className=\"header-item\" to=\"/\">Return to game list</Link>\n        }\n      </div>\n    );\n  }\n  \n  export default Header;","  \nimport { useEffect, useState } from 'react'\n\nconst PREFIX = 'categories-game-'\n\nexport default function useLocalStorage(key, initialValue) {\n  const prefixedKey = PREFIX + key\n  const [value, setValue] = useState(() => {\n    const jsonValue = localStorage.getItem(prefixedKey)\n    if (jsonValue === \"undefined\") return \"\"\n    if (jsonValue != null) return JSON.parse(jsonValue)\n    if (typeof initialValue === 'function') {\n      return initialValue()\n    } else {\n      return initialValue\n    }\n  })\n\n  useEffect(() => {\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\n  }, [prefixedKey, value])\n\n  return [value, setValue]\n}","import {useState, useReducer, useEffect} from 'react';\nimport { useHistory} from 'react-router-dom';\nimport Category from \"../models\";\nimport sampleCategories from \"./sampleCategories.json\";\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\n\nconst categoriesReducer = (state:any, action:any) => {\n    switch (action.type) {\n        case 'REMOVE_ITEM':\n            return ({\n            ...state,\n            list : state.list.filter((item:Category) => item.key !== action.key)\n            })\n        case 'ADD_ITEM':\n            return ({\n                ...state,\n                list : state.list.concat({name: action.name, key: action.key, answer: \"\"})\n            })\n        case 'UPDATE_ITEM':\n            return ({\n                ...state,\n                list : state.list.map(\n                    (category: Category) => {\n                        if (action.key === category.key){\n                            const updatedItem = {\n                                ...category,\n                                name : action.name\n                            };\n                            return updatedItem\n                        }else{\n                            return category\n                        }\n                    }\n                )\n            })\n        case 'RESET_LIST':\n            return ({\n                ...state,\n                list : sampleCategories\n            })\n      default:\n        throw new Error();\n    }\n};\n\nfunction randomLetter(){\n    return String.fromCharCode(65+Math.floor(Math.random() * 26))\n}\n\n\nfunction CategoriesStart() {\n\n    // random letter\n    const [gameLetter, setLetter] = useState(randomLetter())\n    const [categoryList, dispatchListData] =  useReducer(categoriesReducer, {\n        list: sampleCategories\n    });\n    const [userNameError, setUserNameError] = useState(false)\n    const [categoryError, setCategoryError] = useState(false)\n    \n    const history = useHistory();\n    // const ws = useContext(WebSocketContext);\n\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\n    let [userName, setUserName] = useLocalStorage('userName', '')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage('gameData', {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\n    let [userID, setUserID] = useLocalStorage('userID', '')\n    let [returning, setReturning] = useLocalStorage('returning', false)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\n\n    useEffect(() => {\n        return setGameData({\n            \"categories\" : categoryList.list,\n            \"gameLetter\" : gameLetter\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoryList]);\n\n\n    function newLetter(){\n        \n        let newLetter = randomLetter()\n        \n        setLetter(newLetter)\n        \n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : newLetter\n            }\n        )\n    }\n\n    // category list\n    \n\n    function handleChange(event : any){\n        \n        dispatchListData({\"type\" : \"UPDATE_ITEM\", key: event.target.id, name : event.target.value })\n        \n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    \n    }\n  \n    function handleRemove(key : string){\n        dispatchListData({type:\"REMOVE_ITEM\", \"key\" : key })\n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    }\n\n    function handleAdd(){\n        console.log(\"clicked handle\")\n        dispatchListData({type:\"ADD_ITEM\", key: uuidv4()})\n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    }\n\n    function handleReset(){\n        console.log(\"clicked reset\")\n        dispatchListData({type:\"RESET_LIST\"})\n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n    }\n\n    // user\n    \n    function handleUserNameChange(event:any){\n        \n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\n        var newReturning = returning ? returning : false\n\n        setGameID(newGameID)\n        setGameSessionID(newGameSessionID)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        setPlayerList([{\n            userID,\n            userName : event.target.value,\n            \"gameLeader\" : true\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value,\n            \"gameLeader\" : true\n        }\n        )\n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n\n    }\n\n    // submit form\n\n    function startGame(event:any){\n\n        setGameData(\n            {\n                \"categories\" : categoryList.list,\n                \"gameLetter\" : gameLetter\n            }\n        )\n\n        // check that the player has at least one category\n        setCategoryError(categoryList.list.length === 0) \n        setUserNameError(!userName)\n\n        // check that the player has added a username\n        if ((categoryList.list.length === 0) || (!userName)){\n            return\n        }\n        else {\n            history.push(\n                {\n                    \"pathname\" : '/categories-waiting-room',\n                }\n            )\n\n        }\n\n    }\n\n    return (\n    <div className=\"project\">\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\n        \n        <p className=\"explainer\">\n            As the game leader, it's up to you to set the game up!\n        </p>\n        \n        <p>Letter to guess: </p>\n        <span className=\"gameLetter\" id=\"gameLetter\">{gameLetter}</span>\n        <button \n            id=\"newLetter\"\n            onClick={()=>{newLetter()}}\n            style={{\n                \"marginLeft\": \"20px\"\n            }}\n        >\n            New letter\n        </button>\n\n        <p>1. (Optional) Change or add more categories:</p>\n        <p className=\"explainer\">Click a category to change the name, or the button to remove it. </p>\n        { \n            categoryList.list.map(\n                (category: Category) => {\n                    return (\n                    <div className=\"category\">\n                        <input\n                            type=\"text\" \n                            id={category.key} \n                            defaultValue={category.name}\n                            onChange={(e)=>handleChange(e)}\n                        />\n                        <button onClick={()=>handleRemove(category.key)}>\n                            Remove\n                        </button>\n                    </div>\n                    )\n                }\n            )\n        }\n\n        <button\n            type=\"button\"\n            onClick={() =>handleAdd()}\n            style={{\n                \"marginRight\": \"5px\"\n            }}\n        >\n            Add category\n        </button>\n\n        <button\n            type=\"button\"\n            onClick={() =>handleReset()}\n        >\n            Reset to default\n        </button>\n\n        <p className={ categoryError ? \"showError\" : \"hideError\" }>Please have at least one category before continuing.</p>\n        <p>2. Enter your user name:</p>\n        \n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName}\n            style={{\n                \"paddingRight\": \"5px\"\n            }}\n        />\n\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\n        <p>3. Click start game:</p>\n\n        <button \n            className=\"start-game\" \n            onClick={(e)=>{startGame(e)}}\n            style={{\n                \"marginBottom\": \"20px\"\n            }}\n        >\n            Start Game\n        </button>\n    </div>\n  );\n}\n\nexport default CategoriesStart;","\nimport {useState,} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\n\nfunction CategoriesJoin(props:any) {\n\n    const history = useHistory();\n    \n    const [userNameError, setUserNameError] = useState(false)\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\n    \n    function handleUserNameChange(event:any){\n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newReturning = returning ? returning : false\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\n\n        setGameID(gameIDPath)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        \n        setPlayerList([{\n            userID,\n            userName:event.target.value\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value\n        }\n        )\n    }\n\n    \n\n    function joinGameRoom(){\n        setUserNameError(!userName)\n        // check that the player has added a username\n        if (!userName){\n            return\n        }\n        \n        history.push(\n            {\n                \"pathname\" : '/categories-waiting-room'\n            }\n        )\n\n        \n    }\n    \n    return (\n    <div className=\"project\">\n        <h1>Join game</h1>\n\n        <p>Enter a username:</p>\n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName} \n        />\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\n        <br/>\n        <button onClick={()=>joinGameRoom()}>Join game</button>\n        \n    </div>\n  );\n}\n\nexport default CategoriesJoin;","export const SOCKETURL = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:8000/\" : \"https://tom-games.azurewebsites.net/\"","import {io} from \"socket.io-client\";\nimport React from 'react';\nimport { SOCKETURL } from '../constants'\n\n// console.log(SOCKETURL + 'categories')\n// export const socket = io( 'https://tom-games.azurewebsites.net/categories');\nexport const socket = io( SOCKETURL + 'categories')\nexport const SocketContext = React.createContext(socket);\n\nexport const picturesocket = io(SOCKETURL + \"picture-guess\")\nexport const PictureSocketContext = React.createContext(picturesocket)\n\nexport const wordGridsocket = io(SOCKETURL + \"wordGrid\")\nexport const wordGridSocketContext = React.createContext(wordGridsocket)\n\nexport const wordGridSolversocket = io(SOCKETURL + \"wordGridSolver\")\nexport const wordGridSolverSocketContext = React.createContext(wordGridSolversocket)","\nimport {useState, useContext, useEffect, useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {SocketContext}  from '../context/socket2'\n\ntype Player = {\n    userName : string,\n    userID : string,\n    gameLeader? : boolean\n}\n\n\nfunction CategoriesWaiting(props:any) {\n    \n    const categoriesSocket = useContext(SocketContext)\n    const [copySuccess, setCopySuccess] = useState('');\n    const history = useHistory();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    let [gameData, setGameData] = useLocalStorage('gameData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [joined, setJoined] = useState(false);\n\n    const handleJoinedRoom = useCallback(()=>{\n        setJoined(true)\n        console.log(true)\n    }, [])\n\n    const handleNewPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        setGameData(data[\"gameData\"])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleStartGame = useCallback((data:any)=>{\n        history.push(\n            {\n                \"pathname\" : '/categories-game-room'\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleSendStart = useCallback(()=>{\n        console.log(\"START!\")\n        categoriesSocket.emit(\"send-start\", {gameID})\n        categoriesSocket.emit(\"start-timer\", {gameID})\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n        \n        categoriesSocket.on('connect',\n            () => {\n                console.log(\"connected categories\")\n            }\n        );\n\n        if (gameID){\n            console.log(\"joining room\")\n\n            categoriesSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n        }\n\n        categoriesSocket.on(\"joined-room\", handleJoinedRoom)\n        categoriesSocket.on(\"new-player\",handleNewPlayer);\n        categoriesSocket.on(\"start-game\", handleStartGame)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            categoriesSocket.off(\"joined-room\", handleJoinedRoom);\n            categoriesSocket.off(\"new-player\", handleNewPlayer);\n            categoriesSocket.off(\"start-game\", handleStartGame);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoriesSocket, handleJoinedRoom, handleNewPlayer, handleStartGame])\n    \n\n    // direct link \n    function linkToClipboard(e:any){\n        \n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\n\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/join-categories/${gameID}`)\n        // This is just personal preference.\n        // I prefer to not show the whole text area selected.\n        e.target.focus();\n        setCopySuccess('Copied!');\n    }\n\n\n    function refreshPage(){\n        window.location.reload()\n    }\n    \n    return (\n    <div className=\"project\">\n        <h1>Categories</h1>\n        <h4>Waiting room</h4>\n\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\n        \n        <p>Your game id is: <span className=\"gameID\">{gameID}</span></p>\n        <button onClick={(e)=>{linkToClipboard(e)}}>Click to copy direct link</button>\n        <p>{copySuccess}</p>\n\n        <p>Current players:</p>\n        <table>\n        <thead>\n        </thead>\n        <tbody>\n            {\n                playerList.map(\n                        (player: Player, ind: number ) => {\n                            return (\n                            <tr key={player.userID}>\n                                <td>\n                                    {ind + 1}.\n                                </td>\n                                <td>\n                                    {player.userName}\n                                </td>\n                                <td>\n                                    {player.gameLeader ?  \" (Game leader)\" : \"\" }\n                                </td>\n                            </tr>\n                            )\n                        }\n                    )\n            }\n        </tbody>\n        </table>\n        { \n            playerList.length === 0 ? <> Can't see any other players? <button onClick={()=>{refreshPage()}}>Refresh</button>  </>: <></> \n        }\n        { playerData.gameLeader && <div> \n        <p>3. Click start game:</p>\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\n        </div>\n        }\n\n    </div>\n  );\n}\n\nexport default CategoriesWaiting;","import {useState, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport Category from \"../models\";\nimport {SocketContext}  from '../context/socket2'\n\n\ntype Answers = [\n    {\n        key : string,\n        name: string,\n        answer? :string\n    }\n]\n\nfunction CategoriesGame(props:any) {\n\n    \n    const history = useHistory();\n    const categoriesSocket = useContext(SocketContext);\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userName, setUserName] = useLocalStorage('userName')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage('gameData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userID, setUserID] = useLocalStorage('userID')\n\n    let [minutes, setMinutes] = useState(\"\")\n    let [seconds, setSeconds] = useState(\"\")\n    \n    let [answers, setAnswers] = useState(gameData[\"categories\"])\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameLetter, setGameLetter] = useState(gameData[\"gameLetter\"])\n    let [stopBus, setBus] = useState(false)\n\n\n    const handleChange = (e:any) =>{\n\n        let newAnswers: Answers[] =[]\n        let numAnswers = 0\n        \n        newAnswers = answers.map( (ans:any) =>{\n            if (e.target.id === ans.key){\n                ans[\"answer\"] = e.target.value\n                \n                numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\n            }else{\n                if (ans[\"answer\"]){\n\n                    numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\n                }\n            }\n            return ans\n        })\n\n        if (numAnswers === answers.length){\n            setBus(true)\n        }else{\n            setBus(false)\n        }\n        setAnswers(newAnswers)\n    }\n\n\n    const handleStopBus = useCallback(()=>{\n        console.log(\" handle send answers\")\n        setBus(true)\n        categoriesSocket.emit(\"send-answers\", {\n            gameID,\n            userID,\n            userName,\n            answers,\n            \"stopBus\" : true\n        })\n        history.push(\n            {\n                \"pathname\" : '/categories-scoring',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleTimerTick = useCallback((data: any)=>{\n        \n        setMinutes(data[\"minutes\"])\n        setSeconds(data[\"seconds\"])\n        \n        if ( data[\"minutes\"] === 0 && data[\"seconds\"] === 0 ){\n            handleForceEndGame()\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleForceEndGame = useCallback(()=>{\n        \n        categoriesSocket.emit(\"send-answers\", {\n            gameID,\n            userID,\n            userName,\n            answers,\n            stopBus : false\n        })\n        history.push(\n            {\n                \"pathname\" : '/categories-scoring',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    \n    useEffect( ()=>{\n\n        categoriesSocket.on(\"send-answers\", handleForceEndGame);\n        categoriesSocket.on(\"timer-tick\", handleTimerTick);\n        categoriesSocket.on(\"end-game\", handleForceEndGame)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            categoriesSocket.off(\"send-answers\", handleForceEndGame);\n            categoriesSocket.off(\"timer-tick\", handleTimerTick);\n            categoriesSocket.off(\"end-game\", handleForceEndGame)\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoriesSocket, handleForceEndGame, handleTimerTick])\n\n    return (\n    <div className=\"project\">\n        <h1>Let's play</h1>        \n        <p>Time left: {minutes ? minutes.toString() + \" minute\" : \"\" } { seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\n        <p>Enter something for each category that starts with:</p>\n        <p><span className=\"gameLetter\" style={{fontSize: \"55px\"}}>{gameLetter}</span></p>\n\n        <table style={{paddingBottom: \"20px\"}}>\n        <tr>\n            <th>Category</th>\n            <th>Answer</th>\n            <th>{/* Error */}</th>\n        </tr>\n        {answers.map(\n                (category: Category) => {\n                    return (\n                    <tr>\n                        <td>{category.name}</td>\n                        <td>\n                            <input\n                                type=\"text\" \n                                id={category.key} \n                                defaultValue={ category[\"answer\"] ? category[\"answer\"] : '' }\n                                onChange={(e)=>handleChange(e)}\n                            />\n                        </td>\n                        <td>\n                            <p className={ category[\"answer\"] && category[\"answer\"].charAt(0).toLowerCase() !== gameLetter.toLowerCase() ? \"showError\" : \"hideError\" }>Category has to start with {gameLetter}!</p>\n                        </td>\n                    </tr>\n                    )\n                }\n            )\n        }\n        <tr>\n            <td>\n            </td>\n            <td>\n            { stopBus ? <button id=\"stop\" onClick={()=>handleStopBus()}>Stop!</button> : <></>}\n            </td>\n            <td>\n            </td>\n        </tr>\n        </table>\n\n        \n    </div>\n  );\n}\n\nexport default CategoriesGame;","import {useState, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {SocketContext}  from '../context/socket2'\n\n\n\ntype AnswerList = [\n    gameID : string,\n    gameSessionID : string,\n    userID : string,\n    userName : string,\n    answers : Answers[]\n]\n\ntype Answers = [\n    {\n        key : string,\n        name: string,\n        answer? :string\n    }\n]\n\n\nfunction CategoriesScoring(props:any) {\n\n    \n    const history = useHistory();\n    const categoriesSocket = useContext(SocketContext);\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage('gameData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    let [returning, setReturning] = useLocalStorage('returning')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [categories, setCategories] = useState(gameData[\"categories\"])\n    let [allAnswers , setAllAnswers] = useState<AnswerList[]>([]); //useState([])\n    \n    let [userScores, setUserScores] = useState<any[]>([]); \n    let [markedRows, setMarkedRows] = useState<string[]>([]); \n\n    const handleAnswerTable = useCallback( (data:any) => {\n        setAllAnswers(data)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleUpdateScore = useCallback((data:any)=>{\n        setMarkedRows(data[\"rowIds\"])\n        setUserScores(data[\"userScores\"])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleMark = useCallback((rowInd : number, colInd: number, rowId : string)=>{\n        categoriesSocket.emit(\"mark-answer\", {\n            gameID,\n            rowId,\n            colInd,\n            rowInd\n        })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleStartNewGame = useCallback( () => {\n        // so the game leader can make any updates they want\n        categoriesSocket.emit(\"request-new-game\", {\n            gameID\n        })\n        console.log(returning)\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        returning = setReturning(true)\n        history.push(\n            {\n                \"pathname\" : '/categories',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const handleNewGameRequested = useCallback( ()=> {\n        // to return players to the waiting room\n\n        setReturning(true)\n\n        history.push(\n            {\n                \"pathname\" : \"/categories-waiting-room\"\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n\n        console.log(allAnswers)\n        \n        if (allAnswers.length === 0){\n            console.log(\"doing this once\")\n            categoriesSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n            categoriesSocket.emit(\"get-all-answers\", {\n                gameID\n            })\n        }\n        \n        categoriesSocket.on(\"get-answers\", handleAnswerTable);\n        categoriesSocket.on(\"update-scores\", handleUpdateScore);\n        categoriesSocket.on(\"start-new-game\", handleNewGameRequested);\n\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            categoriesSocket.off(\"get-answers\", handleAnswerTable);\n            categoriesSocket.off(\"update-scores\", handleUpdateScore);\n            categoriesSocket.off(\"start-new-game\", handleNewGameRequested);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [categoriesSocket, handleAnswerTable, handleUpdateScore, handleNewGameRequested])\n\n\n    useEffect(() => {\n        console.log(allAnswers)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [allAnswers])\n\n    \n    return (\n    <div className=\"project\">\n        <h1>Time to score!</h1>        \n        <p>The game leader will now mark the answers:</p>\n        <table>\n            <thead>\n                <th>\n                    Category\n                </th>\n                {\n                    allAnswers.map( (user:any) => {\n                        return (\n                        <th>\n                            { user[\"userName\"] ? user[\"userName\"] : 0 }\n                        </th>\n                        )\n                    } )\n                }\n            </thead>\n            <tbody>\n                {\n                    categories.map( (row: any, rowInd: any) => {\n                        return (\n                        <tr>\n                            <td>\n                                { row[\"name\"] }\n                            </td>\n                            { \n                              allAnswers.map( (user:any, colInd) => {\n                                  return (\n                                      <td \n                                        id={ `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}` }\n                                        onClick={ () => {\n                                            // console.log(\"clicked\")\n                                            // console.log(playerData)\n                                            if (playerData[\"gameLeader\"]) {\n                                                // console.log(\"clickedHandler\")\n                                                handleMark(colInd, rowInd, `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}`)\n                                            }\n                                        }\n                                        }\n                                        className={  markedRows.includes('rowIndIS' + rowInd.toString() + 'ANDcolIndIS' + colInd.toString() ) ? \"accepted\" : \"\" }\n                                      >\n                                          { user[\"answers\"][rowInd][\"answer\"] }\n                                      </td>\n                                  )\n                              } )\n                            }\n                        </tr>\n                        )\n                    } )\n                }\n            </tbody>\n            <tfoot>\n                <tr>\n                    <th>\n                        Score\n                    </th>\n                    {\n                        allAnswers.map( (user:any, ind: any) => {\n                            return (\n                            <th>\n                                { \n                                    // eslint-disable-next-line array-callback-return\n                                    userScores.map((userScore:any)=>{\n                                        if (userScore[\"userID\"] === user[\"userID\"]){\n                                            return userScore[\"score\"]\n                                        }\n                                    })\n                                }\n                            </th>\n                            )\n                        } )\n                    }\n                </tr>\n            </tfoot>\n        </table>\n        \n        \n        { playerData[\"gameLeader\"] ? <div>\n                <p>Play again?</p>\n                <button onClick={()=>{\n                    handleStartNewGame()\n                }}>New game</button>\n            </div> : <></>\n        }\n\n        \n    </div>\n  );\n}\n\nexport default CategoriesScoring;","import {useState, useContext, useEffect, useCallback} from 'react';\nimport {PictureSocketContext}  from '../context/socket2'\nimport { v4 as uuidv4 } from 'uuid';\n\n\nfunction PictureGuess(props:any) {\n    // context stuff\n    const pictureSocket = useContext(PictureSocketContext)\n    \n    // class handlers\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [copySuccess, setCopySuccess] = useState('');\n    let [joinStatus, setJoinStatus] = useState('');\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [startButtonStatus, setStartButtonStatus] = useState('')\n\n    // user data\n    let [userName, setUserName] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userID, setUserID] = useState(uuidv4())\n\n    // game data in general\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useState(getGameID())\n    let [playerData, setPlayerData] = useState({})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerStatus, setPlayerStatus] = useState('')\n    let [playerList, setPlayerList] = useState([])\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useState({})\n    \n    //current game\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [currentWord, setCurrentWord] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [curGuess, setCurGuess] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [currentPlayer, setCurrentPlayer] = useState('')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [nextPlayer, setNextPlayer] = useState('')\n\n\n    function getGameID(){\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\n        if (!gameIDPath){\n            let newGameID =  (Math.floor(Math.random() * 1000000) + 100000).toString()\n            return newGameID\n        }else{\n            return gameIDPath\n        }\n    }\n\n    useEffect( () => {\n        setUserName(userName)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [userName])\n\n\n    const handleJoinedRoom = useCallback(()=>{\n        setJoinStatus('hideJoin')\n        console.log(true)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleNewPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        setGameData(data[\"gameData\"])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    // const handleStartGame = useCallback((data:any)=>{\n    //     history.push(\n    //         {\n    //             \"pathname\" : '/categories-game-room'\n    //         }\n    //     )\n    // }, [])\n\n    // const handleSendStart = useCallback(()=>{\n    //     console.log(\"START!\")\n    //     pictureSocket.emit(\"send-start\", {gameID})\n    //     pictureSocket.emit(\"start-timer\", {gameID})\n    // }, [])\n\n    useEffect( ()=>{\n        \n        pictureSocket.on('connect',\n            () => {\n                console.log(\"connected picture-guess\")\n            }\n        );\n\n        pictureSocket.on(\"joined-room\", handleJoinedRoom)\n        pictureSocket.on(\"new-player\",handleNewPlayer);\n        // pictureSocket.on(\"start-game\", handleStartGame)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            pictureSocket.off(\"joined-room\", handleJoinedRoom);\n            pictureSocket.off(\"new-player\", handleNewPlayer);\n            // pictureSocket.off(\"start-game\", handleStartGame);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [pictureSocket])//, handleJoinedRoom, handleNewPlayer, handleStartGame])\n    \n\n\n    // direct link \n    function linkToClipboard(e:any){\n        \n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\n\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/picture-guess/${gameID}`)\n        // This is just personal preference.\n        // I prefer to not show the whole text area selected.\n        e.target.focus();\n        setCopySuccess('Copied!');\n    }\n\n    function makeGuess(){\n        \n    }\n\n    function handleGuessChange(e:any){\n        setCurGuess(e.target.value)\n    }\n\n    function handleUserNameChange(e:any){\n        setUserName(e.target.value)\n        setPlayerData(\n            {\n                userID,\n                userName\n            }\n        )\n    }\n\n    function handleJoinGame(){\n        // console.log(gameID)\n        // console.log(userID)\n        // console.log(userName)\n        // console.log(playerData)\n        if (gameID && userID && userName){\n            console.log(\"joining room\")\n\n            pictureSocket.emit(\"join\", {\n                gameID,\n                playerData,\n            })\n        }\n    }\n\n    function newWord(){\n        return \n    }\n\n\n\n    \n    return (\n    <div className=\"project\">\n        <h1>Picture guess</h1>\n        \n        <div className=\"pictureGuess\">\n        \n            <div className=\"leftBar\">\n\n                <div className=\"pictureTimer\">\n                    <p>Timer</p>\n                    <button className={startButtonStatus}>Start</button>\n                </div>\n\n                <div className=\"wordData\">\n                    <p>word to guess: {currentWord}</p>\n                    <p>Too hard?<button onClick={newWord}>New word</button></p>\n                </div>\n                <div className=\"currentTurn\">\n                    <p>Who's turn:</p>\n                    {currentPlayer}\n                    <p>Next:</p>\n                    {nextPlayer}\n                    <p>You are: {playerStatus}</p>\n                </div>\n\n            </div>\n\n            <div className=\"drawingPanel\">\n                <canvas id=\"drawingCanvas\" width=\"500\" height=\"400\">\n\n                </canvas>\n            </div>\n            \n            <div className=\"rightBar\">\n                <div className=\"currentPlayers\">\n                    <p>Game ID: {gameID} <br></br><button onClick={linkToClipboard}>copy share link</button></p>\n                    <p className={joinStatus}><input onChange={(e)=>{handleUserNameChange(e)}} placeholder=\"join game\"></input> <button onClick={handleJoinGame}>Join</button></p>\n                    <p>List of players</p>\n                    <ol>\n                        {\n                            playerList.map( (player)=>{\n                                return (\n                                    <li>{player[\"userName\"]}</li>\n                                )\n                            })\n                        }\n                    </ol>\n                </div>\n                <div className=\"guesses\">\n                    <p>Guess list</p>\n                    <input id=\"guessID\" onChange={(e)=>{handleGuessChange(e)}}></input> <button onClick={makeGuess}>Make guess</button>\n                </div>\n            \n            </div>\n        \n        </div>\n\n    </div>\n  );\n}\n\nexport default PictureGuess;","import {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\n\n\n\n\nfunction WordGridSetup() {\n\n    // random letter\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [userNameError, setUserNameError] = useState(false)\n    \n    const history = useHistory();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\n\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\n    let [userName, setUserName] = useLocalStorage('userName', '')\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\n    let [userID, setUserID] = useLocalStorage('userID', '')\n    let [returning, setReturning] = useLocalStorage('returning', false)\n    \n\n    useEffect(()=>{\n        // reset any local storage stuff to defaults\n        setGameID(\"\")\n        setUserName(\"\")\n        // setGameData({})\n        setPlayerData({})\n        setGameSessionID(\"\")\n        setUserID(\"\")\n        setReturning(false)\n        setPlayerList([])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    function handleUserNameChange(event:any){\n        \n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\n        var newReturning = returning ? returning : false\n\n        setGameID(newGameID)\n        setGameSessionID(newGameSessionID)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        setPlayerList([{\n            userID,\n            userName : event.target.value,\n            \"gameLeader\" : true\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value,\n            \"gameLeader\" : true\n        }\n        )\n\n    }\n    const handleKeyPress = (e:any) => {\n        if (e.key === \"Enter\"){\n            handleUserNameChange(e)\n        }\n    }\n\n    function startGame(event:any){\n        \n        \n            // check that the player has at least one category\n        setUserNameError(!userName)\n\n        // check that the player has added a username\n        if (!userName){\n            return\n        }\n        else {\n            history.push(\n                {\n                    \"pathname\" : '/wordGrid-waiting-room',\n                }\n            )\n\n        }\n\n    }\n\n    return (\n    <div className=\"project\">\n        <p>A multiplayer game - find words in the grid:</p>\n        <ol>\n            <li>The word has to be made up of letters that are next to each other.</li>\n            <li>In each word, a letter on the board can only be used once.</li>\n        </ol>\n        <p>User name</p>\n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName}\n            onKeyPress={handleKeyPress}\n        />\n        <button className=\"start-game\" onClick={(e)=>{startGame(e)}}>Start Game</button>\n\n    </div>\n  );\n}\n\nexport default WordGridSetup;","import {useState, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\n\n\nfunction WordGridJoin(props:any) {\n\n    const history = useHistory();\n    \n    const [userNameError, setUserNameError] = useState(false)\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameData, setGameData] = useLocalStorage(\"gameData\", {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage(\"gameSessionID\", \"\")\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\n    \n    useEffect(()=>{\n        // reset any local storage stuff to defaults\n        setGameID(\"\")\n        setUserName(\"\")\n        setGameData({})\n        setPlayerData({})\n        setGameSessionID(\"\")\n        setUserID(\"\")\n        setReturning(false)\n        setPlayerList([])\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    function handleUserNameChange(event:any){\n        setUserName(event.target.value)\n        \n        var newUserID = userID ? userID : uuidv4()\n        var newReturning = returning ? returning : false\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\n\n        setGameID(gameIDPath)\n        setReturning(newReturning)\n        setUserID(newUserID)\n        \n        setPlayerList([{\n            userID,\n            userName:event.target.value\n        }])\n\n        setPlayerData({\n            userID,\n            userName: event.target.value\n        }\n        )\n    }\n\n    function joinGameRoom(){\n        setUserNameError(!userName)\n        // check that the player has added a username\n        if (!userName){\n            return\n        }\n        \n        history.push(\n            {\n                \"pathname\" : '/wordGrid-waiting-room'\n            }\n        )\n    }\n    \n    return (\n    <div className=\"project\">\n        <h1>Join game</h1>\n\n        <p>Enter a username:</p>\n        <input \n            type=\"text\" \n            id=\"username\" \n            placeholder=\"Add username\" \n            onChange={(e)=>{handleUserNameChange(e)}} \n            value={userName} \n        />\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\n        <br/>\n        <button onClick={()=>joinGameRoom()}>Join game</button>\n        \n    </div>\n  );\n}\n\nexport default WordGridJoin;","\nimport {useState, useContext, useEffect, useCallback} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {wordGridSocketContext}  from '../context/socket2'\nimport {clearWordGridEnteredWords} from \"../actions/actions\"\nimport {useSelector, useDispatch} from \"react-redux\";\nimport {setWordGridGameData} from \"../actions/actions\";\n\ntype Player = {\n    userName : string,\n    userID : string,\n    gameLeader? : boolean,\n    gamesWon?: number,\n    totalPoints?: number\n}\n\nfunction WordGridWaiting(props:any) {\n    \n    const wordGridSocket = useContext(wordGridSocketContext)\n    const [copySuccess, setCopySuccess] = useState('');\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [joined, setJoined] = useState(false);\n    \n    let gameData = useSelector((s:any) => s.wordGridGameData)\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\n\n    // TODO: dump this so the build process works\n\n    const handleJoinedRoom = useCallback(()=>{\n        setJoined(true)\n    }, [])\n\n    const handleNewPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        dispatch(setWordGridGameData(data[\"gameData\"]))\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleStartGame = useCallback((data:any)=>{\n        history.push(\n            {\n                \"pathname\" : '/wordGrid-game-room'\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleSendStart = useCallback(()=>{\n        console.log(\"START!\")\n        wordGridSocket.emit(\"send-start\", {gameID})\n        wordGridSocket.emit(\"start-timer\", {gameID})\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleBootedPlayer = useCallback( (data:any) =>{\n        setPlayerList(data['playerList'])\n        if (playerData[\"userID\"] === data[\"bootPlayerID\"]){\n            history.push(\n                {\n                    \"pathname\" : '/wordGrid'\n                }\n            )\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n        \n        wordGridSocket.on('connect',\n            () => {\n                console.log(\"connected wordGrid\")\n            }\n        );\n\n        if (gameID){\n            console.log(\"joining room\")\n\n            wordGridSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n        }\n\n        wordGridSocket.on(\"joined-room\", handleJoinedRoom)\n        wordGridSocket.on(\"new-player\",handleNewPlayer);\n        wordGridSocket.on(\"start-game\", handleStartGame)\n        wordGridSocket.on(\"booted-player\", handleBootedPlayer)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSocket.off(\"joined-room\", handleJoinedRoom);\n            wordGridSocket.off(\"new-player\", handleNewPlayer);\n            wordGridSocket.off(\"start-game\", handleStartGame);\n            wordGridSocket.off(\"booted-player\", handleBootedPlayer)\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSocket, handleJoinedRoom, handleNewPlayer, handleStartGame, handleBootedPlayer])\n    \n\n    // direct link \n    function linkToClipboard(e:any){\n        \n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\n\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/join-wordGrid/${gameID}`)\n        // This is just personal preference.\n        // I prefer to not show the whole text area selected.\n        e.target.focus();\n        setCopySuccess('Copied!');\n    }\n\n\n    function refreshPage(){\n        window.location.reload()\n    }\n\n    // console.log(\"words pre clearing\")\n    // console.log(enteredWords)\n    dispatch(clearWordGridEnteredWords())\n    // console.log(enteredWords)\n    // console.log(\"words post clearing\")\n    \n    const handleBootPlayer = useCallback((bootPlayerID: string)=>{\n        console.log(\"START!\")\n        wordGridSocket.emit(\"boot-player\", {\n            gameID,\n            bootPlayerID\n        }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    return (\n    <div className=\"project\">\n        <h1>WordGrid</h1>\n        <h4>Waiting room</h4>\n\n        <p>Rules</p>\n        <ol>\n            <li>The word has to be made up of letters that are next to each other.</li>\n            <li>In each word, a letter on the board can only be used once.</li>\n            <li>Words must be at least 4 letters long.</li>\n        </ol>\n\n        <p>Your game id is: <span className=\"gameID\">{gameID}</span></p>\n        <button onClick={(e)=>{linkToClipboard(e)}}>Click to copy direct link</button>\n        <p>{copySuccess}</p>\n\n        <p>Current players:</p>\n        <table className=\"wordGridTable\" style={{\"borderCollapse\": \"collapse\"}}>\n        <thead>\n            <tr>\n                <th>\n                    Player\n                </th>\n                <th> Games won </th>\n                <th> Total points </th>\n            </tr>\n        </thead>\n        <tbody>\n            {\n                playerList.map(\n                        (player: Player, ind: number ) => {\n                            return (\n                            <tr key={player.userID}>\n                                <td>\n                                    {player.userName}\n                                    {player.gameLeader ?  \" (Game leader)\" : \"\" }\n                                    <br/>\n                                    {\n                                        \n                                        playerData.gameLeader ? \n                                            player.gameLeader ? <></> : <button onClick={()=> handleBootPlayer(player.userID)}>Boot</button>\n                                        : \"\"\n                                    \n                                    }\n                                </td>\n                                \n                                    {\n                                    player.gamesWon ?\n                                    <td>\n                                        {player.gamesWon} \n                                    </td>: <td>0</td>\n                                    }\n                                    {\n                                    player.totalPoints ?\n                                    <td>\n                                        {player.totalPoints}\n                                    </td> : <td>0</td>\n                                    }\n                            </tr>\n                            )\n                        }\n                    )\n            }\n        </tbody>\n        </table>\n        { \n            playerList.length === 0 ? <> Can't see any other players? <button onClick={()=>{refreshPage()}}>Refresh</button>  </>: <></> \n        }\n        { playerData.gameLeader && <div> \n        <p>Ready?</p>\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\n        </div>\n        }\n\n    </div>\n  );\n}\n\nexport default WordGridWaiting;","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\n// wordgrid\n\nexport const addWordGridWord = (payload: any): ReduxAction => ({\n    type: \"ADD_WORD_WORDGRID\",\n    payload: payload.word\n})\n\nexport const clearWordGridEnteredWords = (): ReduxAction => ({\n    type: \"CLEAR_WORDGRID_ENTERED_WORDS\",\n})\n\nexport const setWordGridGameData = (payload:any): ReduxAction => ({\n    type: \"SET_GAME_DATA\",\n    payload: payload\n})\n\nexport const setAllWordGridAnswers = (payload:any): ReduxAction => ({\n    type: \"SET_WORDGRID_ANSWERS\",\n    payload: payload\n}\n)\n\nexport const setNewWordGridBoard = (): ReduxAction => ({\n    type: \"SET_NEW_WORDGRID_BOARD\",\n})\n\n// wordgrid solver\n\nexport const clearWordGridSolver = (): ReduxAction => ({\n    type: \"CLEAR_WORD_GRID_SOLVER\",\n})\n","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {wordGridSocketContext}  from '../context/socket2'\nimport {setAllWordGridAnswers} from \"../actions/actions\";\nimport {setNewWordGridBoard} from \"../actions/actions\";\nimport {clearWordGridEnteredWords} from \"../actions/actions\"\n\ntype Answer = {\n    word?: string\n    path?: string[]\n    score?: number\n}\n\ntype AnswerList = [\n    Answer[]\n]\n\nfunction WordGridScoring(props:any) {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const wordGridSocket = useContext(wordGridSocketContext);\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [returning, setReturning] = useLocalStorage('returning')\n    \n    let [counter, setCounter] = useState(0)\n\n    let newGame = useRef(false)\n    \n    const newBoard = useRef({});\n\n    const isInitialMount = useRef(true)\n\n    let gameData = useSelector((s:any) => s.wordGridGameData)\n\n    let [allAnswers, setAllAnswers] = useState([])\n    let [allDictionaryAnswers, setAllDictionaryAnswers] = useState([])\n\n    let [highlightedCells, setHighlightedCells] = useState<string[]>([]);\n    // if (playerData.gameLeader){\n    //     // newBoard.current = genNewBoard()\n    // } else {\n    //     // newBoard.current = {\"b\": 2}\n    // }\n    useEffect(()=>{\n        \n        console.log(\"using effect\")\n        console.log(newGame.current)\n        \n        if (newGame.current === true){\n            console.log(\"actually using effect\")\n            console.log(newGame.current)\n            console.log(newBoard.current)\n\n            // setGameData(newBoard.current)\n\n            dispatch(clearWordGridEnteredWords())\n            dispatch(setNewWordGridBoard())\n            setAllAnswers([])\n            setAllDictionaryAnswers([])\n            setReturning(true)\n            newGame.current = false\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [counter])\n\n    const handleAnswerTable = useCallback( (data:any) => {\n        console.log(\"received answers\")\n        // console.log(data)\n\n        dispatch(setAllWordGridAnswers(data))\n        setCounter(counter + 1)\n\n        setAllAnswers(data.allAnswers)\n        setAllDictionaryAnswers(data.dictionaryAnswers)\n\n        // console.log(allWordGridAnswers)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    // function wipeCurGameData (gameLeader:boolean) {\n    //     console.log(gameLeader)\n        \n    // }\n\n    function handleStartNewGame() {\n        // so the game leader can make any updates they want\n        \n        // wipeCurGameData(playerData.gameLeader)\n        newGame.current = true\n        setCounter(counter + 1) // trigger page update\n\n        console.log(\"new game\")\n        console.log(newGame)\n        \n        wordGridSocket.emit(\"request-new-game\", {\n            gameID,\n            gameData\n        })\n\n        // history.push(\n        //     {\n        //         \"pathname\" : '/wordGrid-waiting-room',\n        //     }\n        // )\n\n    }\n\n    const handleNewGameRequested = useCallback( ()=> {\n        // to return players to the waiting room\n\n        newGame.current = true\n        setCounter(counter + 1) // trigger page update\n\n        history.push(\n            {\n                \"pathname\" : \"/wordGrid-waiting-room\"\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    useEffect( ()=>{\n        \n        if (isInitialMount.current){\n            isInitialMount.current = false\n            console.log(\"doing this once\")\n            wordGridSocket.emit(\"join\", {\n                gameID,\n                playerData,\n                gameSessionID,\n                gameData\n            })\n            wordGridSocket.emit(\"get-all-answers\", {\n                gameID\n            })\n        }\n        \n        wordGridSocket.on(\"get-answers\", handleAnswerTable);\n        wordGridSocket.on(\"start-new-game\", handleNewGameRequested);\n\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSocket.off(\"get-answers\", handleAnswerTable);\n            wordGridSocket.off(\"start-new-game\", handleNewGameRequested);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSocket, handleAnswerTable, handleNewGameRequested])\n\n    const highlightCells = (path:string[]) => {\n        // first get the path\n        setHighlightedCells(path)\n    }\n\n    const deHighlightCells = () => {\n        setHighlightedCells([])\n    }\n\n    function drawAnswers(allAnswers:any){\n\n        var arrLengths = allAnswers.map((answer:any)=>{\n            // console.log(answer)\n            return answer[\"enteredWords\"][\"wordList\"].length\n        })\n\n        var longestArrLen = Math.max(...arrLengths)\n\n        // console.log(longestArrLen)\n\n        let rowList = []\n\n        for (let i = 0; i < longestArrLen; i++ ){\n            // console.log(i)\n            let row: Array<AnswerList> = []\n            allAnswers.forEach((answer:any)=>{\n                // console.log(answer)\n                if (answer[\"scoredAnswers\"][i]){\n                    row.push(\n                        answer[\"scoredAnswers\"][i]\n                    )\n                }else{\n                    var blankAns =  {\n                        \"word\": \"\",\n                        \"score\": -1,\n                        \"path\": []\n                    }\n                    answer[\"scoredAnswers\"][i] = blankAns\n                    row.push(\n                        answer[\"scoredAnswers\"][i]\n                    )\n                }\n            })\n\n            rowList.push(row)\n        }\n\n        // console.log(rowList)\n\n        return rowList.map((row: any)=>{\n            return (\n            <tr>\n                <td style={{borderRight:\"3px solid\"}}></td>\n                {\n                    row.map((cell: any)=>{\n                        return (\n                                <td className={cell.score === 0 ? \"seenWord\" : \"\"} onMouseEnter={() => highlightCells(cell.path)} onMouseLeave={()=>deHighlightCells()}>\n                                    {cell.word}\n                                </td>\n                        )\n                    })\n                }\n            </tr>\n            )\n        })\n    }\n\n\n    return (\n    <div className=\"project\">\n        <h1>Results!</h1>        \n\n        {/* <p style={{fontSize: \"10px\"}}>{JSON.stringify(allAnswers)}</p> */}\n        \n        <table className=\"playerAnswers\" style={{\"borderCollapse\": \"collapse\"}}>\n        <thead>\n            <tr>\n                <td style={{borderRight:\"3px solid\", borderBottom: \"3px solid\"}}>Player</td>\n                {\n                    allAnswers && allAnswers.map((answerRow:any)=>{\n                        return <th style={{borderBottom: \"3px solid\"}}>{answerRow.userName}</th>\n                    })\n                }\n            </tr>\n        </thead>\n        <tbody>\n            <tr>\n                <td style={{borderRight:\"3px solid\", borderBottom: \"3px solid\"}}>\n                    Score\n                </td>\n                {\n                    allAnswers && allAnswers.map((answerRow:any)=>{\n                        return <th style={{borderBottom: \"3px solid\"}}>{answerRow.playerScore}</th>\n                    })\n                }\n            </tr>\n            {\n                allAnswers && drawAnswers(allAnswers)\n            }\n        \n        </tbody>\n        </table>\n        \n        \n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\n            <thead>\n            </thead>\n            <tbody>\n            <tr><td className={highlightedCells.includes(\"A1\") ? \"highlight\" : \"\"}>{gameData.A1}</td><td className={highlightedCells.includes(\"A2\") ? \"highlight\" : \"\"}>{gameData.A2}</td><td className={highlightedCells.includes(\"A3\") ? \"highlight\" : \"\"}>{gameData.A3}</td><td className={highlightedCells.includes(\"A4\") ? \"highlight\" : \"\"}>{gameData.A4}</td></tr>\n            <tr><td className={highlightedCells.includes(\"B1\") ? \"highlight\" : \"\"}>{gameData.B1}</td><td className={highlightedCells.includes(\"B2\") ? \"highlight\" : \"\"}>{gameData.B2}</td><td className={highlightedCells.includes(\"B3\") ? \"highlight\" : \"\"}>{gameData.B3}</td><td className={highlightedCells.includes(\"B4\") ? \"highlight\" : \"\"}>{gameData.B4}</td></tr>\n            <tr><td className={highlightedCells.includes(\"C1\") ? \"highlight\" : \"\"}>{gameData.C1}</td><td className={highlightedCells.includes(\"C2\") ? \"highlight\" : \"\"}>{gameData.C2}</td><td className={highlightedCells.includes(\"C3\") ? \"highlight\" : \"\"}>{gameData.C3}</td><td className={highlightedCells.includes(\"C4\") ? \"highlight\" : \"\"}>{gameData.C4}</td></tr>\n            <tr><td className={highlightedCells.includes(\"D1\") ? \"highlight\" : \"\"}>{gameData.D1}</td><td className={highlightedCells.includes(\"D2\") ? \"highlight\" : \"\"}>{gameData.D2}</td><td className={highlightedCells.includes(\"D3\") ? \"highlight\" : \"\"}>{gameData.D3}</td><td className={highlightedCells.includes(\"D4\") ? \"highlight\" : \"\"}>{gameData.D4}</td></tr>\n            </tbody>\n        </table>\n        <p style={{fontSize: \"15px\"}}>All words:</p>\n        <table className=\"wordGridDictionaryTable\" style={{fontSize: \"10px\"}}>\n            <thead>\n                {\n                    allDictionaryAnswers && <tr>\n                        <th>Word</th>\n                        <th>Definition</th>\n                        <th>Score</th>\n                        </tr>\n                }\n            </thead>\n            <tbody>\n            {\n            allDictionaryAnswers && allDictionaryAnswers.map(\n                (word:any)=>{\n                return <tr onMouseEnter={() => highlightCells(word.path)} onMouseLeave={()=>deHighlightCells()}>\n                    <td>\n                        {word.word}\n                    </td>\n                    <td>\n                        {word.definition}\n                    </td>\n                    <td>\n                        {word.score}\n                    </td>\n                </tr>\n            })\n            }\n            </tbody>\n        </table>\n\n        \n        { playerData[\"gameLeader\"] ? <div>\n                <p>Play again?</p>\n                <button onClick={handleStartNewGame}>New game</button>\n            </div> : <></>\n        }\n\n        \n    </div>\n  );\n}\n\nexport default WordGridScoring;","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useSelector, useDispatch} from \"react-redux\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport {wordGridSocketContext}  from '../context/socket2'\nimport {addWordGridWord} from \"../actions/actions\"\n\nfunction WordGridGame(props:any) {\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const wordGridSocket = useContext(wordGridSocketContext);\n    \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [gameID, setGameID] = useLocalStorage('gameID')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userName, setUserName] = useLocalStorage('userName')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    let [userID, setUserID] = useLocalStorage('userID')\n\n    let [minutes, setMinutes] = useState(\"\")\n    let [seconds, setSeconds] = useState(\"\")\n    \n    let [newWord, setNewWord] = useState('');\n    let [errorStatus, setErrorStatus] = useState('');\n    let [errorStatusMessage, setErrorStatusMessage] = useState('');\n\n    let enteredWords = useSelector((s:any) => s.wordGridEnteredWords)\n    let gameData = useSelector((s:any) => s.wordGridGameData)\n    \n    let [rotatePos, setRotatePos] = useState(0);\n\n    const enteredWordsRef = useRef<string[]>([])\n\n    const handleTimerTick = useCallback((data: any)=>{\n        \n        setMinutes(data[\"minutes\"])\n        setSeconds(data[\"seconds\"])\n        \n        if ( data[\"minutes\"] === 0 && data[\"seconds\"] === 0 ){\n            handleForceEndGame()\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleForceEndGame = useCallback(()=>{\n        // console.log(\"entered words\")\n        // console.log(enteredWords)\n\n        const submitAnswers = {\n            gameID,\n            userID,\n            userName,\n            enteredWords: {\n                wordList: enteredWordsRef.current\n            }\n        }\n        console.log(\"submit answers is\")\n        console.log(submitAnswers)\n        \n        wordGridSocket.emit(\"send-answers-wordGrid\", submitAnswers)\n\n        history.push(\n            {\n                \"pathname\" : '/wordGrid-scoring',\n            }\n        )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n    const addWord = useCallback((newWord)=>{\n        \n        var guess = {\n            gameID: gameID,\n            guess: newWord\n        }\n        // console.log(enteredWords)\n        if (enteredWords.wordList.includes(newWord)){\n            setErrorStatus('showError')\n            setErrorStatusMessage(\"Sorry, word already entered\")\n            setNewWord(\"\")\n            \n        }else{\n            console.log(guess)\n        \n            wordGridSocket.emit(\n                \"check-answer\",\n                guess\n            )\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    const handleAnswerRes = useCallback((data: any)=>{\n        // console.log(\"handling response from server\")\n        // console.log(enteredWords)\n        \n        if (data[\"inDict\"]){\n    \n            \n            dispatch(\n                addWordGridWord(\n                    {\n                        word: data[\"word\"]\n                    }\n                )\n            )\n\n            enteredWordsRef.current = [...enteredWordsRef.current, data[\"word\"]]\n            \n            console.log(enteredWordsRef)\n            // setEnteredWords([data[\"word\"], ...enteredWords])\n            \n            setNewWord(\"\")\n        }else{\n            setErrorStatus(\"showError\")\n            setErrorStatusMessage(\"Sorry, word not found in the grid / dictionary\")\n            setNewWord(\"\")\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useEffect( ()=>{\n        wordGridSocket.on(\"get-answers\", handleForceEndGame);\n        wordGridSocket.on(\"timer-tick\", handleTimerTick);\n        wordGridSocket.on(\"end-game\", handleForceEndGame)\n        wordGridSocket.on(\"answer-res\", handleAnswerRes)\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSocket.off(\"get-answers\", handleForceEndGame);\n            wordGridSocket.off(\"timer-tick\", handleTimerTick);\n            wordGridSocket.off(\"end-game\", handleForceEndGame);\n            wordGridSocket.off(\"answer-res\", handleAnswerRes);\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSocket, handleForceEndGame, handleTimerTick, handleAnswerRes])\n\n    const handleKeyPress = (e:any) => {\n        if (e.key === \"Enter\"){\n            addWord(newWord)\n        }\n    }\n\n    const rotateGrid = () => {\n        // console.log(rotatePos)\n        var curPos = rotatePos\n        if (curPos + 1 === 4){\n            curPos = 0\n            setRotatePos(curPos)\n        }else{\n            setRotatePos(curPos + 1)\n        }\n    }\n\n    const renderGrid = ()=>{\n        switch (rotatePos){\n            case 0:\n                return (\n                <tbody>\n                    <tr><td>{gameData.A1}</td><td>{gameData.A2}</td><td>{gameData.A3}</td><td>{gameData.A4}</td></tr>\n                    <tr><td>{gameData.B1}</td><td>{gameData.B2}</td><td>{gameData.B3}</td><td>{gameData.B4}</td></tr>\n                    <tr><td>{gameData.C1}</td><td>{gameData.C2}</td><td>{gameData.C3}</td><td>{gameData.C4}</td></tr>\n                    <tr><td>{gameData.D1}</td><td>{gameData.D2}</td><td>{gameData.D3}</td><td>{gameData.D4}</td></tr>\n                </tbody>\n                );\n            case 1:\n                return ( \n                    <tbody>\n                        <tr><td>{gameData.D1}</td><td>{gameData.C1}</td><td>{gameData.B1}</td><td>{gameData.A1}</td></tr>\n                        <tr><td>{gameData.D2}</td><td>{gameData.C2}</td><td>{gameData.B2}</td><td>{gameData.A2}</td></tr>\n                        <tr><td>{gameData.D3}</td><td>{gameData.C3}</td><td>{gameData.B3}</td><td>{gameData.A3}</td></tr>\n                        <tr><td>{gameData.D4}</td><td>{gameData.C4}</td><td>{gameData.B4}</td><td>{gameData.A4}</td></tr>\n                    </tbody>\n                    );\n            case 2:\n                return ( \n                    <tbody>\n                        <tr><td>{gameData.D4}</td><td>{gameData.D3}</td><td>{gameData.D2}</td><td>{gameData.D1}</td></tr>\n                        <tr><td>{gameData.C4}</td><td>{gameData.C3}</td><td>{gameData.C2}</td><td>{gameData.C1}</td></tr>\n                        <tr><td>{gameData.B4}</td><td>{gameData.B3}</td><td>{gameData.B2}</td><td>{gameData.B1}</td></tr>\n                        <tr><td>{gameData.A4}</td><td>{gameData.A3}</td><td>{gameData.A2}</td><td>{gameData.A1}</td></tr>\n                    </tbody>\n                    )\n            case 3:\n                return ( \n                    <tbody>\n                        <tr><td>{gameData.A4}</td><td>{gameData.B4}</td><td>{gameData.C4}</td><td>{gameData.D4}</td></tr>\n                        <tr><td>{gameData.A3}</td><td>{gameData.B3}</td><td>{gameData.C3}</td><td>{gameData.D3}</td></tr>\n                        <tr><td>{gameData.A2}</td><td>{gameData.B2}</td><td>{gameData.C2}</td><td>{gameData.D2}</td></tr>\n                        <tr><td>{gameData.A1}</td><td>{gameData.B1}</td><td>{gameData.C1}</td><td>{gameData.D1}</td></tr>\n                    </tbody>\n                    )\n        }\n    }\n\n    return (\n    <div className=\"project\">\n        <h1>Let's play</h1>\n        <p>Time left: </p>\n        <p>{minutes ? minutes.toString() + \" minute\" : \"\" } { minutes || seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\n\n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\n            <thead>\n            </thead>\n                {renderGrid()}\n        </table>\n        <p style={{fontSize: \"14px\"}}>stuck? try rotating: </p><button onClick={rotateGrid}>Rotate</button>\n        <p>\n            Enter words\n        </p>\n        {/* <form onSubmit={()=>{return false}}> */}\n        <input \n            autoComplete=\"off\"\n            type=\"text\" \n            id=\"newWord\" \n            placeholder=\"Add word\" \n            onChange={e=>{\n                const val = e.target.value\n                setErrorStatus(\"hideError\")\n                setNewWord(val)}\n            }\n            value={newWord}\n            onKeyPress={handleKeyPress}\n        />\n        <button className=\"add-word\"  onClick={e=>{\n            addWord(newWord)\n        }}>Add word</button>\n\n        {/* </form> */}\n\n        { playerData.gameLeader && <div> \n            <button className=\"end-game\" onClick={handleForceEndGame}>Force End Game</button>\n        </div>\n        }\n        \n        <p className={errorStatus}>{errorStatusMessage}</p>\n\n        <p>Your words: </p>\n\n        <ul>\n        {\n            enteredWords.wordList.map( (word: string) => {\n                return (\n                <li key={word}>\n                    {word}\n                </li>\n                )\n        })\n        }\n        </ul>\n    </div>\n  );\n}\n\nexport default WordGridGame;","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\nimport {useSelector} from \"react-redux\";\nimport {wordGridSolverSocketContext}  from '../context/socket2'\nimport Webcam from 'react-webcam';\n\nconst videoConstraints = {\n    width: 250,\n    height: 250,\n    facingMode: \"user\"\n  };\n\n\nfunction WordGridSolver(props:any) {\n\n    const wordGridSolverSocket = useContext(wordGridSolverSocketContext);\n    const gridData = useSelector((s:any) => s.wordGridSolverData);\n    const webcamRef = useRef<Webcam>(null);\n    const [imgSrc, setImgSrc] = useState<string | null>(null);\n\n    let keepLooking = useRef(true)\n\n    // useEffect(()=>{\n    //     console.log(\"using effect\")\n    //     if (webcamRef.current){\n    //         let interval = setInterval(\n    //             function(){ \n    //                 if (webcamRef.current){\n    //                     wordGridSolverSocket.emit(\"solve-image\", {\n    //                         \"imageData\" : webcamRef.current.getScreenshot()\n    //                     })\n    //                 }\n    //             },1000\n    //         );\n    //     }\n\n    // }, [])\n\n    const handleSearchBoundaries = useCallback((data)=>{\n        console.log(\"New search boundaries!\")\n        if (webcamRef.current){\n            //const imageSrc = webcamRef.current.getScreenshot();\n            // console.log(imageSrc)\n            setImgSrc(data[\"imgWithBoundaries\"]);\n            // console.log(data[\"imgWithBoundaries\"])\n            keepLooking.current = false\n        }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n\n\n    useEffect( ()=>{\n        \n        wordGridSolverSocket.on('connect',\n            () => {\n                console.log(\"connected wordGrid\")\n            }\n        );\n\n        wordGridSolverSocket.emit(\"join\", {})\n\n        wordGridSolverSocket.on(\"solved-image\", handleSearchBoundaries)\n\n\n        return () => {\n            // before the component is destroyed\n            // unbind all event handlers used in this component\n            wordGridSolverSocket.off(\"solved-image\", handleSearchBoundaries)\n          };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [wordGridSolverSocket, handleSearchBoundaries])\n\n    const capture = useCallback(\n        () => {\n            if (webcamRef.current) {\n                // const imageSrc = webcamRef.current.getScreenshot();\n                // // console.log(imageSrc)\n                // setImgSrc(imageSrc);\n\n                wordGridSolverSocket.emit(\"solve-image\", {\n                    \"imageData\" : webcamRef.current.getScreenshot()//imgSrc\n                })\n            }\n        },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n        [webcamRef]\n    );\n\n    // const renderImg = () => {\n    //     console.log(\"render img\")\n    //     // console.log(imgSrc)\n    //     if (imgSrc){\n    //         console.log(\"passed\")\n    //         console.log(imgSrc)\n    //         return <img src={imgSrc} />\n    //     }\n    // }\n\n    // useEffect(()=>{\n    //     renderImg()\n    // }, [imgSrc])\n\n    return (\n    <div className=\"project\">\n        <p>Use your camera to populate the grid:</p>\n\n        <p  style={{ \"fontSize\": \"12px\"}}>\n            In progress - text detection is a challenging problem - pressing capture photo\n            will return the image with the bounding boxes of where text might be located.\n        </p>\n\n        <table>\n        <tr>\n        <td>{\n            <Webcam\n                audio={false}\n                height={250}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                width={250}\n                videoConstraints={videoConstraints}\n            />\n        }</td>\n        <td>\n            {\n                imgSrc && <img alt=\"\" src={imgSrc} />\n            }\n        </td>\n        </tr>\n        <td>\n            <button onClick={capture}>Capture photo</button>\n        </td>\n        <td>\n\n        </td>\n        </table>\n        <div className=\"webcamPreview\">\n        \n        </div>\n        <div className=\"webcamScreenshot\">\n            \n        </div>\n        \n        \n\n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\n            <thead>\n            </thead>\n            <tbody>\n                <tr><td>{gridData.A1}</td><td>{gridData.A2}</td><td>{gridData.A3}</td><td>{gridData.A4}</td></tr>\n                <tr><td>{gridData.B1}</td><td>{gridData.B2}</td><td>{gridData.B3}</td><td>{gridData.B4}</td></tr>\n                <tr><td>{gridData.C1}</td><td>{gridData.C2}</td><td>{gridData.C3}</td><td>{gridData.C4}</td></tr>\n                <tr><td>{gridData.D1}</td><td>{gridData.D2}</td><td>{gridData.D3}</td><td>{gridData.D4}</td></tr>\n            </tbody>\n        </table>\n\n        <p>Or enter each letter, reading left to right</p>\n        <input></input><button>Solve</button>\n    </div>\n  );\n}\n\nexport default WordGridSolver;","import { Switch, Route } from 'react-router-dom';\nimport GamesList from \"./components/GamesList\";\nimport Header from \"./components/Header\";\nimport Categories from \"./categories/categories\";\nimport CategoriesJoin from \"./categories/CategoriesJoin\";\nimport CategoriesWaiting from \"./categories/CategoriesWaiting\";\nimport CategoriesGame from \"./categories/CategoriesGame\";\nimport CategoriesScoring from \"./categories/CategoriesScoring\";\nimport PictureGuess from \"./pictureguess/Pictureguess\";\nimport WordGridSetup from \"./wordGrid/WordGridSetup\";\nimport WordGridJoin from \"./wordGrid/WordGridJoin\";\nimport WordGridWaiting from \"./wordGrid/WordGridWaiting\";\nimport WordGridScoring from \"./wordGrid/WordGridScoring\";\nimport WordGridGame from \"./wordGrid/WordGridGame\";\nimport './App.css';\nimport {SocketContext, socket} from \"./context/socket2\"\nimport {PictureSocketContext, picturesocket} from \"./context/socket2\"\nimport WordGridSolver from './wordGridSolver/wordGridSolver';\n\nfunction App() {\n    // TODO: boot people out\n    // TODO: keep score\n    // \n    return (\n        <PictureSocketContext.Provider value={picturesocket}>\n        <SocketContext.Provider value={socket}>\n            <div className=\"App\">\n                <div className=\"header\">\n                    <Header/>\n                </div>\n                \n                <div className=\"main-content\">\n                    <Switch>\n                        <Route exact path=\"/\" component={GamesList}/>\n                        \n                        <Route path=\"/categories\" component={Categories}/>\n                        <Route exact path=\"/join-categories/:gameID\" component={CategoriesJoin}/>\n                        <Route path=\"/categories-waiting-room\" component={CategoriesWaiting}/>\n                        <Route path=\"/categories-game-room\" component={CategoriesGame}/>\n                        <Route path=\"/categories-scoring\" component={CategoriesScoring}/>\n                        \n                        <Route path=\"/picture-guess/:gameID\" component={PictureGuess}/>\n                        <Route path=\"/picture-guess\" component={PictureGuess}/>\n\n                        <Route path=\"/wordGrid\" component={WordGridSetup} />\n                        <Route exact path=\"/join-wordGrid/:gameID\" component={WordGridJoin}/>\n                        <Route path=\"/wordGrid-waiting-room\" component={WordGridWaiting}/>\n                        <Route path=\"/wordGrid-game-room\" component={WordGridGame}/>\n                        <Route path=\"/wordGrid-scoring\" component={WordGridScoring}/>\n\n                        <Route path=\"/wordGridSolver\" component={WordGridSolver} />\n                    </Switch>\n                </div>\n            </div>\n        </SocketContext.Provider>\n        </PictureSocketContext.Provider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\ninterface ReduxAction {\n    type: string\n    payload?: any\n}\n\nexport interface EnteredWordState {\n    wordList: String[]\n}\n\nexport const intialEmptyWordsState = {\n    wordList: []\n} as EnteredWordState\n\nexport const wordGridEnteredWordList = (\n    state: EnteredWordState = intialEmptyWordsState,\n    action: ReduxAction\n): EnteredWordState => {\n    switch(action.type){\n        case 'ADD_WORD_WORDGRID':\n            return {\n                wordList: [action.payload, ...state.wordList]\n            }\n        case 'GET_WORDGRID_ENTERED_WORDS':\n            return state\n        case 'CLEAR_WORDGRID_ENTERED_WORDS':\n            return intialEmptyWordsState\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridEnteredWordList","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\nexport interface WordGridDictWord {\n    word: string\n    path: string[],\n    definition: string\n}\n\nexport interface EnteredWords {\n    wordList?: string[]\n}\n\nexport interface WordGridPlayerAnswers {\n    enteredWords: EnteredWords,\n    gameID: string,\n    playerScore: number,\n    userID: string,\n    userName: string\n}\n\nexport interface AllWordGridAnswers {\n    dictionaryAnswers: WordGridDictWord[]\n    allAnswers: WordGridPlayerAnswers[]\n}\n\nexport const intialAllWordGridAnswers = {\n    dictionaryAnswers: [],\n    allAnswers: []\n} as AllWordGridAnswers\n\nexport const wordGridPlayerAnswers = (\n    state: AllWordGridAnswers = intialAllWordGridAnswers,\n    action: ReduxAction\n): AllWordGridAnswers => {\n    switch(action.type){\n        case 'SET_WORDGRID_ANSWERS':\n            // console.log(\"setting wordGrid answers\")\n            // console.log(action.payload)\n            return {\n                dictionaryAnswers: action.payload[\"dictionaryAnswers\"],\n                allAnswers: action.payload[\"allAnswers\"]\n            }\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridPlayerAnswers","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\nfunction genNewBoard(){\n    const availableOptions = \"AAEEGN, ELRTTY, AOOTTW, ABBJOO, EHRTVW, CIMOTU, DISTTY, EIOSST, DELRVY, ACHOPS, HIMNQU, EEINSU, EEGHNW, AFFKPS, HLNNRZ, DEILRX\".split(\", \").map(x=>x.split(''))\n\n    function shuffleArray(array: number[]) {\n        for (let i = array.length - 1; i > 0; i--) {\n            const j = Math.floor(Math.random() * (i + 1));\n            [array[i], array[j]] = [array[j], array[i]];\n        }\n        return array\n    }\n\n    // shuffle list of indicies\n    //let arrayOrder =  Array(16).fill(-1).map( (_, i) => i+1 ).map( (_, i) => i -1 == -1 ? 15 : i-1 )\n    let arrayOrder = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n    arrayOrder = shuffleArray(arrayOrder)\n    \n    const tilePlacement = [\n        \"A1\", \"A2\", \"A3\", \"A4\",\n        \"B1\", \"B2\", \"B3\", \"B4\",\n        \"C1\", \"C2\", \"C3\", \"C4\",\n        \"D1\", \"D2\", \"D3\", \"D4\"\n    ]\n\n    var board : BoardLayout;\n    board = {}\n\n    for (var ind in tilePlacement){\n        var randInd = Math.floor(Math.random() * 6);\n        board[tilePlacement[ind]] = availableOptions[arrayOrder[ind]][randInd]\n    }\n\n    return board\n\n}\n\n\nexport interface BoardLayout  {\n    [key: string] : string\n}\n\nexport const intialWordGridBoardLayout = genNewBoard() as BoardLayout\n\nexport const wordGridBoardLayout = (\n    state: BoardLayout = intialWordGridBoardLayout,\n    action: ReduxAction\n): BoardLayout => {\n    switch(action.type){\n        case 'SET_GAME_DATA':\n            console.log(\"setting wordGrid answers\")\n            console.log(action.payload)\n            return action.payload\n        case 'SET_NEW_WORDGRID_BOARD':\n            return genNewBoard()\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridBoardLayout","interface ReduxAction {\n    type: string\n    payload?: any\n}\n\n\n\nfunction genEmptySolverBoard(){\n\n    const tilePlacement = [\n        \"A1\", \"A2\", \"A3\", \"A4\",\n        \"B1\", \"B2\", \"B3\", \"B4\",\n        \"C1\", \"C2\", \"C3\", \"C4\",\n        \"D1\", \"D2\", \"D3\", \"D4\"\n    ]\n\n    var board : BoardSolverLayout;\n    board = {}\n\n    for (var ind in tilePlacement){\n        board[tilePlacement[ind]] = \"\"\n    }\n\n    console.log(\"empty board\")\n    console.log(board)\n\n    return board\n\n}\n\nexport interface BoardSolverLayout  {\n    [key: string] : string\n}\nexport const intialWordGridSolverBoardLayout = genEmptySolverBoard() as BoardSolverLayout\n\nexport const wordGridSolverLayout = (\n    state: BoardSolverLayout = intialWordGridSolverBoardLayout,\n    action: ReduxAction\n): BoardSolverLayout => {\n    switch(action.type){\n        case 'SET_WORD_GRID_SOLVER':\n            // console.log(\"setting wordGrid answers\")\n            // console.log(action.payload)\n            return action.payload\n        case 'CLEAR_WORD_GRID_SOLVER':\n            return genEmptySolverBoard()\n        default:\n            return state\n    }\n\n}\n\nexport default wordGridSolverLayout","import { combineReducers } from 'redux';\nimport wordGridEnteredWordList from './wordgrid';\nimport wordGridPlayerAnswers from './wordgrid-scoring';\nimport wordGridGameData from \"./wordgrid-game-data\";\nimport wordGridSolverLayout from \"./wordgrid-solver-data\"\n\nconst allReducers = combineReducers({\n    wordGridEnteredWords: wordGridEnteredWordList,\n    wordGridPlayerAnswers: wordGridPlayerAnswers,\n    wordGridGameData: wordGridGameData,\n\n    wordGridSolverData: wordGridSolverLayout\n});\n\nexport default allReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport allReducers from './reducers'\nimport {createStore} from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(\n    allReducers\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n        <HashRouter>\n            <App />\n        </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}