{"version":3,"sources":["components/GameItem.tsx","gamedata.js","components/GamesList.tsx","components/Header.tsx","hooks/useLocalStorage.js","categories/categories.tsx","categories/CategoriesJoin.tsx","constants.tsx","context/socket2.js","categories/CategoriesWaiting.tsx","categories/CategoriesGame.tsx","categories/CategoriesScoring.tsx","pictureguess/Pictureguess.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["BlogItem","blogData","className","to","id","name","allGames","GamesList","map","game","GameItem","Header","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","categoriesReducer","state","action","type","list","filter","item","concat","answer","category","sampleCategories","Error","randomLetter","String","fromCharCode","Math","floor","random","CategoriesStart","gameLetter","setLetter","useReducer","categoryList","dispatchListData","userNameError","setUserNameError","categoryError","setCategoryError","history","useHistory","gameID","setGameID","userName","setUserName","setGameData","setPlayerData","gameSessionID","setGameSessionID","userID","setUserID","returning","setReturning","setPlayerList","onClick","newLetter","defaultValue","onChange","e","event","target","console","log","uuidv4","placeholder","newUserID","newGameSessionID","newGameID","toString","newReturning","handleUserNameChange","length","push","CategoriesJoin","props","gameIDPath","location","split","reverse","SOCKETURL","includes","window","hostname","socket","io","SocketContext","React","createContext","CategoriesWaiting","categoriesSocket","useContext","copySuccess","setCopySuccess","gameData","playerData","playerList","setJoined","handleJoinedRoom","useCallback","handleNewPlayer","data","handleStartGame","handleSendStart","emit","on","off","baseJoinLink","navigator","clipboard","writeText","focus","linkToClipboard","player","ind","gameLeader","reload","CategoriesGame","minutes","setMinutes","seconds","setSeconds","answers","setAnswers","stopBus","setBus","handleStopBus","handleTimerTick","handleForceEndGame","style","fontSize","paddingBottom","newAnswers","numAnswers","ans","charAt","toLowerCase","handleChange","CategoriesScoring","categories","allAnswers","setAllAnswers","userScores","setUserScores","markedRows","setMarkedRows","handleAnswerTable","handleUpdateScore","handleMark","rowInd","colInd","rowId","handleStartNewGame","handleNewGameRequested","user","row","userScore","PictureGuess","App","Provider","exact","path","component","Categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b000fd55.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\ntype blogData = {\r\n    id : string,\r\n    name : string\r\n}\r\n\r\n\r\nfunction BlogItem(blogData: blogData) {\r\n    return (\r\n      <div className=\"blog-item\">\r\n          <Link to={blogData.id}>{blogData.name}</Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default BlogItem;","var allGames = [\r\n    {\r\n        \"id\" : \"categories\",\r\n        \"name\" : \"Categories\",\r\n        \"url\" : \"categories\"\r\n    },\r\n    {\r\n        \"id\" : \"pictureguess\",\r\n        \"name\" : \"Picture Guess\",\r\n        \"url\" : \"picture-guess\"\r\n    },\r\n\r\n]\r\n\r\nexport default allGames;","import React from 'react';\r\nimport GameItem from \"./GameItem\";\r\nimport allGames from \"../gamedata\";\r\n\r\ntype game = {\r\n    id : string,\r\n    name : string\r\n}\r\n\r\nfunction GamesList() {\r\n    return <div className=\"blog-list\">\r\n        <div className=\"about-message\">\r\n          <p>Click an option below to start a game!</p>\r\n        </div>\r\n        { allGames.map( (game: game) => <GameItem id={game.id} name={game.name}  />  )}\r\n      </div>\r\n    \r\n  }\r\n  \r\n  export default GamesList;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n      <div className=\"header\">\r\n        <Link className=\"header-item\" to=\"/\">Tom Davenport</Link>\r\n        <Link className=\"header-item\" to=\"/\">Return to game list</Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Header;","  \r\nimport { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'categories-game-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue === \"undefined\") return \"\"\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import React, {useState, useReducer, useContext, useEffect} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport Category from \"../models\";\r\nimport sampleCategories from \"./sampleCategories.json\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\n\r\nconst categoriesReducer = (state:any, action:any) => {\r\n    switch (action.type) {\r\n        case 'REMOVE_ITEM':\r\n            return ({\r\n            ...state,\r\n            list : state.list.filter((item:Category) => item.key !== action.key)\r\n            })\r\n        case 'ADD_ITEM':\r\n            return ({\r\n                ...state,\r\n                list : state.list.concat({name: action.name, key: action.key, answer: \"\"})\r\n            })\r\n        case 'UPDATE_ITEM':\r\n            return ({\r\n                ...state,\r\n                list : state.list.map(\r\n                    (category: Category) => {\r\n                        if (action.key === category.key){\r\n                            const updatedItem = {\r\n                                ...category,\r\n                                name : action.name\r\n                            };\r\n                            return updatedItem\r\n                        }else{\r\n                            return category\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n        case 'RESET_LIST':\r\n            return ({\r\n                ...state,\r\n                list : sampleCategories\r\n            })\r\n      default:\r\n        throw new Error();\r\n    }\r\n};\r\n\r\nfunction randomLetter(){\r\n    return String.fromCharCode(65+Math.floor(Math.random() * 26))\r\n}\r\n\r\n\r\nfunction CategoriesStart() {\r\n\r\n    // random letter\r\n    const [gameLetter, setLetter] = useState(randomLetter())\r\n    const [categoryList, dispatchListData] =  useReducer(categoriesReducer, {\r\n        list: sampleCategories\r\n    });\r\n    const [userNameError, setUserNameError] = useState(false)\r\n    const [categoryError, setCategoryError] = useState(false)\r\n    \r\n    const history = useHistory();\r\n    // const ws = useContext(WebSocketContext);\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\r\n    let [userName, setUserName] = useLocalStorage('userName', '')\r\n    let [gameData, setGameData] = useLocalStorage('gameData', {})\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\r\n    let [userID, setUserID] = useLocalStorage('userID', '')\r\n    let [returning, setReturning] = useLocalStorage('returning', false)\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\r\n\r\n    useEffect(() => {\r\n        return setGameData({\r\n            \"categories\" : categoryList.list,\r\n            \"gameLetter\" : gameLetter\r\n        })\r\n        \r\n      }, [categoryList]);\r\n\r\n\r\n    function newLetter(){\r\n        \r\n        let newLetter = randomLetter()\r\n        \r\n        setLetter(newLetter)\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : newLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    // category list\r\n    \r\n\r\n    function handleChange(event : any){\r\n        \r\n        dispatchListData({\"type\" : \"UPDATE_ITEM\", key: event.target.id, name : event.target.value })\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    \r\n    }\r\n  \r\n    function handleRemove(key : string){\r\n        dispatchListData({type:\"REMOVE_ITEM\", \"key\" : key })\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    function handleAdd(){\r\n        console.log(\"clicked handle\")\r\n        dispatchListData({type:\"ADD_ITEM\", key: uuidv4()})\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    function handleReset(){\r\n        console.log(\"clicked reset\")\r\n        dispatchListData({type:\"RESET_LIST\"})\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    // user\r\n    \r\n    function handleUserNameChange(event:any){\r\n        \r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\r\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\r\n        var newReturning = returning ? returning : false\r\n\r\n        setGameID(newGameID)\r\n        setGameSessionID(newGameSessionID)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        setPlayerList([{\r\n            userID,\r\n            userName : event.target.value,\r\n            \"gameLeader\" : true\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value,\r\n            \"gameLeader\" : true\r\n        }\r\n        )\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    // submit form\r\n\r\n    \r\n\r\n\r\n    function startGame(event:any){\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n        \r\n            // check that the player has at least one category\r\n        setCategoryError(categoryList.list.length === 0) \r\n        setUserNameError(!userName)\r\n\r\n        // check that the player has added a username\r\n        if ((categoryList.list.length === 0) || (!userName)){\r\n            return\r\n        }\r\n        else {\r\n\r\n            \r\n            history.push(\r\n                {\r\n                    \"pathname\" : '/categories-waiting-room',\r\n                }\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\r\n        <p>Letter to guess : <span className=\"gameLetter\" id=\"gameLetter\">{gameLetter}</span></p>\r\n        <button id=\"newLetter\" onClick={()=>{newLetter()}}>Change letter</button>\r\n        <p>As the game leader, it's up to you to set the game up!</p>\r\n        <p>Click a category to change the name, or the button to remove it. </p>\r\n        <p>1. (Optional) Change or add more categories:</p>\r\n        { \r\n            categoryList.list.map(\r\n                (category: Category) => {\r\n                    return (\r\n                    <div className=\"category\">\r\n                        <input\r\n                            type=\"text\" \r\n                            id={category.key} \r\n                            defaultValue={category.name}\r\n                            onChange={(e)=>handleChange(e)}\r\n                        />\r\n                        <button onClick={()=>handleRemove(category.key)}>\r\n                            Remove\r\n                        </button>\r\n                    </div>\r\n                    )\r\n                }\r\n            )\r\n        }\r\n        <button type=\"button\" onClick={() =>handleAdd()}> Add category </button>\r\n        <button type=\"button\" onClick={() =>handleReset()}> Reset to default </button>\r\n        <p className={ categoryError ? \"showError\" : \"hideError\" }>Please have at least one category before continuing.</p>\r\n        <p>2. Enter your user name:</p>\r\n        \r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName} \r\n        />\r\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\r\n        <p>3. Click start game:</p>\r\n        <button className=\"start-game\" onClick={(e)=>{startGame(e)}}>Start Game</button>\r\n        {/* <p>Looking to join someone else's game?</p>\r\n        <Link to='join-game'>\r\n            <button type=\"button\">Join an existing game</button>\r\n        </Link> */}\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesStart;","\r\nimport React, {useState, useRef, useContext} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction CategoriesJoin(props:any) {\r\n\r\n    const history = useHistory();\r\n    \r\n    const [userNameError, setUserNameError] = useState(false)\r\n\r\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\r\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\r\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\r\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\r\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\r\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\r\n    \r\n    function handleUserNameChange(event:any){\r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newReturning = returning ? returning : false\r\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\r\n\r\n        setGameID(gameIDPath)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        \r\n        setPlayerList([{\r\n            userID,\r\n            userName:event.target.value\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value\r\n        }\r\n        )\r\n    }\r\n\r\n    \r\n\r\n    function joinGameRoom(){\r\n        setUserNameError(!userName)\r\n        // check that the player has added a username\r\n        if (!userName){\r\n            return\r\n        }\r\n        \r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-waiting-room'\r\n            }\r\n        )\r\n\r\n        \r\n    }\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Join game</h1>\r\n\r\n        <p>Enter a username:</p>\r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName} \r\n        />\r\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\r\n        <br/>\r\n        <button onClick={()=>joinGameRoom()}>Join game</button>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesJoin;","export const SOCKETURL = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:8000\" : \"https://tom-games.azurewebsites.net/\"","import {io} from \"socket.io-client\";\r\nimport React from 'react';\r\nimport { SOCKETURL } from '../constants'\r\n\r\nexport const socket = io( SOCKETURL + 'categories');\r\n\r\nexport const SocketContext = React.createContext(socket);\r\n","\r\nimport React, {useState, useRef, useContext, useEffect, useCallback} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport {SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction CategoriesWaiting(props:any) {\r\n    \r\n    const categoriesSocket = useContext(SocketContext)\r\n    const [copySuccess, setCopySuccess] = useState('');\r\n    const history = useHistory();\r\n\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n    let [joined, setJoined] = useState(false);\r\n\r\n    const handleJoinedRoom = useCallback(()=>{\r\n        setJoined(true)\r\n        console.log(true)\r\n    }, [])\r\n\r\n    const handleNewPlayer = useCallback( (data:any) =>{\r\n        setPlayerList(data['playerList'])\r\n        setGameData(data[\"gameData\"])\r\n    }, [])\r\n\r\n    const handleStartGame = useCallback((data:any)=>{\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-game-room'\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const handleSendStart = useCallback(()=>{\r\n        console.log(\"START!\")\r\n        categoriesSocket.emit(\"send-start\", {gameID})\r\n        categoriesSocket.emit(\"start-timer\", {gameID})\r\n    }, [])\r\n\r\n    useEffect( ()=>{\r\n        \r\n        categoriesSocket.on('connect',\r\n            () => {\r\n                console.log(\"connected categories\")\r\n            }\r\n        );\r\n\r\n        if (gameID){\r\n            console.log(\"joining room\")\r\n\r\n            categoriesSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n        }\r\n\r\n        categoriesSocket.on(\"joined-room\", handleJoinedRoom)\r\n        categoriesSocket.on(\"new-player\",handleNewPlayer);\r\n        categoriesSocket.on(\"start-game\", handleStartGame)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"joined-room\", handleJoinedRoom);\r\n            categoriesSocket.off(\"new-player\", handleNewPlayer);\r\n            categoriesSocket.off(\"start-game\", handleStartGame);\r\n          };\r\n\r\n    }, [categoriesSocket, handleJoinedRoom, handleNewPlayer, handleStartGame])\r\n    \r\n\r\n    // direct link \r\n    function linkToClipboard(e:any){\r\n        \r\n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\r\n\r\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/join-categories/${gameID}`)\r\n        // This is just personal preference.\r\n        // I prefer to not show the whole text area selected.\r\n        e.target.focus();\r\n        setCopySuccess('Copied!');\r\n    }\r\n\r\n\r\n    function refreshPage(){\r\n        window.location.reload()\r\n    }\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Categories</h1>\r\n        <h4>Waiting room</h4>\r\n\r\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\r\n        \r\n        <p>Your game id is: <span className=\"gameID\">{gameID}</span></p>\r\n        <button onClick={(e)=>{linkToClipboard(e)}}>Click to copy direct link</button>\r\n        <p>{copySuccess}</p>\r\n\r\n        <p>Current players:</p>\r\n        <table>\r\n        <thead>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                playerList.map(\r\n                        (player: Player, ind: number ) => {\r\n                            return (\r\n                            <tr key={player.userID}>\r\n                                <td>\r\n                                    {ind + 1}.\r\n                                </td>\r\n                                <td>\r\n                                    {player.userName}\r\n                                </td>\r\n                                <td>\r\n                                    {player.gameLeader ?  \" (Game leader)\" : \"\" }\r\n                                </td>\r\n                            </tr>\r\n                            )\r\n                        }\r\n                    )\r\n            }\r\n        </tbody>\r\n        </table>\r\n        { \r\n            playerList.length == 0 ? <> Can't see any other players? <button onClick={()=>{refreshPage()}}>Refresh</button>  </>: <></> \r\n        }\r\n        { playerData.gameLeader && <div> \r\n        <p>3. Click start game:</p>\r\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\r\n        </div>\r\n        }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesWaiting;","import React, {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Category from \"../models\";\r\nimport {SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\ntype Answers = [\r\n    {\r\n        key : string,\r\n        name: string,\r\n        answer? :string\r\n    }\r\n]\r\n\r\nfunction CategoriesGame(props:any) {\r\n\r\n    \r\n    const history = useHistory();\r\n    const categoriesSocket = useContext(SocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n\r\n    let [minutes, setMinutes] = useState(\"\")\r\n    let [seconds, setSeconds] = useState(\"\")\r\n    \r\n    let [answers, setAnswers] = useState(gameData[\"categories\"])\r\n    let [gameLetter, setGameLetter] = useState(gameData[\"gameLetter\"])\r\n    let [stopBus, setBus] = useState(false)\r\n\r\n    // const getGameLetter = () => {\r\n    //     setGameLetter(gameData[\"gameLetter\"])\r\n    //     return gameLetter\r\n    // }\r\n\r\n    const handleChange = (e:any) =>{\r\n\r\n        let newAnswers: Answers[] =[]\r\n        let numAnswers = 0\r\n        \r\n        newAnswers = answers.map( (ans:any) =>{\r\n            if (e.target.id == ans.key){\r\n                ans[\"answer\"] = e.target.value\r\n                \r\n                numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\r\n            }else{\r\n                if (ans[\"answer\"]){\r\n\r\n                    numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\r\n                }\r\n            }\r\n            return ans\r\n        })\r\n\r\n        if (numAnswers == answers.length){\r\n            setBus(true)\r\n        }else{\r\n            setBus(false)\r\n        }\r\n        setAnswers(newAnswers)\r\n    }\r\n\r\n\r\n    const handleStopBus = useCallback(()=>{\r\n        console.log(\" handle send answers\")\r\n        setBus(true)\r\n        categoriesSocket.emit(\"send-answers\", {\r\n            gameID,\r\n            userID,\r\n            userName,\r\n            answers,\r\n            \"stopBus\" : true\r\n        })\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-scoring',\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const handleTimerTick = useCallback((data: any)=>{\r\n        \r\n        setMinutes(data[\"minutes\"])\r\n        setSeconds(data[\"seconds\"])\r\n        \r\n        if ( data[\"minutes\"] == 0 && data[\"seconds\"] == 0 ){\r\n            handleForceEndGame()\r\n        }\r\n    \r\n    }, [])\r\n\r\n    const handleForceEndGame = useCallback(()=>{\r\n        \r\n        categoriesSocket.emit(\"send-answers\", {\r\n            gameID,\r\n            userID,\r\n            userName,\r\n            answers,\r\n            stopBus : false\r\n        })\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-scoring',\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    \r\n    useEffect( ()=>{\r\n\r\n        categoriesSocket.on(\"send-answers\", handleForceEndGame);\r\n        categoriesSocket.on(\"timer-tick\", handleTimerTick);\r\n        categoriesSocket.on(\"end-game\", handleForceEndGame)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"send-answers\", handleForceEndGame);\r\n            categoriesSocket.off(\"timer-tick\", handleTimerTick);\r\n            categoriesSocket.off(\"end-game\", handleForceEndGame)\r\n          };\r\n\r\n    }, [categoriesSocket, handleForceEndGame, handleTimerTick])\r\n\r\n\r\n\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Let's play</h1>        \r\n        <p>Time left: {minutes ? minutes.toString() + \" minute\" : \"\" } { seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\r\n        <p>Enter something for each category that starts with:</p>\r\n        <p><span className=\"gameLetter\" style={{fontSize: \"55px\"}}>{gameLetter}</span></p>\r\n\r\n        <table style={{paddingBottom: \"20px\"}}>\r\n        <tr>\r\n            <th>Category</th>\r\n            <th>Answer</th>\r\n            <th>{/* Error */}</th>\r\n        </tr>\r\n        {answers.map(\r\n                (category: Category) => {\r\n                    return (\r\n                    <tr>\r\n                        <td>{category.name}</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\" \r\n                                id={category.key} \r\n                                defaultValue={ category[\"answer\"] ? category[\"answer\"] : '' }\r\n                                onChange={(e)=>handleChange(e)}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <p className={ category[\"answer\"] && category[\"answer\"].charAt(0).toLowerCase() !== gameLetter.toLowerCase() ? \"showError\" : \"hideError\" }>Category has to start with {gameLetter}!</p>\r\n                        </td>\r\n                    </tr>\r\n                    )\r\n                }\r\n            )\r\n        }\r\n        <tr>\r\n            <td>\r\n            </td>\r\n            <td>\r\n            { stopBus ? <button id=\"stop\" onClick={()=>handleStopBus()}>Stop!</button> : <></>}\r\n            </td>\r\n            <td>\r\n            </td>\r\n        </tr>\r\n        </table>\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesGame;","import React, {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Category from \"../models\";\r\nimport {socket, SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\ntype AnswerList = [\r\n    gameID : string,\r\n    gameSessionID : string,\r\n    userID : string,\r\n    userName : string,\r\n    answers : Answers[]\r\n]\r\n\r\ntype Answers = [\r\n    {\r\n        key : string,\r\n        name: string,\r\n        answer? :string\r\n    }\r\n]\r\n\r\ntype MarkedRows = [\r\n    string[] \r\n]\r\n\r\nfunction CategoriesScoring(props:any) {\r\n\r\n    \r\n    const history = useHistory();\r\n    const categoriesSocket = useContext(SocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n\r\n    let [categories, setCategories] = useState(gameData[\"categories\"])\r\n    let [allAnswers , setAllAnswers] = useState<AnswerList[]>([]); //useState([])\r\n    \r\n    let [userScores, setUserScores] = useState<any[]>([]); \r\n    let [markedRows, setMarkedRows] = useState<string[]>([]); \r\n\r\n    const handleAnswerTable = useCallback( (data:any) => {\r\n        setAllAnswers(data)\r\n    }, [])\r\n\r\n    const handleUpdateScore = useCallback((data:any)=>{\r\n        setMarkedRows(data[\"rowIds\"])\r\n        setUserScores(data[\"userScores\"])\r\n    }, [])\r\n\r\n    const handleMark = useCallback((rowInd : number, colInd: number, rowId : string)=>{\r\n        categoriesSocket.emit(\"mark-answer\", {\r\n            gameID,\r\n            rowId,\r\n            colInd,\r\n            rowInd\r\n        })\r\n    }, [])\r\n\r\n    const handleStartNewGame = useCallback( () => {\r\n        // so the game leader can make any updates they want\r\n        categoriesSocket.emit(\"request-new-game\", {\r\n            gameID\r\n        })\r\n        console.log(returning)\r\n        returning = setReturning(true)\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories',\r\n            }\r\n        )\r\n    }, []);\r\n\r\n    const handleNewGameRequested = useCallback( ()=> {\r\n        // to return players to the waiting room\r\n\r\n        setReturning(true)\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : \"/categories-waiting-room\"\r\n            }\r\n        )\r\n    }, [])\r\n\r\n\r\n\r\n    \r\n    useEffect( ()=>{\r\n\r\n        console.log(allAnswers)\r\n        \r\n        if (allAnswers.length == 0){\r\n            console.log(\"doing this once\")\r\n            categoriesSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n            categoriesSocket.emit(\"get-all-answers\", {\r\n                gameID\r\n            })\r\n        }\r\n        \r\n        categoriesSocket.on(\"get-answers\", handleAnswerTable);\r\n        categoriesSocket.on(\"update-scores\", handleUpdateScore);\r\n        categoriesSocket.on(\"start-new-game\", handleNewGameRequested);\r\n\r\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"get-answers\", handleAnswerTable);\r\n            categoriesSocket.off(\"update-scores\", handleUpdateScore);\r\n            categoriesSocket.off(\"start-new-game\", handleNewGameRequested);\r\n          };\r\n\r\n    }, [categoriesSocket, handleAnswerTable, handleUpdateScore, handleNewGameRequested])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(allAnswers)\r\n    }, [allAnswers])\r\n\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Time to score!</h1>        \r\n        <p>The game leader will now mark the answers:</p>\r\n        <table>\r\n            <thead>\r\n                <th>\r\n                    Category\r\n                </th>\r\n                {\r\n                    allAnswers.map( (user:any) => {\r\n                        return (\r\n                        <th>\r\n                            { user[\"userName\"] ? user[\"userName\"] : 0 }\r\n                        </th>\r\n                        )\r\n                    } )\r\n                }\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    categories.map( (row: any, rowInd: any) => {\r\n                        return (\r\n                        <tr>\r\n                            <td>\r\n                                { row[\"name\"] }\r\n                            </td>\r\n                            { \r\n                              allAnswers.map( (user:any, colInd) => {\r\n                                  return (\r\n                                      <td \r\n                                        id={ `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}` }\r\n                                        onClick={ () => {\r\n                                            // console.log(\"clicked\")\r\n                                            // console.log(playerData)\r\n                                            if (playerData[\"gameLeader\"]) {\r\n                                                // console.log(\"clickedHandler\")\r\n                                                handleMark(colInd, rowInd, `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}`)\r\n                                            }\r\n                                        }\r\n                                        }\r\n                                        className={  markedRows.includes('rowIndIS' + rowInd.toString() + 'ANDcolIndIS' + colInd.toString() ) ? \"accepted\" : \"\" }\r\n                                      >\r\n                                          { user[\"answers\"][rowInd][\"answer\"] }\r\n                                      </td>\r\n                                  )\r\n                              } )\r\n                            }\r\n                        </tr>\r\n                        )\r\n                    } )\r\n                }\r\n            </tbody>\r\n            <tfoot>\r\n                <tr>\r\n                    <th>\r\n                        Score\r\n                    </th>\r\n                    {\r\n                        allAnswers.map( (user:any, ind: any) => {\r\n                            return (\r\n                            <th>\r\n                                { \r\n                                    userScores.map((userScore:any)=>{\r\n                                        if (userScore[\"userID\"] == user[\"userID\"]){\r\n                                            return userScore[\"score\"]\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </th>\r\n                            )\r\n                        } )\r\n                    }\r\n                </tr>\r\n            </tfoot>\r\n        </table>\r\n        \r\n        \r\n        { playerData[\"gameLeader\"] ? <div>\r\n                <p>Play again?</p>\r\n                <button onClick={()=>{\r\n                    handleStartNewGame()\r\n                }}>New game</button>\r\n            </div> : <></>\r\n        }\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesScoring;","import React from 'react';\r\n\r\nfunction PictureGuess() {\r\n  return (\r\n    <div className=\"project\">\r\n        <p>This is picture guess</p>\r\n        <p>TBC...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PictureGuess;","import React, { useState } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n// import WebSocketProvider, { WebSocketContext } from \"./WebSocket\";\r\nimport { Provider, useSelector, useDispatch } from 'react-redux';\r\nimport GamesList from \"./components/GamesList\";\r\nimport Header from \"./components/Header\";\r\nimport Categories from \"./categories/categories\";\r\nimport CategoriesJoin from \"./categories/CategoriesJoin\"\r\nimport CategoriesWaiting from \"./categories/CategoriesWaiting\";\r\nimport CategoriesGame from \"./categories/CategoriesGame\";\r\nimport CategoriesScoring from \"./categories/CategoriesScoring\";\r\nimport PictureGuess from \"./pictureguess/Pictureguess\";\r\nimport './App.css';\r\nimport {SocketContext, socket} from \"./context/socket2\"\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\nfunction App() {\r\n\r\n    return (\r\n        <SocketContext.Provider value={socket}>\r\n            <div className=\"App\">\r\n                <div className=\"header\">\r\n                    <Header/>\r\n                </div>\r\n                \r\n                <div className=\"main-content\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={GamesList}/>\r\n                        \r\n                        <Route path=\"/categories\" component={Categories}/>\r\n                        <Route exact path=\"/join-categories/:gameID\" component={CategoriesJoin}/>\r\n                        <Route path=\"/categories-waiting-room\" component={CategoriesWaiting}/>\r\n                        <Route path=\"/categories-game-room\" component={CategoriesGame}/>\r\n                        <Route path=\"/categories-scoring\" component={CategoriesScoring}/>\r\n                        \r\n                        <Route path=\"/picture-guess\" component={PictureGuess}/>\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </SocketContext.Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}