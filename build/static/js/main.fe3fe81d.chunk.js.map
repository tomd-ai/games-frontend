{"version":3,"sources":["actions.ts","reducer.ts","store.ts","components/GameItem.tsx","gamedata.js","components/GamesList.tsx","components/Header.tsx","hooks/useLocalStorage.js","categories/categories.tsx","categories/CategoriesJoin.tsx","context/socket2.js","categories/CategoriesWaiting.tsx","categories/CategoriesGame.tsx","categories/CategoriesScoring.tsx","pictureguess/Pictureguess.tsx","App.tsx","reportWebVitals.ts","serviceWorker.js","index.tsx"],"names":["CREATE_ROOM_SUCCESS","JOIN_ROOM_SUCCESS","SET_USERNAME","UPDATE_CHAT_LOG","initialState","room","chatLog","username","createStore","state","action","type","payload","update","roomId","id","data","composeWithDevTools","applyMiddleware","thunk","BlogItem","blogData","className","to","name","allGames","GamesList","map","game","GameItem","Header","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","categoriesReducer","list","filter","item","concat","answer","category","sampleCategories","Error","randomLetter","String","fromCharCode","Math","floor","random","CategoriesStart","gameLetter","setLetter","useReducer","categoryList","dispatchListData","userNameError","setUserNameError","categoryError","setCategoryError","history","useHistory","useDispatch","gameID","setGameID","userName","setUserName","setGameData","setPlayerData","gameSessionID","setGameSessionID","userID","setUserID","returning","setReturning","setPlayerList","onClick","newLetter","defaultValue","onChange","e","event","target","console","log","uuidv4","placeholder","newUserID","newGameSessionID","newGameID","toString","newReturning","handleUserNameChange","length","push","CategoriesJoin","props","gameIDPath","location","split","reverse","socket","io","SocketContext","React","createContext","CategoriesWaiting","categoriesSocket","useContext","copySuccess","setCopySuccess","gameData","playerData","playerList","setJoined","handleJoinedRoom","useCallback","handleNewPlayer","handleStartGame","handleSendStart","emit","on","off","navigator","clipboard","writeText","focus","linkToClipboard","player","gameLeader","CategoriesGame","minutes","setMinutes","seconds","setSeconds","answers","setAnswers","stopBus","setBus","handleStopBus","handleTimerTick","handleForceEndGame","style","fontSize","paddingBottom","newAnswers","numAnswers","ans","charAt","toLowerCase","handleChange","CategoriesScoring","categories","allAnswers","setAllAnswers","userScores","setUserScores","markedRows","setMarkedRows","handleAnswerTable","handleUpdateScore","handleMark","rowInd","colInd","rowId","handleStartNewGame","handleNewGameRequested","user","row","includes","ind","userScore","PictureGuess","App","store","Provider","exact","path","component","Categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fe3fe81d.chunk.js","sourcesContent":["// actions.js\r\nimport axios from 'axios';\r\nimport { API_BASE } from './config';\r\n\r\n// These are our action types\r\nexport const CREATE_ROOM_REQUEST = \"CREATE_ROOM_REQUEST\"\r\nexport const CREATE_ROOM_SUCCESS = \"CREATE_ROOM_SUCCESS\"\r\nexport const CREATE_ROOM_ERROR = \"CREATE_ROOM_ERROR\"\r\n\r\n\r\n// Now we define actions\r\nexport function createRoomRequest(){\r\n    return {\r\n        type: CREATE_ROOM_REQUEST\r\n    }\r\n}\r\n\r\nexport function createRoomSuccess(payload:any){\r\n    return {\r\n        type: CREATE_ROOM_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function createRoomError(error:any){\r\n    return {\r\n        type: CREATE_ROOM_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport function createRoom(roomName:any) {\r\n    return async function (dispatch:any) {\r\n        dispatch(createRoomRequest());\r\n        try{\r\n            const response = await axios.get(`${API_BASE}/room?name=${roomName}`)\r\n            dispatch(createRoomSuccess(response.data));\r\n        }catch(error){\r\n            dispatch(createRoomError(error));\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const JOIN_ROOM_REQUEST = \"JOIN_ROOM_REQUEST\"\r\nexport const JOIN_ROOM_SUCCESS = \"JOIN_ROOM_SUCCESS\"\r\nexport const JOIN_ROOM_ERROR = \"JOIN_ROOM_ERROR\"\r\n\r\nexport function joinRoomRequest(){\r\n    return {\r\n        type: JOIN_ROOM_REQUEST\r\n    }\r\n}\r\n\r\nexport function joinRoomSuccess(payload:any){\r\n    return {\r\n        type: JOIN_ROOM_SUCCESS,\r\n        payload\r\n    }\r\n}\r\n\r\nexport function joinRoomError(error:any){\r\n    return {\r\n        type: JOIN_ROOM_ERROR,\r\n        error\r\n    }\r\n}\r\n\r\nexport function joinRoom(roomId:any) {\r\n    return async function (dispatch:any) {\r\n        dispatch(joinRoomRequest());\r\n        try{\r\n            const response = await axios.get(`${API_BASE}/room/${roomId}`)\r\n            dispatch(joinRoomSuccess(response.data));\r\n        }catch(error){\r\n            dispatch(joinRoomError(error));\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_USERNAME = \"SET_USERNAME\"\r\n\r\nexport function setUsername(username:any){\r\n    return {\r\n        type: SET_USERNAME,\r\n        username\r\n    }\r\n}\r\n\r\nexport const SEND_MESSAGE_REQUEST = \"SEND_MESSAGE_REQUEST\"\r\nexport const UPDATE_CHAT_LOG = \"UPDATE_CHAT_LOG\"\r\n\r\nexport function updateChatLog(update:any){\r\n    return {\r\n        type: UPDATE_CHAT_LOG,\r\n        update\r\n    }\r\n}\r\n\r\nexport {}","import { CREATE_ROOM_SUCCESS, JOIN_ROOM_SUCCESS, SET_USERNAME, UPDATE_CHAT_LOG} from './actions';\r\n\r\nconst initialState = {\r\n    room: null,\r\n    chatLog: [],\r\n    username: null\r\n}\r\n\r\nexport default function chatReducer(state:any, action:any) {\r\n    if (typeof state === 'undefined') {\r\n        return initialState\r\n    }\r\n\r\n    switch(action.type){\r\n        case CREATE_ROOM_SUCCESS:\r\n            state.room = action.payload;\r\n            break;\r\n        \r\n        case JOIN_ROOM_SUCCESS:\r\n            state.room = action.payload;\r\n            break;\r\n\r\n        case SET_USERNAME:\r\n            state.username = action.username;\r\n            break;\r\n\r\n        case UPDATE_CHAT_LOG:\r\n            if(state.room !== null && action.update.roomId === state.room.id){\r\n                state.chatLog = [...state.chatLog, action.update.data];\r\n            }\r\n            break;\r\n    \r\n    }\r\n\r\n    return state\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport chatReducer from './reducer'\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport default createStore(chatReducer, composeWithDevTools(applyMiddleware(thunk)));","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\ntype blogData = {\r\n    id : string,\r\n    name : string\r\n}\r\n\r\n\r\nfunction BlogItem(blogData: blogData) {\r\n    return (\r\n      <div className=\"blog-item\">\r\n          <Link to={blogData.id}>{blogData.name}</Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default BlogItem;","var allGames = [\r\n    {\r\n        \"id\" : \"categories\",\r\n        \"name\" : \"Categories\",\r\n        \"url\" : \"categories\"\r\n    },\r\n    {\r\n        \"id\" : \"pictureguess\",\r\n        \"name\" : \"Picture Guess\",\r\n        \"url\" : \"picture-guess\"\r\n    },\r\n\r\n]\r\n\r\nexport default allGames;","import React from 'react';\r\nimport GameItem from \"./GameItem\";\r\nimport allGames from \"../gamedata\";\r\n\r\ntype game = {\r\n    id : string,\r\n    name : string\r\n}\r\n\r\nfunction GamesList() {\r\n    return <div className=\"blog-list\">\r\n        <div className=\"about-message\">\r\n          <p>Click an option below to start a game!</p>\r\n        </div>\r\n        { allGames.map( (game: game) => <GameItem id={game.id} name={game.name}  />  )}\r\n      </div>\r\n    \r\n  }\r\n  \r\n  export default GamesList;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nfunction Header() {\r\n    return (\r\n      <div className=\"header\">\r\n        <Link className=\"header-item\" to=\"/\">Tom Davenport</Link>\r\n        <Link className=\"header-item\" to=\"/\">Return to game list</Link>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Header;","  \r\nimport { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'categories-game-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue === \"undefined\") return \"\"\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import React, {useState, useReducer, useContext, useEffect} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport Category from \"../models\";\r\nimport sampleCategories from \"./sampleCategories.json\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport store from \"../store\";\r\nimport {createRoom, setUsername, joinRoom} from \"../actions\";\r\nimport WebsocketProvider, {WebSocketContext} from \"../WebSocket\";\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\n\r\nconst categoriesReducer = (state:any, action:any) => {\r\n    switch (action.type) {\r\n        case 'REMOVE_ITEM':\r\n            return ({\r\n            ...state,\r\n            list : state.list.filter((item:Category) => item.key !== action.key)\r\n            })\r\n        case 'ADD_ITEM':\r\n            return ({\r\n                ...state,\r\n                list : state.list.concat({name: action.name, key: action.key, answer: \"\"})\r\n            })\r\n        case 'UPDATE_ITEM':\r\n            return ({\r\n                ...state,\r\n                list : state.list.map(\r\n                    (category: Category) => {\r\n                        if (action.key === category.key){\r\n                            const updatedItem = {\r\n                                ...category,\r\n                                name : action.name\r\n                            };\r\n                            return updatedItem\r\n                        }else{\r\n                            return category\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n        case 'RESET_LIST':\r\n            return ({\r\n                ...state,\r\n                list : sampleCategories\r\n            })\r\n      default:\r\n        throw new Error();\r\n    }\r\n};\r\n\r\nfunction randomLetter(){\r\n    return String.fromCharCode(65+Math.floor(Math.random() * 26))\r\n}\r\n\r\n\r\nfunction CategoriesStart() {\r\n\r\n    // random letter\r\n    const [gameLetter, setLetter] = useState(randomLetter())\r\n    const [categoryList, dispatchListData] =  useReducer(categoriesReducer, {\r\n        list: sampleCategories\r\n    });\r\n    const [userNameError, setUserNameError] = useState(false)\r\n    const [categoryError, setCategoryError] = useState(false)\r\n    \r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n    // const ws = useContext(WebSocketContext);\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\r\n    let [userName, setUserName] = useLocalStorage('userName', '')\r\n    let [gameData, setGameData] = useLocalStorage('gameData', {})\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\r\n    let [userID, setUserID] = useLocalStorage('userID', '')\r\n    let [returning, setReturning] = useLocalStorage('returning', false)\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\r\n\r\n    useEffect(() => {\r\n        return setGameData({\r\n            \"categories\" : categoryList.list,\r\n            \"gameLetter\" : gameLetter\r\n        })\r\n        \r\n      }, [categoryList]);\r\n\r\n\r\n    function newLetter(){\r\n        \r\n        let newLetter = randomLetter()\r\n        \r\n        setLetter(newLetter)\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : newLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    // category list\r\n    \r\n\r\n    function handleChange(event : any){\r\n        \r\n        dispatchListData({\"type\" : \"UPDATE_ITEM\", key: event.target.id, name : event.target.value })\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    \r\n    }\r\n  \r\n    function handleRemove(key : string){\r\n        dispatchListData({type:\"REMOVE_ITEM\", \"key\" : key })\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    function handleAdd(){\r\n        console.log(\"clicked handle\")\r\n        dispatchListData({type:\"ADD_ITEM\", key: uuidv4()})\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    function handleReset(){\r\n        console.log(\"clicked reset\")\r\n        dispatchListData({type:\"RESET_LIST\"})\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    // user\r\n    \r\n    function handleUserNameChange(event:any){\r\n        \r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\r\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\r\n        var newReturning = returning ? returning : false\r\n\r\n        setGameID(newGameID)\r\n        setGameSessionID(newGameSessionID)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        setPlayerList([{\r\n            userID,\r\n            userName : event.target.value,\r\n            \"gameLeader\" : true\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value,\r\n            \"gameLeader\" : true\r\n        }\r\n        )\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    // submit form\r\n\r\n    \r\n\r\n\r\n    function startGame(event:any){\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n        \r\n            // check that the player has at least one category\r\n        setCategoryError(categoryList.list.length === 0) \r\n        setUserNameError(!userName)\r\n\r\n        // check that the player has added a username\r\n        if ((categoryList.list.length === 0) || (!userName)){\r\n            return\r\n        }\r\n        else {\r\n\r\n            \r\n            history.push(\r\n                {\r\n                    \"pathname\" : '/categories-waiting-room',\r\n                }\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\r\n        <p>Letter to guess : <span className=\"gameLetter\" id=\"gameLetter\">{gameLetter}</span></p>\r\n        <button id=\"newLetter\" onClick={()=>{newLetter()}}>Change letter</button>\r\n        <p>As the game leader, it's up to you to set the game up!</p>\r\n        <p>Click a category to change the name, or the button to remove it. </p>\r\n        <p>1. (Optional) Change or add more categories:</p>\r\n        { \r\n            categoryList.list.map(\r\n                (category: Category) => {\r\n                    return (\r\n                    <div className=\"category\">\r\n                        <input\r\n                            type=\"text\" \r\n                            id={category.key} \r\n                            defaultValue={category.name}\r\n                            onChange={(e)=>handleChange(e)}\r\n                        />\r\n                        <button onClick={()=>handleRemove(category.key)}>\r\n                            Remove\r\n                        </button>\r\n                    </div>\r\n                    )\r\n                }\r\n            )\r\n        }\r\n        <button type=\"button\" onClick={() =>handleAdd()}> Add category </button>\r\n        <button type=\"button\" onClick={() =>handleReset()}> Reset to default </button>\r\n        <p className={ categoryError ? \"showError\" : \"hideError\" }>Please have at least one category before continuing.</p>\r\n        <p>2. Enter your user name:</p>\r\n        \r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName} \r\n        />\r\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\r\n        <p>3. Click start game:</p>\r\n        <button className=\"start-game\" onClick={(e)=>{startGame(e)}}>Start Game</button>\r\n        {/* <p>Looking to join someone else's game?</p>\r\n        <Link to='join-game'>\r\n            <button type=\"button\">Join an existing game</button>\r\n        </Link> */}\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesStart;","\r\nimport React, {useState, useRef, useContext} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport WebsocketProvider, {WebSocketContext} from \"../WebSocket\";\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction CategoriesJoin(props:any) {\r\n\r\n    const history = useHistory();\r\n    \r\n    const [userNameError, setUserNameError] = useState(false)\r\n\r\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\r\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\r\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\r\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\r\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\r\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\r\n    \r\n    function handleUserNameChange(event:any){\r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newReturning = returning ? returning : false\r\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\r\n\r\n        setGameID(gameIDPath)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        \r\n        setPlayerList([{\r\n            userID,\r\n            userName:event.target.value\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value\r\n        }\r\n        )\r\n    }\r\n\r\n    \r\n\r\n    function joinGameRoom(){\r\n        setUserNameError(!userName)\r\n        // check that the player has added a username\r\n        if (!userName){\r\n            return\r\n        }\r\n        \r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-waiting-room'\r\n            }\r\n        )\r\n\r\n        \r\n    }\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Join game</h1>\r\n\r\n        <p>Enter a username:</p>\r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName} \r\n        />\r\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\r\n        <br/>\r\n        <button onClick={()=>joinGameRoom()}>Join game</button>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesJoin;","import {io} from \"socket.io-client\";\r\nimport React from 'react';\r\n\r\nexport const socket = io('https://tom-games.azurewebsites.net/categories');\r\n\r\nexport const SocketContext = React.createContext(socket);\r\n","\r\nimport React, {useState, useRef, useContext, useEffect, useCallback} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport {SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction CategoriesWaiting(props:any) {\r\n    \r\n    const categoriesSocket = useContext(SocketContext)\r\n    const [copySuccess, setCopySuccess] = useState('');\r\n    const history = useHistory();\r\n\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n    let [joined, setJoined] = useState(false);\r\n\r\n    const handleJoinedRoom = useCallback(()=>{\r\n        setJoined(true)\r\n        console.log(true)\r\n    }, [])\r\n\r\n    const handleNewPlayer = useCallback( (data:any) =>{\r\n        setPlayerList(data['playerList'])\r\n        setGameData(data[\"gameData\"])\r\n    }, [])\r\n\r\n    const handleStartGame = useCallback((data:any)=>{\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-game-room'\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const handleSendStart = useCallback(()=>{\r\n        console.log(\"START!\")\r\n        categoriesSocket.emit(\"send-start\", {gameID})\r\n        categoriesSocket.emit(\"start-timer\", {gameID})\r\n    }, [])\r\n\r\n    useEffect( ()=>{\r\n        \r\n        categoriesSocket.on('connect',\r\n            () => {\r\n                console.log(\"connected categories\")\r\n            }\r\n        );\r\n\r\n        if (gameID){\r\n            console.log(\"joining room\")\r\n\r\n            categoriesSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n        }\r\n\r\n        categoriesSocket.on(\"joined-room\", handleJoinedRoom)\r\n        categoriesSocket.on(\"new-player\",handleNewPlayer);\r\n        categoriesSocket.on(\"start-game\", handleStartGame)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"joined-room\", handleJoinedRoom);\r\n            categoriesSocket.off(\"new-player\", handleNewPlayer);\r\n            categoriesSocket.off(\"start-game\", handleStartGame);\r\n          };\r\n\r\n    }, [categoriesSocket, handleJoinedRoom, handleNewPlayer, handleStartGame])\r\n    \r\n\r\n    // direct link \r\n    function linkToClipboard(e:any){\r\n        navigator.clipboard.writeText(`https://tomd-ai.github.io/games-frontend#/join-categories/${gameID}`)\r\n        // This is just personal preference.\r\n        // I prefer to not show the whole text area selected.\r\n        e.target.focus();\r\n        setCopySuccess('Copied!');\r\n    }\r\n\r\n\r\n    \r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Categories</h1>\r\n        <h4>Waiting room</h4>\r\n\r\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\r\n        \r\n        <p>Your game id is: <span className=\"gameID\">{gameID}</span></p>\r\n        <button onClick={(e)=>{linkToClipboard(e)}}>Click to copy direct link</button>\r\n        <p>{copySuccess}</p>\r\n\r\n        <p>Current players:</p>\r\n        <ol>\r\n        {\r\n            playerList.map(\r\n                    (player: Player ) => {\r\n                        return (\r\n                        <li className=\"player\" key={player.userID}>\r\n                        {player.userName}\r\n                        {player.gameLeader ?  \" (Game leader)\" : \"\" }\r\n                        </li>\r\n                        )\r\n                    }\r\n                )\r\n        }\r\n        </ol>\r\n        { playerData.gameLeader && <div> \r\n        <p>3. Click start game:</p>\r\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\r\n        </div>\r\n        }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesWaiting;","import React, {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport WebsocketProvider, {WebSocketContext} from \"../WebSocket\";\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Category from \"../models\";\r\nimport {SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\ntype Answers = [\r\n    {\r\n        key : string,\r\n        name: string,\r\n        answer? :string\r\n    }\r\n]\r\n\r\nfunction CategoriesGame(props:any) {\r\n\r\n    \r\n    const history = useHistory();\r\n    const categoriesSocket = useContext(SocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n\r\n    let [minutes, setMinutes] = useState(\"\")\r\n    let [seconds, setSeconds] = useState(\"\")\r\n    \r\n    let [answers, setAnswers] = useState(gameData[\"categories\"])\r\n    let [gameLetter, setGameLetter] = useState(gameData[\"gameLetter\"])\r\n    let [stopBus, setBus] = useState(false)\r\n\r\n    // const getGameLetter = () => {\r\n    //     setGameLetter(gameData[\"gameLetter\"])\r\n    //     return gameLetter\r\n    // }\r\n\r\n    const handleChange = (e:any) =>{\r\n\r\n        let newAnswers: Answers[] =[]\r\n        let numAnswers = 0\r\n        \r\n        newAnswers = answers.map( (ans:any) =>{\r\n            if (e.target.id == ans.key){\r\n                ans[\"answer\"] = e.target.value\r\n                \r\n                numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\r\n            }else{\r\n                if (ans[\"answer\"]){\r\n\r\n                    numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\r\n                }\r\n            }\r\n            return ans\r\n        })\r\n\r\n        if (numAnswers == answers.length){\r\n            setBus(true)\r\n        }else{\r\n            setBus(false)\r\n        }\r\n        setAnswers(newAnswers)\r\n    }\r\n\r\n\r\n    const handleStopBus = useCallback(()=>{\r\n        console.log(\" handle send answers\")\r\n        setBus(true)\r\n        categoriesSocket.emit(\"send-answers\", {\r\n            gameID,\r\n            userID,\r\n            userName,\r\n            answers,\r\n            \"stopBus\" : true\r\n        })\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-scoring',\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const handleTimerTick = useCallback((data: any)=>{\r\n        \r\n        setMinutes(data[\"minutes\"])\r\n        setSeconds(data[\"seconds\"])\r\n        \r\n        if ( data[\"minutes\"] == 0 && data[\"seconds\"] == 0 ){\r\n            handleForceEndGame()\r\n        }\r\n    \r\n    }, [])\r\n\r\n    const handleForceEndGame = useCallback(()=>{\r\n        \r\n        categoriesSocket.emit(\"send-answers\", {\r\n            gameID,\r\n            userID,\r\n            userName,\r\n            answers,\r\n            stopBus : false\r\n        })\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-scoring',\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    \r\n    useEffect( ()=>{\r\n\r\n        categoriesSocket.on(\"send-answers\", handleForceEndGame);\r\n        categoriesSocket.on(\"timer-tick\", handleTimerTick);\r\n        categoriesSocket.on(\"end-game\", handleForceEndGame)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"send-answers\", handleForceEndGame);\r\n            categoriesSocket.off(\"timer-tick\", handleTimerTick);\r\n            categoriesSocket.off(\"end-game\", handleForceEndGame)\r\n          };\r\n\r\n    }, [categoriesSocket, handleForceEndGame, handleTimerTick])\r\n\r\n\r\n\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Let's play</h1>        \r\n        <p>Time left: {minutes ? minutes.toString() + \" minute\" : \"\" } { seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\r\n        <p>Enter something for each category that starts with:</p>\r\n        <p><span className=\"gameLetter\" style={{fontSize: \"55px\"}}>{gameLetter}</span></p>\r\n\r\n        <table style={{paddingBottom: \"20px\"}}>\r\n        <tr>\r\n            <th>Category</th>\r\n            <th>Answer</th>\r\n            <th>{/* Error */}</th>\r\n        </tr>\r\n        {answers.map(\r\n                (category: Category) => {\r\n                    return (\r\n                    <tr>\r\n                        <td>{category.name}</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\" \r\n                                id={category.key} \r\n                                defaultValue={ category[\"answer\"] ? category[\"answer\"] : '' }\r\n                                onChange={(e)=>handleChange(e)}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <p className={ category[\"answer\"] && category[\"answer\"].charAt(0).toLowerCase() !== gameLetter.toLowerCase() ? \"showError\" : \"hideError\" }>Category has to start with {gameLetter}!</p>\r\n                        </td>\r\n                    </tr>\r\n                    )\r\n                }\r\n            )\r\n        }\r\n        <tr>\r\n            <td>\r\n            </td>\r\n            <td>\r\n            { stopBus ? <button id=\"stop\" onClick={()=>handleStopBus()}>Stop!</button> : <></>}\r\n            </td>\r\n            <td>\r\n            </td>\r\n        </tr>\r\n        </table>\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesGame;","import React, {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport WebsocketProvider, {WebSocketContext} from \"../WebSocket\";\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Category from \"../models\";\r\nimport {socket, SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\ntype AnswerList = [\r\n    gameID : string,\r\n    gameSessionID : string,\r\n    userID : string,\r\n    userName : string,\r\n    answers : Answers[]\r\n]\r\n\r\ntype Answers = [\r\n    {\r\n        key : string,\r\n        name: string,\r\n        answer? :string\r\n    }\r\n]\r\n\r\ntype MarkedRows = [\r\n    string[] \r\n]\r\n\r\nfunction CategoriesScoring(props:any) {\r\n\r\n    \r\n    const history = useHistory();\r\n    const categoriesSocket = useContext(SocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n\r\n    let [categories, setCategories] = useState(gameData[\"categories\"])\r\n    let [allAnswers , setAllAnswers] = useState<AnswerList[]>([]); //useState([])\r\n    \r\n    let [userScores, setUserScores] = useState<any[]>([]); \r\n    let [markedRows, setMarkedRows] = useState<string[]>([]); \r\n\r\n    const handleAnswerTable = useCallback( (data:any) => {\r\n        setAllAnswers(data)\r\n    }, [])\r\n\r\n    const handleUpdateScore = useCallback((data:any)=>{\r\n        setMarkedRows(data[\"rowIds\"])\r\n        setUserScores(data[\"userScores\"])\r\n    }, [])\r\n\r\n    const handleMark = useCallback((rowInd : number, colInd: number, rowId : string)=>{\r\n        categoriesSocket.emit(\"mark-answer\", {\r\n            gameID,\r\n            rowId,\r\n            colInd,\r\n            rowInd\r\n        })\r\n    }, [])\r\n\r\n    const handleStartNewGame = useCallback( () => {\r\n        // so the game leader can make any updates they want\r\n        categoriesSocket.emit(\"request-new-game\", {\r\n            gameID\r\n        })\r\n        console.log(returning)\r\n        returning = setReturning(true)\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories',\r\n            }\r\n        )\r\n    }, []);\r\n\r\n    const handleNewGameRequested = useCallback( ()=> {\r\n        // to return players to the waiting room\r\n\r\n        setReturning(true)\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : \"/categories-waiting-room\"\r\n            }\r\n        )\r\n    }, [])\r\n\r\n\r\n\r\n    \r\n    useEffect( ()=>{\r\n\r\n        console.log(allAnswers)\r\n        \r\n        if (allAnswers.length == 0){\r\n            console.log(\"doing this once\")\r\n            categoriesSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n            categoriesSocket.emit(\"get-all-answers\", {\r\n                gameID\r\n            })\r\n        }\r\n        \r\n        categoriesSocket.on(\"get-answers\", handleAnswerTable);\r\n        categoriesSocket.on(\"update-scores\", handleUpdateScore);\r\n        categoriesSocket.on(\"start-new-game\", handleNewGameRequested);\r\n\r\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"get-answers\", handleAnswerTable);\r\n            categoriesSocket.off(\"update-scores\", handleUpdateScore);\r\n            categoriesSocket.off(\"start-new-game\", handleNewGameRequested);\r\n          };\r\n\r\n    }, [categoriesSocket, handleAnswerTable, handleUpdateScore, handleNewGameRequested])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(allAnswers)\r\n    }, [allAnswers])\r\n\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Time to score!</h1>        \r\n        <p>The game leader will now mark the answers:</p>\r\n        <table>\r\n            <thead>\r\n                <th>\r\n                    Category\r\n                </th>\r\n                {\r\n                    allAnswers.map( (user:any) => {\r\n                        return (\r\n                        <th>\r\n                            { user[\"userName\"] ? user[\"userName\"] : 0 }\r\n                        </th>\r\n                        )\r\n                    } )\r\n                }\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    categories.map( (row: any, rowInd: any) => {\r\n                        return (\r\n                        <tr>\r\n                            <td>\r\n                                { row[\"name\"] }\r\n                            </td>\r\n                            { \r\n                              allAnswers.map( (user:any, colInd) => {\r\n                                  return (\r\n                                      <td \r\n                                        id={ `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}` }\r\n                                        onClick={ () => {\r\n                                            // console.log(\"clicked\")\r\n                                            // console.log(playerData)\r\n                                            if (playerData[\"gameLeader\"]) {\r\n                                                // console.log(\"clickedHandler\")\r\n                                                handleMark(colInd, rowInd, `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}`)\r\n                                            }\r\n                                        }\r\n                                        }\r\n                                        className={  markedRows.includes('rowIndIS' + rowInd.toString() + 'ANDcolIndIS' + colInd.toString() ) ? \"accepted\" : \"\" }\r\n                                      >\r\n                                          { user[\"answers\"][rowInd][\"answer\"] }\r\n                                      </td>\r\n                                  )\r\n                              } )\r\n                            }\r\n                        </tr>\r\n                        )\r\n                    } )\r\n                }\r\n            </tbody>\r\n            <tfoot>\r\n                <tr>\r\n                    <th>\r\n                        Score\r\n                    </th>\r\n                    {\r\n                        allAnswers.map( (user:any, ind: any) => {\r\n                            return (\r\n                            <th>\r\n                                { \r\n                                    userScores.map((userScore:any)=>{\r\n                                        if (userScore[\"userID\"] == user[\"userID\"]){\r\n                                            return userScore[\"score\"]\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </th>\r\n                            )\r\n                        } )\r\n                    }\r\n                </tr>\r\n            </tfoot>\r\n        </table>\r\n        \r\n        \r\n        { playerData[\"gameLeader\"] ? <div>\r\n                <p>Play again?</p>\r\n                <button onClick={()=>{\r\n                    handleStartNewGame()\r\n                }}>New game</button>\r\n            </div> : <></>\r\n        }\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesScoring;","import React from 'react';\r\n\r\nfunction PictureGuess() {\r\n  return (\r\n    <div className=\"project\">\r\n        <p>This is picture guess</p>\r\n        <p>TBC...</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PictureGuess;","import React, { useState } from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n// import WebSocketProvider, { WebSocketContext } from \"./WebSocket\";\r\nimport { Provider, useSelector, useDispatch } from 'react-redux';\r\nimport store from './store';\r\nimport GamesList from \"./components/GamesList\";\r\nimport Header from \"./components/Header\";\r\nimport Categories from \"./categories/categories\";\r\nimport CategoriesJoin from \"./categories/CategoriesJoin\"\r\nimport CategoriesWaiting from \"./categories/CategoriesWaiting\";\r\nimport CategoriesGame from \"./categories/CategoriesGame\";\r\nimport CategoriesScoring from \"./categories/CategoriesScoring\";\r\nimport PictureGuess from \"./pictureguess/Pictureguess\";\r\nimport './App.css';\r\nimport {SocketContext, socket} from \"./context/socket2\"\r\nimport useLocalStorage from \"./hooks/useLocalStorage\";\r\nfunction App() {\r\n\r\n    return (\r\n        <Provider store={store}>\r\n            <SocketContext.Provider value={socket}>\r\n                <div className=\"App\">\r\n                    <div className=\"header\">\r\n                        <Header/>\r\n                    </div>\r\n                    \r\n                    <div className=\"main-content\">\r\n                        <Switch>\r\n                            <Route exact path=\"/\" component={GamesList}/>\r\n                            \r\n                            <Route path=\"/categories\" component={Categories}/>\r\n                            <Route exact path=\"/join-categories/:gameID\" component={CategoriesJoin}/>\r\n                            <Route path=\"/categories-waiting-room\" component={CategoriesWaiting}/>\r\n                            <Route path=\"/categories-game-room\" component={CategoriesGame}/>\r\n                            <Route path=\"/categories-scoring\" component={CategoriesScoring}/>\r\n                            \r\n                            <Route path=\"/picture-guess\" component={PictureGuess}/>\r\n                        </Switch>\r\n                    </div>\r\n                </div>\r\n            </SocketContext.Provider>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n        <App />\r\n    </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}