{"version":3,"sources":["components/GameItem.tsx","gamedata.js","components/GamesList.tsx","components/Header.tsx","hooks/useLocalStorage.js","categories/categories.tsx","categories/CategoriesJoin.tsx","constants.tsx","context/socket2.js","categories/CategoriesWaiting.tsx","categories/CategoriesGame.tsx","categories/CategoriesScoring.tsx","pictureguess/Pictureguess.tsx","wordGrid/WordGridSetup.tsx","wordGrid/WordGridJoin.tsx","wordGrid/WordGridWaiting.tsx","actions/actions.ts","wordGrid/WordGridScoring.tsx","wordGrid/WordGridGame.tsx","wordGridSolver/wordGridSolver.tsx","App.tsx","reportWebVitals.ts","reducers/wordgrid.ts","reducers/wordgrid-scoring.ts","reducers/wordgrid-game-data.ts","reducers/wordgrid-solver-data.ts","reducers/index.ts","index.tsx"],"names":["BlogItem","blogData","to","id","className","name","style","fontSize","biline","allGames","GamesList","map","game","GameItem","url","Header","location","useLocation","pathname","useLocalStorage","key","initialValue","prefixedKey","useState","jsonValue","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","categoriesReducer","state","action","type","list","filter","item","concat","answer","category","sampleCategories","Error","randomLetter","String","fromCharCode","Math","floor","random","CategoriesStart","gameLetter","setLetter","useReducer","categoryList","dispatchListData","userNameError","setUserNameError","categoryError","setCategoryError","history","useHistory","gameID","setGameID","userName","setUserName","setGameData","setPlayerData","gameSessionID","setGameSessionID","userID","setUserID","returning","setReturning","setPlayerList","onClick","newLetter","defaultValue","onChange","e","event","target","console","log","uuidv4","placeholder","newUserID","newGameSessionID","newGameID","toString","newReturning","handleUserNameChange","length","push","CategoriesJoin","props","gameIDPath","split","reverse","SOCKETURL","includes","window","hostname","socket","io","SocketContext","React","createContext","picturesocket","PictureSocketContext","wordGridsocket","wordGridSocketContext","wordGridSolversocket","wordGridSolverSocketContext","CategoriesWaiting","categoriesSocket","useContext","copySuccess","setCopySuccess","gameData","playerData","playerList","setJoined","handleJoinedRoom","useCallback","handleNewPlayer","data","handleStartGame","handleSendStart","emit","on","off","baseJoinLink","navigator","clipboard","writeText","focus","linkToClipboard","player","ind","gameLeader","reload","CategoriesGame","minutes","setMinutes","seconds","setSeconds","answers","setAnswers","stopBus","setBus","handleStopBus","handleTimerTick","handleForceEndGame","paddingBottom","newAnswers","numAnswers","ans","charAt","toLowerCase","handleChange","CategoriesScoring","categories","allAnswers","setAllAnswers","userScores","setUserScores","markedRows","setMarkedRows","handleAnswerTable","handleUpdateScore","handleMark","rowInd","colInd","rowId","handleStartNewGame","handleNewGameRequested","user","row","userScore","PictureGuess","pictureSocket","joinStatus","setJoinStatus","startButtonStatus","getGameID","playerStatus","currentWord","setCurGuess","currentPlayer","nextPlayer","width","height","handleGuessChange","WordGridSetup","onKeyPress","WordGridJoin","WordGridWaiting","wordGridSocket","dispatch","useDispatch","useSelector","s","wordGridGameData","payload","handleBootedPlayer","handleBootPlayer","bootPlayerID","gamesWon","totalPoints","WordGridScoring","counter","setCounter","newGame","useRef","newBoard","isInitialMount","allDictionaryAnswers","setAllDictionaryAnswers","highlightedCells","setHighlightedCells","current","dictionaryAnswers","highlightCells","path","deHighlightCells","borderRight","borderBottom","answerRow","playerScore","arrLengths","longestArrLen","max","rowList","forEach","i","cell","score","onMouseEnter","onMouseLeave","word","drawAnswers","tableLayout","A1","A2","A3","A4","B1","B2","B3","B4","C1","C2","C3","C4","D1","D2","D3","D4","definition","WordGridGame","newWord","setNewWord","errorStatus","setErrorStatus","errorStatusMessage","setErrorStatusMessage","enteredWords","wordGridEnteredWords","rotatePos","setRotatePos","enteredWordsRef","submitAnswers","wordList","addWord","guess","handleAnswerRes","renderGrid","curPos","autoComplete","val","videoConstraints","facingMode","WordGridSolver","wordGridSolverSocket","gridData","wordGridSolverData","webcamRef","imgSrc","setImgSrc","keepLooking","handleSearchBoundaries","capture","getScreenshot","audio","ref","screenshotFormat","src","App","Provider","exact","component","Categories","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","intialEmptyWordsState","wordGridEnteredWordList","intialAllWordGridAnswers","wordGridPlayerAnswers","genNewBoard","availableOptions","x","arrayOrder","array","j","shuffleArray","board","tilePlacement","randInd","intialWordGridBoardLayout","wordGridBoardLayout","genEmptySolverBoard","intialWordGridSolverBoardLayout","wordGridSolverLayout","allReducers","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.51d7ee73.chunk.js","sourcesContent":["import {Link} from 'react-router-dom';\r\n\r\ntype blogData = {\r\n    id : string,\r\n    name : string,\r\n    url: string,\r\n    biline: string\r\n}\r\n\r\n\r\nfunction BlogItem(blogData: blogData) {\r\n    return (\r\n    <Link to={blogData.id}>\r\n      <div className=\"blog-item\">\r\n          \r\n              {blogData.name}\r\n              <p style={{fontSize:\"smaller\"}}>\r\n                  {blogData.biline}\r\n              </p>\r\n      </div>\r\n    </Link>\r\n    );\r\n  }\r\n  \r\n  export default BlogItem;","var allGames = [\r\n    {\r\n        \"id\" : \"categories\",\r\n        \"name\" : \"Categories\",\r\n        \"url\" : \"categories\",\r\n        \"biline\": \"A multiplayer game where you have to get an answer for each category that starts with the same letter.\"\r\n    },\r\n    {\r\n        \"id\": \"wordGrid\",\r\n        \"name\": \"Multiplayer word grid\",\r\n        \"url\": \"wordGrid\",\r\n        \"biline\": \"A multiplayer game where you have to find words in a grid.\"\r\n    },\r\n    {\r\n        \"id\": \"wordGridSolver\",\r\n        \"name\": \"Word grid solver\",\r\n        \"url\": \"word-grid-solver\",\r\n        \"biline\": \"Use your camera to solve real-world games of wordgrid!\"\r\n    },\r\n    {\r\n        \"id\" : \"picture-guess\",\r\n        \"name\" : \"Picture guess\",\r\n        \"url\" : \"picture-guess\",\r\n        \"biline\": \"A multiplayer game where other players have to guess what you are trying to draw!\"\r\n    },\r\n    \r\n]\r\n\r\nexport default allGames;","import GameItem from \"./GameItem\";\r\nimport allGames from \"../gamedata\";\r\n\r\ntype game = {\r\n    id : string,\r\n    name : string,\r\n    biline: string,\r\n    url: string\r\n}\r\n\r\nfunction GamesList() {\r\n    return <div className=\"blog-list\">\r\n        <div className=\"about-message\">\r\n          <p>Click an option below to start a game!</p>\r\n        </div>\r\n        { \r\n            allGames.map(\r\n                (game: game) => {\r\n                    return <GameItem id={game.id} name={game.name} biline={game.biline} url={game.url} />\r\n                }\r\n            )\r\n        }\r\n\r\n      </div>\r\n    \r\n  }\r\n  \r\n  export default GamesList;","import {Link, useLocation} from 'react-router-dom';\r\n\r\n\r\nfunction Header() {\r\n    const location = useLocation()\r\n\r\n    return (\r\n      <div className=\"header\">\r\n        <Link className=\"header-item\" to=\"/\">Tom Davenport</Link>\r\n        {\r\n            location.pathname === \"/\" ? <></> : <Link className=\"header-item\" to=\"/\">Return to game list</Link>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default Header;","  \r\nimport { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'categories-game-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue === \"undefined\") return \"\"\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}","import React, {useState, useReducer, useContext, useEffect} from 'react';\r\nimport {Link, useHistory} from 'react-router-dom';\r\nimport Category from \"../models\";\r\nimport sampleCategories from \"./sampleCategories.json\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\n\r\nconst categoriesReducer = (state:any, action:any) => {\r\n    switch (action.type) {\r\n        case 'REMOVE_ITEM':\r\n            return ({\r\n            ...state,\r\n            list : state.list.filter((item:Category) => item.key !== action.key)\r\n            })\r\n        case 'ADD_ITEM':\r\n            return ({\r\n                ...state,\r\n                list : state.list.concat({name: action.name, key: action.key, answer: \"\"})\r\n            })\r\n        case 'UPDATE_ITEM':\r\n            return ({\r\n                ...state,\r\n                list : state.list.map(\r\n                    (category: Category) => {\r\n                        if (action.key === category.key){\r\n                            const updatedItem = {\r\n                                ...category,\r\n                                name : action.name\r\n                            };\r\n                            return updatedItem\r\n                        }else{\r\n                            return category\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n        case 'RESET_LIST':\r\n            return ({\r\n                ...state,\r\n                list : sampleCategories\r\n            })\r\n      default:\r\n        throw new Error();\r\n    }\r\n};\r\n\r\nfunction randomLetter(){\r\n    return String.fromCharCode(65+Math.floor(Math.random() * 26))\r\n}\r\n\r\n\r\nfunction CategoriesStart() {\r\n\r\n    // random letter\r\n    const [gameLetter, setLetter] = useState(randomLetter())\r\n    const [categoryList, dispatchListData] =  useReducer(categoriesReducer, {\r\n        list: sampleCategories\r\n    });\r\n    const [userNameError, setUserNameError] = useState(false)\r\n    const [categoryError, setCategoryError] = useState(false)\r\n    \r\n    const history = useHistory();\r\n    // const ws = useContext(WebSocketContext);\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\r\n    let [userName, setUserName] = useLocalStorage('userName', '')\r\n    let [gameData, setGameData] = useLocalStorage('gameData', {})\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\r\n    let [userID, setUserID] = useLocalStorage('userID', '')\r\n    let [returning, setReturning] = useLocalStorage('returning', false)\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\r\n\r\n    useEffect(() => {\r\n        return setGameData({\r\n            \"categories\" : categoryList.list,\r\n            \"gameLetter\" : gameLetter\r\n        })\r\n        \r\n      }, [categoryList]);\r\n\r\n\r\n    function newLetter(){\r\n        \r\n        let newLetter = randomLetter()\r\n        \r\n        setLetter(newLetter)\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : newLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    // category list\r\n    \r\n\r\n    function handleChange(event : any){\r\n        \r\n        dispatchListData({\"type\" : \"UPDATE_ITEM\", key: event.target.id, name : event.target.value })\r\n        \r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    \r\n    }\r\n  \r\n    function handleRemove(key : string){\r\n        dispatchListData({type:\"REMOVE_ITEM\", \"key\" : key })\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    function handleAdd(){\r\n        console.log(\"clicked handle\")\r\n        dispatchListData({type:\"ADD_ITEM\", key: uuidv4()})\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    function handleReset(){\r\n        console.log(\"clicked reset\")\r\n        dispatchListData({type:\"RESET_LIST\"})\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n    }\r\n\r\n    // user\r\n    \r\n    function handleUserNameChange(event:any){\r\n        \r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\r\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\r\n        var newReturning = returning ? returning : false\r\n\r\n        setGameID(newGameID)\r\n        setGameSessionID(newGameSessionID)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        setPlayerList([{\r\n            userID,\r\n            userName : event.target.value,\r\n            \"gameLeader\" : true\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value,\r\n            \"gameLeader\" : true\r\n        }\r\n        )\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n\r\n    }\r\n\r\n    // submit form\r\n\r\n    function startGame(event:any){\r\n\r\n        setGameData(\r\n            {\r\n                \"categories\" : categoryList.list,\r\n                \"gameLetter\" : gameLetter\r\n            }\r\n        )\r\n\r\n        // check that the player has at least one category\r\n        setCategoryError(categoryList.list.length === 0) \r\n        setUserNameError(!userName)\r\n\r\n        // check that the player has added a username\r\n        if ((categoryList.list.length === 0) || (!userName)){\r\n            return\r\n        }\r\n        else {\r\n\r\n            \r\n            history.push(\r\n                {\r\n                    \"pathname\" : '/categories-waiting-room',\r\n                }\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\r\n        \r\n        <p className=\"explainer\">\r\n            As the game leader, it's up to you to set the game up!\r\n        </p>\r\n        \r\n        <p>Letter to guess: </p>\r\n        <span className=\"gameLetter\" id=\"gameLetter\">{gameLetter}</span>\r\n        <button \r\n            id=\"newLetter\"\r\n            onClick={()=>{newLetter()}}\r\n            style={{\r\n                \"marginLeft\": \"20px\"\r\n            }}\r\n        >\r\n            New letter\r\n        </button>\r\n\r\n        <p>1. (Optional) Change or add more categories:</p>\r\n        <p className=\"explainer\">Click a category to change the name, or the button to remove it. </p>\r\n        { \r\n            categoryList.list.map(\r\n                (category: Category) => {\r\n                    return (\r\n                    <div className=\"category\">\r\n                        <input\r\n                            type=\"text\" \r\n                            id={category.key} \r\n                            defaultValue={category.name}\r\n                            onChange={(e)=>handleChange(e)}\r\n                        />\r\n                        <button onClick={()=>handleRemove(category.key)}>\r\n                            Remove\r\n                        </button>\r\n                    </div>\r\n                    )\r\n                }\r\n            )\r\n        }\r\n\r\n        <button\r\n            type=\"button\"\r\n            onClick={() =>handleAdd()}\r\n            style={{\r\n                \"marginRight\": \"5px\"\r\n            }}\r\n        >\r\n            Add category\r\n        </button>\r\n\r\n        <button\r\n            type=\"button\"\r\n            onClick={() =>handleReset()}\r\n        >\r\n            Reset to default\r\n        </button>\r\n\r\n        <p className={ categoryError ? \"showError\" : \"hideError\" }>Please have at least one category before continuing.</p>\r\n        <p>2. Enter your user name:</p>\r\n        \r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName}\r\n            style={{\r\n                \"paddingRight\": \"5px\"\r\n            }}\r\n        />\r\n\r\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\r\n        <p>3. Click start game:</p>\r\n\r\n        <button \r\n            className=\"start-game\" \r\n            onClick={(e)=>{startGame(e)}}\r\n            style={{\r\n                \"marginBottom\": \"20px\"\r\n            }}\r\n        >\r\n            Start Game\r\n        </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesStart;","\r\nimport React, {useState, useRef, useContext} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction CategoriesJoin(props:any) {\r\n\r\n    const history = useHistory();\r\n    \r\n    const [userNameError, setUserNameError] = useState(false)\r\n\r\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\r\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\r\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\r\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\r\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\r\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\r\n    \r\n    function handleUserNameChange(event:any){\r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newReturning = returning ? returning : false\r\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\r\n\r\n        setGameID(gameIDPath)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        \r\n        setPlayerList([{\r\n            userID,\r\n            userName:event.target.value\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value\r\n        }\r\n        )\r\n    }\r\n\r\n    \r\n\r\n    function joinGameRoom(){\r\n        setUserNameError(!userName)\r\n        // check that the player has added a username\r\n        if (!userName){\r\n            return\r\n        }\r\n        \r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-waiting-room'\r\n            }\r\n        )\r\n\r\n        \r\n    }\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Join game</h1>\r\n\r\n        <p>Enter a username:</p>\r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName} \r\n        />\r\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\r\n        <br/>\r\n        <button onClick={()=>joinGameRoom()}>Join game</button>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesJoin;","export const SOCKETURL = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:8000/\" : \"https://tom-games.azurewebsites.net/\"","import {io} from \"socket.io-client\";\r\nimport React from 'react';\r\nimport { SOCKETURL } from '../constants'\r\n\r\n// console.log(SOCKETURL + 'categories')\r\n// export const socket = io( 'https://tom-games.azurewebsites.net/categories');\r\nexport const socket = io( SOCKETURL + 'categories')\r\nexport const SocketContext = React.createContext(socket);\r\n\r\nexport const picturesocket = io(SOCKETURL + \"picture-guess\")\r\nexport const PictureSocketContext = React.createContext(picturesocket)\r\n\r\nexport const wordGridsocket = io(SOCKETURL + \"wordGrid\")\r\nexport const wordGridSocketContext = React.createContext(wordGridsocket)\r\n\r\nexport const wordGridSolversocket = io(SOCKETURL + \"wordGridSolver\")\r\nexport const wordGridSolverSocketContext = React.createContext(wordGridSolversocket)","\r\nimport React, {useState, useRef, useContext, useEffect, useCallback} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport {SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction CategoriesWaiting(props:any) {\r\n    \r\n    const categoriesSocket = useContext(SocketContext)\r\n    const [copySuccess, setCopySuccess] = useState('');\r\n    const history = useHistory();\r\n\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n    let [joined, setJoined] = useState(false);\r\n\r\n    const handleJoinedRoom = useCallback(()=>{\r\n        setJoined(true)\r\n        console.log(true)\r\n    }, [])\r\n\r\n    const handleNewPlayer = useCallback( (data:any) =>{\r\n        setPlayerList(data['playerList'])\r\n        setGameData(data[\"gameData\"])\r\n    }, [])\r\n\r\n    const handleStartGame = useCallback((data:any)=>{\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-game-room'\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const handleSendStart = useCallback(()=>{\r\n        console.log(\"START!\")\r\n        categoriesSocket.emit(\"send-start\", {gameID})\r\n        categoriesSocket.emit(\"start-timer\", {gameID})\r\n    }, [])\r\n\r\n    useEffect( ()=>{\r\n        \r\n        categoriesSocket.on('connect',\r\n            () => {\r\n                console.log(\"connected categories\")\r\n            }\r\n        );\r\n\r\n        if (gameID){\r\n            console.log(\"joining room\")\r\n\r\n            categoriesSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n        }\r\n\r\n        categoriesSocket.on(\"joined-room\", handleJoinedRoom)\r\n        categoriesSocket.on(\"new-player\",handleNewPlayer);\r\n        categoriesSocket.on(\"start-game\", handleStartGame)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"joined-room\", handleJoinedRoom);\r\n            categoriesSocket.off(\"new-player\", handleNewPlayer);\r\n            categoriesSocket.off(\"start-game\", handleStartGame);\r\n          };\r\n\r\n    }, [categoriesSocket, handleJoinedRoom, handleNewPlayer, handleStartGame])\r\n    \r\n\r\n    // direct link \r\n    function linkToClipboard(e:any){\r\n        \r\n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\r\n\r\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/join-categories/${gameID}`)\r\n        // This is just personal preference.\r\n        // I prefer to not show the whole text area selected.\r\n        e.target.focus();\r\n        setCopySuccess('Copied!');\r\n    }\r\n\r\n\r\n    function refreshPage(){\r\n        window.location.reload()\r\n    }\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Categories</h1>\r\n        <h4>Waiting room</h4>\r\n\r\n        <p>A multiplayer game - find a word that starts with the following letter for each category!</p>\r\n        \r\n        <p>Your game id is: <span className=\"gameID\">{gameID}</span></p>\r\n        <button onClick={(e)=>{linkToClipboard(e)}}>Click to copy direct link</button>\r\n        <p>{copySuccess}</p>\r\n\r\n        <p>Current players:</p>\r\n        <table>\r\n        <thead>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                playerList.map(\r\n                        (player: Player, ind: number ) => {\r\n                            return (\r\n                            <tr key={player.userID}>\r\n                                <td>\r\n                                    {ind + 1}.\r\n                                </td>\r\n                                <td>\r\n                                    {player.userName}\r\n                                </td>\r\n                                <td>\r\n                                    {player.gameLeader ?  \" (Game leader)\" : \"\" }\r\n                                </td>\r\n                            </tr>\r\n                            )\r\n                        }\r\n                    )\r\n            }\r\n        </tbody>\r\n        </table>\r\n        { \r\n            playerList.length == 0 ? <> Can't see any other players? <button onClick={()=>{refreshPage()}}>Refresh</button>  </>: <></> \r\n        }\r\n        { playerData.gameLeader && <div> \r\n        <p>3. Click start game:</p>\r\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\r\n        </div>\r\n        }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesWaiting;","import React, {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Category from \"../models\";\r\nimport {SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\ntype Answers = [\r\n    {\r\n        key : string,\r\n        name: string,\r\n        answer? :string\r\n    }\r\n]\r\n\r\nfunction CategoriesGame(props:any) {\r\n\r\n    \r\n    const history = useHistory();\r\n    const categoriesSocket = useContext(SocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n\r\n    let [minutes, setMinutes] = useState(\"\")\r\n    let [seconds, setSeconds] = useState(\"\")\r\n    \r\n    let [answers, setAnswers] = useState(gameData[\"categories\"])\r\n    let [gameLetter, setGameLetter] = useState(gameData[\"gameLetter\"])\r\n    let [stopBus, setBus] = useState(false)\r\n\r\n    // const getGameLetter = () => {\r\n    //     setGameLetter(gameData[\"gameLetter\"])\r\n    //     return gameLetter\r\n    // }\r\n\r\n    const handleChange = (e:any) =>{\r\n\r\n        let newAnswers: Answers[] =[]\r\n        let numAnswers = 0\r\n        \r\n        newAnswers = answers.map( (ans:any) =>{\r\n            if (e.target.id == ans.key){\r\n                ans[\"answer\"] = e.target.value\r\n                \r\n                numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\r\n            }else{\r\n                if (ans[\"answer\"]){\r\n\r\n                    numAnswers += ans[\"answer\"] && ans[\"answer\"].charAt(0).toLowerCase() === gameLetter.toLowerCase() ? 1 : 0\r\n                }\r\n            }\r\n            return ans\r\n        })\r\n\r\n        if (numAnswers == answers.length){\r\n            setBus(true)\r\n        }else{\r\n            setBus(false)\r\n        }\r\n        setAnswers(newAnswers)\r\n    }\r\n\r\n\r\n    const handleStopBus = useCallback(()=>{\r\n        console.log(\" handle send answers\")\r\n        setBus(true)\r\n        categoriesSocket.emit(\"send-answers\", {\r\n            gameID,\r\n            userID,\r\n            userName,\r\n            answers,\r\n            \"stopBus\" : true\r\n        })\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-scoring',\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const handleTimerTick = useCallback((data: any)=>{\r\n        \r\n        setMinutes(data[\"minutes\"])\r\n        setSeconds(data[\"seconds\"])\r\n        \r\n        if ( data[\"minutes\"] == 0 && data[\"seconds\"] == 0 ){\r\n            handleForceEndGame()\r\n        }\r\n    \r\n    }, [])\r\n\r\n    const handleForceEndGame = useCallback(()=>{\r\n        \r\n        categoriesSocket.emit(\"send-answers\", {\r\n            gameID,\r\n            userID,\r\n            userName,\r\n            answers,\r\n            stopBus : false\r\n        })\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories-scoring',\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    \r\n    useEffect( ()=>{\r\n\r\n        categoriesSocket.on(\"send-answers\", handleForceEndGame);\r\n        categoriesSocket.on(\"timer-tick\", handleTimerTick);\r\n        categoriesSocket.on(\"end-game\", handleForceEndGame)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"send-answers\", handleForceEndGame);\r\n            categoriesSocket.off(\"timer-tick\", handleTimerTick);\r\n            categoriesSocket.off(\"end-game\", handleForceEndGame)\r\n          };\r\n\r\n    }, [categoriesSocket, handleForceEndGame, handleTimerTick])\r\n\r\n\r\n\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Let's play</h1>        \r\n        <p>Time left: {minutes ? minutes.toString() + \" minute\" : \"\" } { seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\r\n        <p>Enter something for each category that starts with:</p>\r\n        <p><span className=\"gameLetter\" style={{fontSize: \"55px\"}}>{gameLetter}</span></p>\r\n\r\n        <table style={{paddingBottom: \"20px\"}}>\r\n        <tr>\r\n            <th>Category</th>\r\n            <th>Answer</th>\r\n            <th>{/* Error */}</th>\r\n        </tr>\r\n        {answers.map(\r\n                (category: Category) => {\r\n                    return (\r\n                    <tr>\r\n                        <td>{category.name}</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"text\" \r\n                                id={category.key} \r\n                                defaultValue={ category[\"answer\"] ? category[\"answer\"] : '' }\r\n                                onChange={(e)=>handleChange(e)}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <p className={ category[\"answer\"] && category[\"answer\"].charAt(0).toLowerCase() !== gameLetter.toLowerCase() ? \"showError\" : \"hideError\" }>Category has to start with {gameLetter}!</p>\r\n                        </td>\r\n                    </tr>\r\n                    )\r\n                }\r\n            )\r\n        }\r\n        <tr>\r\n            <td>\r\n            </td>\r\n            <td>\r\n            { stopBus ? <button id=\"stop\" onClick={()=>handleStopBus()}>Stop!</button> : <></>}\r\n            </td>\r\n            <td>\r\n            </td>\r\n        </tr>\r\n        </table>\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesGame;","import React, {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {Link, useHistory, useLocation} from 'react-router-dom';\r\nimport {Provider, useSelector, useDispatch} from \"react-redux\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport Category from \"../models\";\r\nimport {socket, SocketContext}  from '../context/socket2'\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\ntype AnswerList = [\r\n    gameID : string,\r\n    gameSessionID : string,\r\n    userID : string,\r\n    userName : string,\r\n    answers : Answers[]\r\n]\r\n\r\ntype Answers = [\r\n    {\r\n        key : string,\r\n        name: string,\r\n        answer? :string\r\n    }\r\n]\r\n\r\ntype MarkedRows = [\r\n    string[] \r\n]\r\n\r\nfunction CategoriesScoring(props:any) {\r\n\r\n    \r\n    const history = useHistory();\r\n    const categoriesSocket = useContext(SocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n\r\n    let [categories, setCategories] = useState(gameData[\"categories\"])\r\n    let [allAnswers , setAllAnswers] = useState<AnswerList[]>([]); //useState([])\r\n    \r\n    let [userScores, setUserScores] = useState<any[]>([]); \r\n    let [markedRows, setMarkedRows] = useState<string[]>([]); \r\n\r\n    const handleAnswerTable = useCallback( (data:any) => {\r\n        setAllAnswers(data)\r\n    }, [])\r\n\r\n    const handleUpdateScore = useCallback((data:any)=>{\r\n        setMarkedRows(data[\"rowIds\"])\r\n        setUserScores(data[\"userScores\"])\r\n    }, [])\r\n\r\n    const handleMark = useCallback((rowInd : number, colInd: number, rowId : string)=>{\r\n        categoriesSocket.emit(\"mark-answer\", {\r\n            gameID,\r\n            rowId,\r\n            colInd,\r\n            rowInd\r\n        })\r\n    }, [])\r\n\r\n    const handleStartNewGame = useCallback( () => {\r\n        // so the game leader can make any updates they want\r\n        categoriesSocket.emit(\"request-new-game\", {\r\n            gameID\r\n        })\r\n        console.log(returning)\r\n        returning = setReturning(true)\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/categories',\r\n            }\r\n        )\r\n    }, []);\r\n\r\n    const handleNewGameRequested = useCallback( ()=> {\r\n        // to return players to the waiting room\r\n\r\n        setReturning(true)\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : \"/categories-waiting-room\"\r\n            }\r\n        )\r\n    }, [])\r\n\r\n\r\n\r\n    \r\n    useEffect( ()=>{\r\n\r\n        console.log(allAnswers)\r\n        \r\n        if (allAnswers.length == 0){\r\n            console.log(\"doing this once\")\r\n            categoriesSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n            categoriesSocket.emit(\"get-all-answers\", {\r\n                gameID\r\n            })\r\n        }\r\n        \r\n        categoriesSocket.on(\"get-answers\", handleAnswerTable);\r\n        categoriesSocket.on(\"update-scores\", handleUpdateScore);\r\n        categoriesSocket.on(\"start-new-game\", handleNewGameRequested);\r\n\r\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            categoriesSocket.off(\"get-answers\", handleAnswerTable);\r\n            categoriesSocket.off(\"update-scores\", handleUpdateScore);\r\n            categoriesSocket.off(\"start-new-game\", handleNewGameRequested);\r\n          };\r\n\r\n    }, [categoriesSocket, handleAnswerTable, handleUpdateScore, handleNewGameRequested])\r\n\r\n\r\n    useEffect(() => {\r\n        console.log(allAnswers)\r\n    }, [allAnswers])\r\n\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Time to score!</h1>        \r\n        <p>The game leader will now mark the answers:</p>\r\n        <table>\r\n            <thead>\r\n                <th>\r\n                    Category\r\n                </th>\r\n                {\r\n                    allAnswers.map( (user:any) => {\r\n                        return (\r\n                        <th>\r\n                            { user[\"userName\"] ? user[\"userName\"] : 0 }\r\n                        </th>\r\n                        )\r\n                    } )\r\n                }\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    categories.map( (row: any, rowInd: any) => {\r\n                        return (\r\n                        <tr>\r\n                            <td>\r\n                                { row[\"name\"] }\r\n                            </td>\r\n                            { \r\n                              allAnswers.map( (user:any, colInd) => {\r\n                                  return (\r\n                                      <td \r\n                                        id={ `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}` }\r\n                                        onClick={ () => {\r\n                                            // console.log(\"clicked\")\r\n                                            // console.log(playerData)\r\n                                            if (playerData[\"gameLeader\"]) {\r\n                                                // console.log(\"clickedHandler\")\r\n                                                handleMark(colInd, rowInd, `rowIndIS${rowInd.toString()}ANDcolIndIS${colInd.toString()}`)\r\n                                            }\r\n                                        }\r\n                                        }\r\n                                        className={  markedRows.includes('rowIndIS' + rowInd.toString() + 'ANDcolIndIS' + colInd.toString() ) ? \"accepted\" : \"\" }\r\n                                      >\r\n                                          { user[\"answers\"][rowInd][\"answer\"] }\r\n                                      </td>\r\n                                  )\r\n                              } )\r\n                            }\r\n                        </tr>\r\n                        )\r\n                    } )\r\n                }\r\n            </tbody>\r\n            <tfoot>\r\n                <tr>\r\n                    <th>\r\n                        Score\r\n                    </th>\r\n                    {\r\n                        allAnswers.map( (user:any, ind: any) => {\r\n                            return (\r\n                            <th>\r\n                                { \r\n                                    userScores.map((userScore:any)=>{\r\n                                        if (userScore[\"userID\"] == user[\"userID\"]){\r\n                                            return userScore[\"score\"]\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </th>\r\n                            )\r\n                        } )\r\n                    }\r\n                </tr>\r\n            </tfoot>\r\n        </table>\r\n        \r\n        \r\n        { playerData[\"gameLeader\"] ? <div>\r\n                <p>Play again?</p>\r\n                <button onClick={()=>{\r\n                    handleStartNewGame()\r\n                }}>New game</button>\r\n            </div> : <></>\r\n        }\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoriesScoring;","import {useState, useContext, useEffect, useCallback} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {PictureSocketContext}  from '../context/socket2'\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction PictureGuess(props:any) {\r\n    // context stuff\r\n    const pictureSocket = useContext(PictureSocketContext)\r\n    \r\n    // class handlers\r\n    let [copySuccess, setCopySuccess] = useState('');\r\n    let [joinStatus, setJoinStatus] = useState('');\r\n    let [startButtonStatus, setStartButtonStatus] = useState('')\r\n\r\n    // user data\r\n    let [userName, setUserName] = useState('')\r\n    let [userID, setUserID] = useState(uuidv4())\r\n\r\n    // game data in general\r\n    let [gameID, setGameID] = useState(getGameID())\r\n    let [playerData, setPlayerData] = useState({})\r\n    let [playerStatus, setPlayerStatus] = useState('')\r\n    let [playerList, setPlayerList] = useState([])\r\n    let [gameData, setGameData] = useState({})\r\n    \r\n    //current game\r\n    let [currentWord, setCurrentWord] = useState('')\r\n    let [curGuess, setCurGuess] = useState('')\r\n    let [currentPlayer, setCurrentPlayer] = useState('')\r\n    let [nextPlayer, setNextPlayer] = useState('')\r\n\r\n\r\n    function getGameID(){\r\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\r\n        if (!gameIDPath){\r\n            let newGameID =  (Math.floor(Math.random() * 1000000) + 100000).toString()\r\n            return newGameID\r\n        }else{\r\n            return gameIDPath\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        setUserName(userName)\r\n    }, [userName])\r\n\r\n\r\n    const handleJoinedRoom = useCallback(()=>{\r\n        setJoinStatus('hideJoin')\r\n        console.log(true)\r\n    }, [])\r\n\r\n    const handleNewPlayer = useCallback( (data:any) =>{\r\n        setPlayerList(data['playerList'])\r\n        setGameData(data[\"gameData\"])\r\n    }, [])\r\n\r\n    // const handleStartGame = useCallback((data:any)=>{\r\n    //     history.push(\r\n    //         {\r\n    //             \"pathname\" : '/categories-game-room'\r\n    //         }\r\n    //     )\r\n    // }, [])\r\n\r\n    // const handleSendStart = useCallback(()=>{\r\n    //     console.log(\"START!\")\r\n    //     pictureSocket.emit(\"send-start\", {gameID})\r\n    //     pictureSocket.emit(\"start-timer\", {gameID})\r\n    // }, [])\r\n\r\n    useEffect( ()=>{\r\n        \r\n        pictureSocket.on('connect',\r\n            () => {\r\n                console.log(\"connected picture-guess\")\r\n            }\r\n        );\r\n\r\n        pictureSocket.on(\"joined-room\", handleJoinedRoom)\r\n        pictureSocket.on(\"new-player\",handleNewPlayer);\r\n        // pictureSocket.on(\"start-game\", handleStartGame)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            pictureSocket.off(\"joined-room\", handleJoinedRoom);\r\n            pictureSocket.off(\"new-player\", handleNewPlayer);\r\n            // pictureSocket.off(\"start-game\", handleStartGame);\r\n          };\r\n\r\n    }, [pictureSocket])//, handleJoinedRoom, handleNewPlayer, handleStartGame])\r\n    \r\n\r\n\r\n    // direct link \r\n    function linkToClipboard(e:any){\r\n        \r\n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\r\n\r\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/picture-guess/${gameID}`)\r\n        // This is just personal preference.\r\n        // I prefer to not show the whole text area selected.\r\n        e.target.focus();\r\n        setCopySuccess('Copied!');\r\n    }\r\n\r\n    function makeGuess(){\r\n        \r\n    }\r\n\r\n    function handleGuessChange(e:any){\r\n        setCurGuess(e.target.value)\r\n    }\r\n\r\n    function handleUserNameChange(e:any){\r\n        setUserName(e.target.value)\r\n        setPlayerData(\r\n            {\r\n                userID,\r\n                userName\r\n            }\r\n        )\r\n    }\r\n\r\n    function handleJoinGame(){\r\n        // console.log(gameID)\r\n        // console.log(userID)\r\n        // console.log(userName)\r\n        // console.log(playerData)\r\n        if (gameID && userID && userName){\r\n            console.log(\"joining room\")\r\n\r\n            pictureSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n            })\r\n        }\r\n    }\r\n\r\n    function newWord(){\r\n        return \r\n    }\r\n\r\n\r\n\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Picture guess</h1>\r\n        \r\n        <div className=\"pictureGuess\">\r\n        \r\n            <div className=\"leftBar\">\r\n\r\n                <div className=\"pictureTimer\">\r\n                    <p>Timer</p>\r\n                    <button className={startButtonStatus}>Start</button>\r\n                </div>\r\n\r\n                <div className=\"wordData\">\r\n                    <p>word to guess: {currentWord}</p>\r\n                    <p>Too hard?<button onClick={newWord}>New word</button></p>\r\n                </div>\r\n                <div className=\"currentTurn\">\r\n                    <p>Who's turn:</p>\r\n                    {currentPlayer}\r\n                    <p>Next:</p>\r\n                    {nextPlayer}\r\n                    <p>You are: {playerStatus}</p>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className=\"drawingPanel\">\r\n                <canvas id=\"drawingCanvas\" width=\"500\" height=\"400\">\r\n\r\n                </canvas>\r\n            </div>\r\n            \r\n            <div className=\"rightBar\">\r\n                <div className=\"currentPlayers\">\r\n                    <p>Game ID: {gameID} <br></br><button onClick={linkToClipboard}>copy share link</button></p>\r\n                    <p className={joinStatus}><input onChange={(e)=>{handleUserNameChange(e)}} placeholder=\"join game\"></input> <button onClick={handleJoinGame}>Join</button></p>\r\n                    <p>List of players</p>\r\n                    <ol>\r\n                        {\r\n                            playerList.map( (player)=>{\r\n                                return (\r\n                                    <li>{player[\"userName\"]}</li>\r\n                                )\r\n                            })\r\n                        }\r\n                    </ol>\r\n                </div>\r\n                <div className=\"guesses\">\r\n                    <p>Guess list</p>\r\n                    <input id=\"guessID\" onChange={(e)=>{handleGuessChange(e)}}></input> <button onClick={makeGuess}>Make guess</button>\r\n                </div>\r\n            \r\n            </div>\r\n        \r\n        </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PictureGuess;","import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\n\r\n\r\n\r\n\r\nfunction WordGridSetup() {\r\n\r\n    // random letter\r\n    const [userNameError, setUserNameError] = useState(false)\r\n    \r\n    const history = useHistory();\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID', '')\r\n    let [userName, setUserName] = useLocalStorage('userName', '')\r\n    // let [gameData, setGameData] = useLocalStorage('gameData', {})\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData', {})\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID', '')\r\n    let [userID, setUserID] = useLocalStorage('userID', '')\r\n    let [returning, setReturning] = useLocalStorage('returning', false)\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList', [])\r\n\r\n    useEffect(()=>{\r\n        // reset any local storage stuff to defaults\r\n        setGameID(\"\")\r\n        setUserName(\"\")\r\n        // setGameData({})\r\n        setPlayerData({})\r\n        setGameSessionID(\"\")\r\n        setUserID(\"\")\r\n        setReturning(false)\r\n        setPlayerList([])\r\n    }, [])\r\n\r\n    function handleUserNameChange(event:any){\r\n        \r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newGameSessionID = gameSessionID ? gameSessionID : uuidv4()\r\n        var newGameID =  gameID ? gameID : (Math.floor(Math.random() * 1000000) + 100000).toString()\r\n        var newReturning = returning ? returning : false\r\n\r\n        setGameID(newGameID)\r\n        setGameSessionID(newGameSessionID)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        setPlayerList([{\r\n            userID,\r\n            userName : event.target.value,\r\n            \"gameLeader\" : true\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value,\r\n            \"gameLeader\" : true\r\n        }\r\n        )\r\n\r\n    }\r\n    const handleKeyPress = (e:any) => {\r\n        if (e.key === \"Enter\"){\r\n            handleUserNameChange(e)\r\n        }\r\n    }\r\n\r\n    function startGame(event:any){\r\n        \r\n        \r\n            // check that the player has at least one category\r\n        setUserNameError(!userName)\r\n\r\n        // check that the player has added a username\r\n        if (!userName){\r\n            return\r\n        }\r\n        else {\r\n            history.push(\r\n                {\r\n                    \"pathname\" : '/wordGrid-waiting-room',\r\n                }\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <p>A multiplayer game - find words in the grid:</p>\r\n        <ol>\r\n            <li>The word has to be made up of letters that are next to each other.</li>\r\n            <li>In each word, a letter on the board can only be used once.</li>\r\n        </ol>\r\n        <p>User name</p>\r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName}\r\n            onKeyPress={handleKeyPress}\r\n        />\r\n        <button className=\"start-game\" onClick={(e)=>{startGame(e)}}>Start Game</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordGridSetup;","import {useState, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean\r\n}\r\n\r\n\r\nfunction WordGridJoin(props:any) {\r\n\r\n    const history = useHistory();\r\n    \r\n    const [userNameError, setUserNameError] = useState(false)\r\n\r\n    let [gameID, setGameID] = useLocalStorage(\"gameID\", '')\r\n    let [userName, setUserName] = useLocalStorage(\"userName\", '')\r\n    let [userID, setUserID] = useLocalStorage(\"userID\", '')\r\n    let [gameData, setGameData] = useLocalStorage(\"gameData\", {})\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage(\"gameSessionID\", \"\")\r\n    let [returning, setReturning] = useLocalStorage(\"returning\", '')\r\n    let [playerData, setPlayerData] = useLocalStorage(\"playerData\", {})\r\n    let [playerList, setPlayerList] = useLocalStorage(\"playerList\", [])\r\n\r\n    useEffect(()=>{\r\n        // reset any local storage stuff to defaults\r\n        setGameID(\"\")\r\n        setUserName(\"\")\r\n        setGameData({})\r\n        setPlayerData({})\r\n        setGameSessionID(\"\")\r\n        setUserID(\"\")\r\n        setReturning(false)\r\n        setPlayerList([])\r\n        \r\n    }, [])\r\n\r\n\r\n    function handleUserNameChange(event:any){\r\n        setUserName(event.target.value)\r\n        \r\n        var newUserID = userID ? userID : uuidv4()\r\n        var newReturning = returning ? returning : false\r\n        var gameIDPath = props.location[\"pathname\"].split(\"/\").reverse()[0]\r\n\r\n        setGameID(gameIDPath)\r\n        setReturning(newReturning)\r\n        setUserID(newUserID)\r\n        \r\n        setPlayerList([{\r\n            userID,\r\n            userName:event.target.value\r\n        }])\r\n\r\n        setPlayerData({\r\n            userID,\r\n            userName: event.target.value\r\n        }\r\n        )\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    function joinGameRoom(){\r\n        setUserNameError(!userName)\r\n        // check that the player has added a username\r\n        if (!userName){\r\n            return\r\n        }\r\n        \r\n        history.push(\r\n            {\r\n                \"pathname\" : '/wordGrid-waiting-room'\r\n            }\r\n        )\r\n\r\n        \r\n    }\r\n    \r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Join game</h1>\r\n\r\n        <p>Enter a username:</p>\r\n        <input \r\n            type=\"text\" \r\n            id=\"username\" \r\n            placeholder=\"Add username\" \r\n            onChange={(e)=>{handleUserNameChange(e)}} \r\n            value={userName} \r\n        />\r\n        <p className={ userNameError ? \"showError\" : \"hideError\" }>Please enter a username before continuing.</p>\r\n        <br/>\r\n        <button onClick={()=>joinGameRoom()}>Join game</button>\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordGridJoin;","\r\nimport {useState, useContext, useEffect, useCallback} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport {wordGridSocketContext}  from '../context/socket2'\r\nimport {clearWordGridEnteredWords} from \"../actions/actions\"\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {setWordGridGameData} from \"../actions/actions\";\r\n\r\ntype Player = {\r\n    userName : string,\r\n    userID : string,\r\n    gameLeader? : boolean,\r\n    gamesWon?: number,\r\n    totalPoints?: number\r\n}\r\n\r\nfunction WordGridWaiting(props:any) {\r\n    \r\n    const wordGridSocket = useContext(wordGridSocketContext)\r\n    const [copySuccess, setCopySuccess] = useState('');\r\n    const history = useHistory();\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    // let [gameData, setGameData] = useLocalStorage('gameData', {})\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [playerList, setPlayerList] = useLocalStorage('playerList')\r\n    let [joined, setJoined] = useState(false);\r\n    let gameData = useSelector((s:any) => s.wordGridGameData)\r\n\r\n    useEffect(() => {\r\n\r\n    }, []\r\n    )\r\n\r\n    // console.log(gameData)\r\n\r\n    // let [enteredWords, setEnteredWords] = useLocalStorage('enteredWords')\r\n\r\n    // useEffect(()=>{\r\n    //     // reset any local storage stuff to defaults\r\n    //     setEnteredWords([])\r\n    // }, [])\r\n\r\n    const handleJoinedRoom = useCallback(()=>{\r\n        setJoined(true)\r\n        // console.log(true)\r\n    }, [])\r\n\r\n    const handleNewPlayer = useCallback( (data:any) =>{\r\n        setPlayerList(data['playerList'])\r\n        dispatch(setWordGridGameData(data[\"gameData\"]))\r\n    }, [])\r\n\r\n    const handleStartGame = useCallback((data:any)=>{\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/wordGrid-game-room'\r\n            }\r\n        )\r\n    }, [])\r\n\r\n    const handleSendStart = useCallback(()=>{\r\n        console.log(\"START!\")\r\n        wordGridSocket.emit(\"send-start\", {gameID})\r\n        wordGridSocket.emit(\"start-timer\", {gameID})\r\n    }, [])\r\n\r\n    const handleBootedPlayer = useCallback( (data:any) =>{\r\n        setPlayerList(data['playerList'])\r\n        if (playerData[\"userID\"] == data[\"bootPlayerID\"]){\r\n            history.push(\r\n                {\r\n                    \"pathname\" : '/wordGrid'\r\n                }\r\n            )\r\n        }\r\n    }, [])\r\n\r\n    useEffect( ()=>{\r\n        \r\n        wordGridSocket.on('connect',\r\n            () => {\r\n                console.log(\"connected wordGrid\")\r\n            }\r\n        );\r\n\r\n        if (gameID){\r\n            console.log(\"joining room\")\r\n\r\n            wordGridSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n        }\r\n\r\n        wordGridSocket.on(\"joined-room\", handleJoinedRoom)\r\n        wordGridSocket.on(\"new-player\",handleNewPlayer);\r\n        wordGridSocket.on(\"start-game\", handleStartGame)\r\n        wordGridSocket.on(\"booted-player\", handleBootedPlayer)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            wordGridSocket.off(\"joined-room\", handleJoinedRoom);\r\n            wordGridSocket.off(\"new-player\", handleNewPlayer);\r\n            wordGridSocket.off(\"start-game\", handleStartGame);\r\n            wordGridSocket.off(\"booted-player\", handleBootedPlayer)\r\n          };\r\n\r\n    }, [wordGridSocket, handleJoinedRoom, handleNewPlayer, handleStartGame, handleBootedPlayer])\r\n    \r\n\r\n    // direct link \r\n    function linkToClipboard(e:any){\r\n        \r\n        let baseJoinLink = [\"localhost\", \"127.0.0.1\", \"\"].includes(window.location.hostname) ? \"http://localhost:3000\" : \"https://tomd-ai.github.io\"\r\n\r\n        navigator.clipboard.writeText(`${baseJoinLink}/games-frontend#/join-wordGrid/${gameID}`)\r\n        // This is just personal preference.\r\n        // I prefer to not show the whole text area selected.\r\n        e.target.focus();\r\n        setCopySuccess('Copied!');\r\n    }\r\n\r\n\r\n    function refreshPage(){\r\n        window.location.reload()\r\n    }\r\n\r\n    // console.log(\"words pre clearing\")\r\n    // console.log(enteredWords)\r\n    dispatch(clearWordGridEnteredWords())\r\n    // console.log(enteredWords)\r\n    // console.log(\"words post clearing\")\r\n    \r\n    const handleBootPlayer = useCallback((bootPlayerID: string)=>{\r\n        console.log(\"START!\")\r\n        wordGridSocket.emit(\"boot-player\", {\r\n            gameID,\r\n            bootPlayerID\r\n        }\r\n        )\r\n    }, [])\r\n\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <h1>WordGrid</h1>\r\n        <h4>Waiting room</h4>\r\n\r\n        <p>Rules</p>\r\n        <ol>\r\n            <li>The word has to be made up of letters that are next to each other.</li>\r\n            <li>In each word, a letter on the board can only be used once.</li>\r\n            <li>Words must be at least 4 letters long.</li>\r\n        </ol>\r\n\r\n        <p>Your game id is: <span className=\"gameID\">{gameID}</span></p>\r\n        <button onClick={(e)=>{linkToClipboard(e)}}>Click to copy direct link</button>\r\n        <p>{copySuccess}</p>\r\n\r\n        <p>Current players:</p>\r\n        <table className=\"wordGridTable\" style={{\"borderCollapse\": \"collapse\"}}>\r\n        <thead>\r\n            <tr>\r\n                <th>\r\n                    Player\r\n                </th>\r\n                <th> Games won </th>\r\n                <th> Total points </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            {\r\n                playerList.map(\r\n                        (player: Player, ind: number ) => {\r\n                            return (\r\n                            <tr key={player.userID}>\r\n                                <td>\r\n                                    {player.userName}\r\n                                    {player.gameLeader ?  \" (Game leader)\" : \"\" }\r\n                                    <br/>\r\n                                    {\r\n                                        \r\n                                        playerData.gameLeader ? \r\n                                            player.gameLeader ? <></> : <button onClick={()=> handleBootPlayer(player.userID)}>Boot</button>\r\n                                        : \"\"\r\n                                    \r\n                                    }\r\n                                </td>\r\n                                \r\n                                    {\r\n                                    player.gamesWon ?\r\n                                    <td>\r\n                                        {player.gamesWon} \r\n                                    </td>: <td>0</td>\r\n                                    }\r\n                                    {\r\n                                    player.totalPoints ?\r\n                                    <td>\r\n                                        {player.totalPoints}\r\n                                    </td> : <td>0</td>\r\n                                    }\r\n                            </tr>\r\n                            )\r\n                        }\r\n                    )\r\n            }\r\n        </tbody>\r\n        </table>\r\n        { \r\n            playerList.length == 0 ? <> Can't see any other players? <button onClick={()=>{refreshPage()}}>Refresh</button>  </>: <></> \r\n        }\r\n        { playerData.gameLeader && <div> \r\n        <p>Ready?</p>\r\n            <button className=\"start-game\" onClick={()=>{handleSendStart()}}>Start Game</button>\r\n        </div>\r\n        }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordGridWaiting;","interface ReduxAction {\r\n    type: string\r\n    payload?: any\r\n}\r\n\r\n// wordgrid\r\n\r\nexport const addWordGridWord = (payload: any): ReduxAction => ({\r\n    type: \"ADD_WORD_WORDGRID\",\r\n    payload: payload.word\r\n})\r\n\r\nexport const clearWordGridEnteredWords = (): ReduxAction => ({\r\n    type: \"CLEAR_WORDGRID_ENTERED_WORDS\",\r\n})\r\n\r\nexport const setWordGridGameData = (payload:any): ReduxAction => ({\r\n    type: \"SET_GAME_DATA\",\r\n    payload: payload\r\n})\r\n\r\nexport const setAllWordGridAnswers = (payload:any): ReduxAction => ({\r\n    type: \"SET_WORDGRID_ANSWERS\",\r\n    payload: payload\r\n}\r\n)\r\n\r\nexport const setNewWordGridBoard = (): ReduxAction => ({\r\n    type: \"SET_NEW_WORDGRID_BOARD\",\r\n})\r\n\r\n// wordgrid solver\r\n\r\nexport const clearWordGridSolver = (): ReduxAction => ({\r\n    type: \"CLEAR_WORD_GRID_SOLVER\",\r\n})\r\n","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport {wordGridSocketContext}  from '../context/socket2'\r\nimport {setAllWordGridAnswers} from \"../actions/actions\";\r\nimport {setNewWordGridBoard} from \"../actions/actions\";\r\nimport {clearWordGridEnteredWords} from \"../actions/actions\"\r\n\r\ntype Answer = {\r\n    word?: string\r\n    path?: string[]\r\n    score?: number\r\n}\r\n\r\ntype AnswerList = [\r\n    Answer[]\r\n]\r\n\r\nfunction WordGridScoring(props:any) {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const wordGridSocket = useContext(wordGridSocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    // let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [gameSessionID, setGameSessionID] = useLocalStorage('gameSessionID')\r\n    let [returning, setReturning] = useLocalStorage('returning')\r\n    let [counter, setCounter] = useState(0)\r\n\r\n    let newGame = useRef(false)\r\n    \r\n    const newBoard = useRef({});\r\n\r\n    const isInitialMount = useRef(true)\r\n\r\n    let gameData = useSelector((s:any) => s.wordGridGameData)\r\n\r\n    let [allAnswers, setAllAnswers] = useState([])\r\n    let [allDictionaryAnswers, setAllDictionaryAnswers] = useState([])\r\n\r\n    let [highlightedCells, setHighlightedCells] = useState<string[]>([]);\r\n    // if (playerData.gameLeader){\r\n    //     // newBoard.current = genNewBoard()\r\n    // } else {\r\n    //     // newBoard.current = {\"b\": 2}\r\n    // }\r\n    useEffect(()=>{\r\n        \r\n        console.log(\"using effect\")\r\n        console.log(newGame.current)\r\n        \r\n        if (newGame.current == true){\r\n            console.log(\"actually using effect\")\r\n            console.log(newGame.current)\r\n            console.log(newBoard.current)\r\n\r\n            // setGameData(newBoard.current)\r\n\r\n            dispatch(clearWordGridEnteredWords())\r\n            dispatch(setNewWordGridBoard())\r\n            setAllAnswers([])\r\n            setAllDictionaryAnswers([])\r\n            setReturning(true)\r\n            newGame.current = false\r\n        }\r\n\r\n    }, [counter])\r\n\r\n    const handleAnswerTable = useCallback( (data:any) => {\r\n        console.log(\"received answers\")\r\n        // console.log(data)\r\n\r\n        dispatch(setAllWordGridAnswers(data))\r\n        setCounter(counter + 1)\r\n\r\n        setAllAnswers(data.allAnswers)\r\n        setAllDictionaryAnswers(data.dictionaryAnswers)\r\n\r\n        // console.log(allWordGridAnswers)\r\n    }, [])\r\n\r\n    // function wipeCurGameData (gameLeader:boolean) {\r\n    //     console.log(gameLeader)\r\n        \r\n    // }\r\n\r\n    function handleStartNewGame() {\r\n        // so the game leader can make any updates they want\r\n        \r\n        // wipeCurGameData(playerData.gameLeader)\r\n        newGame.current = true\r\n        setCounter(counter + 1) // trigger page update\r\n\r\n        console.log(\"new game\")\r\n        console.log(newGame)\r\n        \r\n        wordGridSocket.emit(\"request-new-game\", {\r\n            gameID,\r\n            gameData\r\n        })\r\n\r\n        // history.push(\r\n        //     {\r\n        //         \"pathname\" : '/wordGrid-waiting-room',\r\n        //     }\r\n        // )\r\n\r\n    }\r\n\r\n    const handleNewGameRequested = useCallback( ()=> {\r\n        // to return players to the waiting room\r\n\r\n        newGame.current = true\r\n        setCounter(counter + 1) // trigger page update\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : \"/wordGrid-waiting-room\"\r\n            }\r\n        )\r\n    }, [])\r\n\r\n\r\n    useEffect( ()=>{\r\n        \r\n        if (isInitialMount.current){\r\n            isInitialMount.current = false\r\n            console.log(\"doing this once\")\r\n            wordGridSocket.emit(\"join\", {\r\n                gameID,\r\n                playerData,\r\n                gameSessionID,\r\n                gameData\r\n            })\r\n            wordGridSocket.emit(\"get-all-answers\", {\r\n                gameID\r\n            })\r\n        }\r\n        \r\n        wordGridSocket.on(\"get-answers\", handleAnswerTable);\r\n        wordGridSocket.on(\"start-new-game\", handleNewGameRequested);\r\n\r\n        // categoriesSocket.on(\"timer-tick\", handleTimerTick);\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            wordGridSocket.off(\"get-answers\", handleAnswerTable);\r\n            wordGridSocket.off(\"start-new-game\", handleNewGameRequested);\r\n          };\r\n\r\n    }, [wordGridSocket, handleAnswerTable, handleNewGameRequested])\r\n\r\n    const highlightCells = (path:string[]) => {\r\n        // first get the path\r\n        setHighlightedCells(path)\r\n    }\r\n\r\n    const deHighlightCells = () => {\r\n        setHighlightedCells([])\r\n    }\r\n\r\n    function drawAnswers(allAnswers:any){\r\n\r\n        var arrLengths = allAnswers.map((answer:any)=>{\r\n            // console.log(answer)\r\n            return answer[\"enteredWords\"][\"wordList\"].length\r\n        })\r\n\r\n        var longestArrLen = Math.max(...arrLengths)\r\n\r\n        // console.log(longestArrLen)\r\n\r\n        let rowList = []\r\n\r\n        for (var i = 0; i < longestArrLen; i++ ){\r\n            // console.log(i)\r\n            let row: Array<AnswerList> = []\r\n            allAnswers.forEach((answer:any)=>{\r\n                // console.log(answer)\r\n                if (answer[\"scoredAnswers\"][i]){\r\n                    row.push(\r\n                        answer[\"scoredAnswers\"][i]\r\n                    )\r\n                }else{\r\n                    var blankAns =  {\r\n                        \"word\": \"\",\r\n                        \"score\": -1,\r\n                        \"path\": []\r\n                    }\r\n                    answer[\"scoredAnswers\"][i] = blankAns\r\n                    row.push(\r\n                        answer[\"scoredAnswers\"][i]\r\n                    )\r\n                }\r\n            })\r\n\r\n            rowList.push(row)\r\n        }\r\n\r\n        // console.log(rowList)\r\n\r\n        return rowList.map((row: any)=>{\r\n            return (\r\n            <tr>\r\n                <td style={{borderRight:\"3px solid\"}}></td>\r\n                {\r\n                    row.map((cell: any)=>{\r\n                        return (\r\n                                <td className={cell.score === 0 ? \"seenWord\" : \"\"} onMouseEnter={() => highlightCells(cell.path)} onMouseLeave={()=>deHighlightCells()}>\r\n                                    {cell.word}\r\n                                </td>\r\n                        )\r\n                    })\r\n                }\r\n            </tr>\r\n            )\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Results!</h1>        \r\n\r\n        {/* <p style={{fontSize: \"10px\"}}>{JSON.stringify(allAnswers)}</p> */}\r\n        \r\n        <table className=\"playerAnswers\" style={{\"borderCollapse\": \"collapse\"}}>\r\n        <thead>\r\n            <tr>\r\n                <td style={{borderRight:\"3px solid\", borderBottom: \"3px solid\"}}>Player</td>\r\n                {\r\n                    allAnswers && allAnswers.map((answerRow:any)=>{\r\n                        return <th style={{borderBottom: \"3px solid\"}}>{answerRow.userName}</th>\r\n                    })\r\n                }\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr>\r\n                <td style={{borderRight:\"3px solid\", borderBottom: \"3px solid\"}}>\r\n                    Score\r\n                </td>\r\n                {\r\n                    allAnswers && allAnswers.map((answerRow:any)=>{\r\n                        return <th style={{borderBottom: \"3px solid\"}}>{answerRow.playerScore}</th>\r\n                    })\r\n                }\r\n            </tr>\r\n            {\r\n                allAnswers && drawAnswers(allAnswers)\r\n            }\r\n        \r\n        </tbody>\r\n        </table>\r\n        \r\n        \r\n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\r\n            <thead>\r\n            </thead>\r\n            <tbody>\r\n            <tr><td className={highlightedCells.includes(\"A1\") ? \"highlight\" : \"\"}>{gameData.A1}</td><td className={highlightedCells.includes(\"A2\") ? \"highlight\" : \"\"}>{gameData.A2}</td><td className={highlightedCells.includes(\"A3\") ? \"highlight\" : \"\"}>{gameData.A3}</td><td className={highlightedCells.includes(\"A4\") ? \"highlight\" : \"\"}>{gameData.A4}</td></tr>\r\n            <tr><td className={highlightedCells.includes(\"B1\") ? \"highlight\" : \"\"}>{gameData.B1}</td><td className={highlightedCells.includes(\"B2\") ? \"highlight\" : \"\"}>{gameData.B2}</td><td className={highlightedCells.includes(\"B3\") ? \"highlight\" : \"\"}>{gameData.B3}</td><td className={highlightedCells.includes(\"B4\") ? \"highlight\" : \"\"}>{gameData.B4}</td></tr>\r\n            <tr><td className={highlightedCells.includes(\"C1\") ? \"highlight\" : \"\"}>{gameData.C1}</td><td className={highlightedCells.includes(\"C2\") ? \"highlight\" : \"\"}>{gameData.C2}</td><td className={highlightedCells.includes(\"C3\") ? \"highlight\" : \"\"}>{gameData.C3}</td><td className={highlightedCells.includes(\"C4\") ? \"highlight\" : \"\"}>{gameData.C4}</td></tr>\r\n            <tr><td className={highlightedCells.includes(\"D1\") ? \"highlight\" : \"\"}>{gameData.D1}</td><td className={highlightedCells.includes(\"D2\") ? \"highlight\" : \"\"}>{gameData.D2}</td><td className={highlightedCells.includes(\"D3\") ? \"highlight\" : \"\"}>{gameData.D3}</td><td className={highlightedCells.includes(\"D4\") ? \"highlight\" : \"\"}>{gameData.D4}</td></tr>\r\n            </tbody>\r\n        </table>\r\n        <p style={{fontSize: \"15px\"}}>All words:</p>\r\n        <table className=\"wordGridDictionaryTable\" style={{fontSize: \"10px\"}}>\r\n            <thead>\r\n                {\r\n                    allDictionaryAnswers && <tr>\r\n                        <th>Word</th>\r\n                        <th>Definition</th>\r\n                        <th>Score</th>\r\n                        </tr>\r\n                }\r\n            </thead>\r\n            <tbody>\r\n            {\r\n            allDictionaryAnswers && allDictionaryAnswers.map(\r\n                (word:any)=>{\r\n                return <tr onMouseEnter={() => highlightCells(word.path)} onMouseLeave={()=>deHighlightCells()}>\r\n                    <td>\r\n                        {word.word}\r\n                    </td>\r\n                    <td>\r\n                        {word.definition}\r\n                    </td>\r\n                    <td>\r\n                        {word.score}\r\n                    </td>\r\n                </tr>\r\n            })\r\n            }\r\n            </tbody>\r\n        </table>\r\n\r\n        \r\n        { playerData[\"gameLeader\"] ? <div>\r\n                <p>Play again?</p>\r\n                <button onClick={handleStartNewGame}>New game</button>\r\n            </div> : <></>\r\n        }\r\n\r\n        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordGridScoring;","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {useHistory} from 'react-router-dom';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\nimport {wordGridSocketContext}  from '../context/socket2'\r\nimport {addWordGridWord} from \"../actions/actions\"\r\n\r\nfunction WordGridGame(props:any) {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const wordGridSocket = useContext(wordGridSocketContext);\r\n    \r\n    let [gameID, setGameID] = useLocalStorage('gameID')\r\n    let [userName, setUserName] = useLocalStorage('userName')\r\n    // let [gameData, setGameData] = useLocalStorage('gameData')\r\n    let [playerData, setPlayerData] = useLocalStorage('playerData')\r\n    let [userID, setUserID] = useLocalStorage('userID')\r\n\r\n    let [minutes, setMinutes] = useState(\"\")\r\n    let [seconds, setSeconds] = useState(\"\")\r\n    \r\n    let [newWord, setNewWord] = useState('');\r\n    let [errorStatus, setErrorStatus] = useState('');\r\n    let [errorStatusMessage, setErrorStatusMessage] = useState('');\r\n\r\n    let enteredWords = useSelector((s:any) => s.wordGridEnteredWords)\r\n    let gameData = useSelector((s:any) => s.wordGridGameData)\r\n    \r\n    let [rotatePos, setRotatePos] = useState(0);\r\n\r\n    const enteredWordsRef = useRef<string[]>([])\r\n\r\n    const handleTimerTick = useCallback((data: any)=>{\r\n        \r\n        setMinutes(data[\"minutes\"])\r\n        setSeconds(data[\"seconds\"])\r\n        \r\n        if ( data[\"minutes\"] == 0 && data[\"seconds\"] == 0 ){\r\n            handleForceEndGame()\r\n        }\r\n    }, [])\r\n\r\n    const handleForceEndGame = useCallback(()=>{\r\n        // console.log(\"entered words\")\r\n        // console.log(enteredWords)\r\n\r\n        const submitAnswers = {\r\n            gameID,\r\n            userID,\r\n            userName,\r\n            enteredWords: {\r\n                wordList: enteredWordsRef.current\r\n            }\r\n        }\r\n        console.log(\"submit answers is\")\r\n        console.log(submitAnswers)\r\n        \r\n        wordGridSocket.emit(\"send-answers-wordGrid\", submitAnswers)\r\n\r\n        history.push(\r\n            {\r\n                \"pathname\" : '/wordGrid-scoring',\r\n            }\r\n        )\r\n    }, [])\r\n\r\n\r\n    const addWord = useCallback((newWord)=>{\r\n        \r\n        var guess = {\r\n            gameID: gameID,\r\n            guess: newWord\r\n        }\r\n        // console.log(enteredWords)\r\n        if (enteredWords.wordList.includes(newWord)){\r\n            setErrorStatus('showError')\r\n            setErrorStatusMessage(\"Sorry, word already entered\")\r\n            setNewWord(\"\")\r\n            \r\n        }else{\r\n            console.log(guess)\r\n        \r\n            wordGridSocket.emit(\r\n                \"check-answer\",\r\n                guess\r\n            )\r\n        }\r\n\r\n        \r\n    \r\n    }, [])\r\n\r\n    const handleAnswerRes = useCallback((data: any)=>{\r\n        // console.log(\"handling response from server\")\r\n        // console.log(enteredWords)\r\n        \r\n        if (data[\"inDict\"]){\r\n    \r\n            \r\n            dispatch(\r\n                addWordGridWord(\r\n                    {\r\n                        word: data[\"word\"]\r\n                    }\r\n                )\r\n            )\r\n\r\n            enteredWordsRef.current = [...enteredWordsRef.current, data[\"word\"]]\r\n            \r\n            console.log(enteredWordsRef)\r\n            // setEnteredWords([data[\"word\"], ...enteredWords])\r\n            \r\n            setNewWord(\"\")\r\n        }else{\r\n            setErrorStatus(\"showError\")\r\n            setErrorStatusMessage(\"Sorry, word not found in the grid / dictionary\")\r\n            setNewWord(\"\")\r\n        }\r\n    \r\n    }, [])\r\n\r\n    useEffect( ()=>{\r\n        wordGridSocket.on(\"get-answers\", handleForceEndGame);\r\n        wordGridSocket.on(\"timer-tick\", handleTimerTick);\r\n        wordGridSocket.on(\"end-game\", handleForceEndGame)\r\n        wordGridSocket.on(\"answer-res\", handleAnswerRes)\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            wordGridSocket.off(\"get-answers\", handleForceEndGame);\r\n            wordGridSocket.off(\"timer-tick\", handleTimerTick);\r\n            wordGridSocket.off(\"end-game\", handleForceEndGame);\r\n            wordGridSocket.off(\"answer-res\", handleAnswerRes);\r\n          };\r\n\r\n    }, [wordGridSocket, handleForceEndGame, handleTimerTick, handleAnswerRes])\r\n\r\n    const handleKeyPress = (e:any) => {\r\n        if (e.key === \"Enter\"){\r\n            addWord(newWord)\r\n        }\r\n    }\r\n\r\n    const rotateGrid = () => {\r\n        // console.log(rotatePos)\r\n        var curPos = rotatePos\r\n        if (curPos + 1 == 4){\r\n            curPos = 0\r\n            setRotatePos(curPos)\r\n        }else{\r\n            setRotatePos(curPos + 1)\r\n        }\r\n    }\r\n\r\n    const renderGrid = ()=>{\r\n        switch (rotatePos){\r\n            case 0:\r\n                return (\r\n                <tbody>\r\n                    <tr><td>{gameData.A1}</td><td>{gameData.A2}</td><td>{gameData.A3}</td><td>{gameData.A4}</td></tr>\r\n                    <tr><td>{gameData.B1}</td><td>{gameData.B2}</td><td>{gameData.B3}</td><td>{gameData.B4}</td></tr>\r\n                    <tr><td>{gameData.C1}</td><td>{gameData.C2}</td><td>{gameData.C3}</td><td>{gameData.C4}</td></tr>\r\n                    <tr><td>{gameData.D1}</td><td>{gameData.D2}</td><td>{gameData.D3}</td><td>{gameData.D4}</td></tr>\r\n                </tbody>\r\n                );\r\n            case 1:\r\n                return ( \r\n                    <tbody>\r\n                        <tr><td>{gameData.D1}</td><td>{gameData.C1}</td><td>{gameData.B1}</td><td>{gameData.A1}</td></tr>\r\n                        <tr><td>{gameData.D2}</td><td>{gameData.C2}</td><td>{gameData.B2}</td><td>{gameData.A2}</td></tr>\r\n                        <tr><td>{gameData.D3}</td><td>{gameData.C3}</td><td>{gameData.B3}</td><td>{gameData.A3}</td></tr>\r\n                        <tr><td>{gameData.D4}</td><td>{gameData.C4}</td><td>{gameData.B4}</td><td>{gameData.A4}</td></tr>\r\n                    </tbody>\r\n                    );\r\n            case 2:\r\n                return ( \r\n                    <tbody>\r\n                        <tr><td>{gameData.D4}</td><td>{gameData.D3}</td><td>{gameData.D2}</td><td>{gameData.D1}</td></tr>\r\n                        <tr><td>{gameData.C4}</td><td>{gameData.C3}</td><td>{gameData.C2}</td><td>{gameData.C1}</td></tr>\r\n                        <tr><td>{gameData.B4}</td><td>{gameData.B3}</td><td>{gameData.B2}</td><td>{gameData.B1}</td></tr>\r\n                        <tr><td>{gameData.A4}</td><td>{gameData.A3}</td><td>{gameData.A2}</td><td>{gameData.A1}</td></tr>\r\n                    </tbody>\r\n                    )\r\n            case 3:\r\n                return ( \r\n                    <tbody>\r\n                        <tr><td>{gameData.A4}</td><td>{gameData.B4}</td><td>{gameData.C4}</td><td>{gameData.D4}</td></tr>\r\n                        <tr><td>{gameData.A3}</td><td>{gameData.B3}</td><td>{gameData.C3}</td><td>{gameData.D3}</td></tr>\r\n                        <tr><td>{gameData.A2}</td><td>{gameData.B2}</td><td>{gameData.C2}</td><td>{gameData.D2}</td></tr>\r\n                        <tr><td>{gameData.A1}</td><td>{gameData.B1}</td><td>{gameData.C1}</td><td>{gameData.D1}</td></tr>\r\n                    </tbody>\r\n                    )\r\n        }\r\n    }\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <h1>Let's play</h1>\r\n        <p>Time left: </p>\r\n        <p>{minutes ? minutes.toString() + \" minute\" : \"\" } { minutes || seconds ? seconds.toString() + \" seconds\" : \"Game ended\"}</p>\r\n\r\n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\r\n            <thead>\r\n            </thead>\r\n                {renderGrid()}\r\n        </table>\r\n        <p style={{fontSize: \"14px\"}}>stuck? try rotating: </p><button onClick={rotateGrid}>Rotate</button>\r\n        <p>\r\n            Enter words\r\n        </p>\r\n        {/* <form onSubmit={()=>{return false}}> */}\r\n        <input \r\n            autoComplete=\"off\"\r\n            type=\"text\" \r\n            id=\"newWord\" \r\n            placeholder=\"Add word\" \r\n            onChange={e=>{\r\n                const val = e.target.value\r\n                setErrorStatus(\"hideError\")\r\n                setNewWord(val)}\r\n            }\r\n            value={newWord}\r\n            onKeyPress={handleKeyPress}\r\n        />\r\n        <button className=\"add-word\"  onClick={e=>{\r\n            addWord(newWord)\r\n        }}>Add word</button>\r\n\r\n        {/* </form> */}\r\n\r\n        { playerData.gameLeader && <div> \r\n            <button className=\"end-game\" onClick={handleForceEndGame}>Force End Game</button>\r\n        </div>\r\n        }\r\n        \r\n        <p className={errorStatus}>{errorStatusMessage}</p>\r\n\r\n        <p>Your words: </p>\r\n\r\n        <ul>\r\n        {\r\n            enteredWords.wordList.map( (word: string) => {\r\n                return (\r\n                <li key={word}>\r\n                    {word}\r\n                </li>\r\n                )\r\n        })\r\n        }\r\n        </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordGridGame;","import {useState, useRef, useContext, useCallback, useEffect} from 'react';\r\nimport {useSelector, useDispatch} from \"react-redux\";\r\nimport {wordGridSolverSocketContext}  from '../context/socket2'\r\nimport Webcam from 'react-webcam';\r\n\r\nconst videoConstraints = {\r\n    width: 250,\r\n    height: 250,\r\n    facingMode: \"user\"\r\n  };\r\n\r\n\r\nfunction WordGridSolver(props:any) {\r\n\r\n    const wordGridSolverSocket = useContext(wordGridSolverSocketContext);\r\n    const gridData = useSelector((s:any) => s.wordGridSolverData);\r\n    const webcamRef = useRef<Webcam>(null);\r\n    const [imgSrc, setImgSrc] = useState<string | null>(null);\r\n\r\n    let emptyBoard = useRef(true)\r\n    let keepLooking = useRef(true)\r\n\r\n    // useEffect(()=>{\r\n    //     console.log(\"using effect\")\r\n    //     if (webcamRef.current){\r\n    //         let interval = setInterval(\r\n    //             function(){ \r\n    //                 if (webcamRef.current){\r\n    //                     wordGridSolverSocket.emit(\"solve-image\", {\r\n    //                         \"imageData\" : webcamRef.current.getScreenshot()\r\n    //                     })\r\n    //                 }\r\n    //             },1000\r\n    //         );\r\n    //     }\r\n\r\n    // }, [])\r\n\r\n    const handleSearchBoundaries = useCallback((data)=>{\r\n        console.log(\"New search boundaries!\")\r\n        if (webcamRef.current){\r\n            //const imageSrc = webcamRef.current.getScreenshot();\r\n            // console.log(imageSrc)\r\n            setImgSrc(data[\"imgWithBoundaries\"]);\r\n            // console.log(data[\"imgWithBoundaries\"])\r\n            keepLooking.current = false\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n\r\n    useEffect( ()=>{\r\n        \r\n        wordGridSolverSocket.on('connect',\r\n            () => {\r\n                console.log(\"connected wordGrid\")\r\n            }\r\n        );\r\n\r\n        wordGridSolverSocket.emit(\"join\", {})\r\n\r\n        wordGridSolverSocket.on(\"solved-image\", handleSearchBoundaries)\r\n\r\n\r\n        return () => {\r\n            // before the component is destroyed\r\n            // unbind all event handlers used in this component\r\n            wordGridSolverSocket.off(\"solved-image\", handleSearchBoundaries)\r\n          };\r\n\r\n    }, [wordGridSolverSocket, handleSearchBoundaries])\r\n\r\n    const capture = useCallback(\r\n        () => {\r\n            if (webcamRef.current) {\r\n                // const imageSrc = webcamRef.current.getScreenshot();\r\n                // // console.log(imageSrc)\r\n                // setImgSrc(imageSrc);\r\n\r\n                wordGridSolverSocket.emit(\"solve-image\", {\r\n                    \"imageData\" : webcamRef.current.getScreenshot()//imgSrc\r\n                })\r\n            }\r\n        },\r\n        [webcamRef]\r\n    );\r\n\r\n    // const renderImg = () => {\r\n    //     console.log(\"render img\")\r\n    //     // console.log(imgSrc)\r\n    //     if (imgSrc){\r\n    //         console.log(\"passed\")\r\n    //         console.log(imgSrc)\r\n    //         return <img src={imgSrc} />\r\n    //     }\r\n    // }\r\n\r\n    // useEffect(()=>{\r\n    //     renderImg()\r\n    // }, [imgSrc])\r\n\r\n    return (\r\n    <div className=\"project\">\r\n        <p>Use your camera to populate the grid:</p>\r\n\r\n        <p  style={{ \"fontSize\": \"12px\"}}>\r\n            In progress - text detection is a challenging problem - pressing capture photo\r\n            will return the image with the bounding boxes of where text might be located.\r\n        </p>\r\n\r\n        <table>\r\n        <tr>\r\n        <td>{\r\n            <Webcam\r\n                audio={false}\r\n                height={250}\r\n                ref={webcamRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={250}\r\n                videoConstraints={videoConstraints}\r\n            />\r\n        }</td>\r\n        <td>\r\n            {\r\n                imgSrc && <img src={imgSrc} />\r\n            }\r\n        </td>\r\n        </tr>\r\n        <td>\r\n            <button onClick={capture}>Capture photo</button>\r\n        </td>\r\n        <td>\r\n\r\n        </td>\r\n        </table>\r\n        <div className=\"webcamPreview\">\r\n        \r\n        </div>\r\n        <div className=\"webcamScreenshot\">\r\n            \r\n        </div>\r\n        \r\n        \r\n\r\n        <table className=\"wordGridTable\" style={{tableLayout: \"fixed\"}}>\r\n            <thead>\r\n            </thead>\r\n            <tbody>\r\n                <tr><td>{gridData.A1}</td><td>{gridData.A2}</td><td>{gridData.A3}</td><td>{gridData.A4}</td></tr>\r\n                <tr><td>{gridData.B1}</td><td>{gridData.B2}</td><td>{gridData.B3}</td><td>{gridData.B4}</td></tr>\r\n                <tr><td>{gridData.C1}</td><td>{gridData.C2}</td><td>{gridData.C3}</td><td>{gridData.C4}</td></tr>\r\n                <tr><td>{gridData.D1}</td><td>{gridData.D2}</td><td>{gridData.D3}</td><td>{gridData.D4}</td></tr>\r\n            </tbody>\r\n        </table>\r\n\r\n        <p>Or enter each letter, reading left to right</p>\r\n        <input></input><button>Solve</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordGridSolver;","import { Switch, Route } from 'react-router-dom';\r\nimport GamesList from \"./components/GamesList\";\r\nimport Header from \"./components/Header\";\r\nimport Categories from \"./categories/categories\";\r\nimport CategoriesJoin from \"./categories/CategoriesJoin\";\r\nimport CategoriesWaiting from \"./categories/CategoriesWaiting\";\r\nimport CategoriesGame from \"./categories/CategoriesGame\";\r\nimport CategoriesScoring from \"./categories/CategoriesScoring\";\r\nimport PictureGuess from \"./pictureguess/Pictureguess\";\r\nimport WordGridSetup from \"./wordGrid/WordGridSetup\";\r\nimport WordGridJoin from \"./wordGrid/WordGridJoin\";\r\nimport WordGridWaiting from \"./wordGrid/WordGridWaiting\";\r\nimport WordGridScoring from \"./wordGrid/WordGridScoring\";\r\nimport WordGridGame from \"./wordGrid/WordGridGame\";\r\nimport './App.css';\r\nimport {SocketContext, socket} from \"./context/socket2\"\r\nimport {PictureSocketContext, picturesocket} from \"./context/socket2\"\r\nimport WordGridSolver from './wordGridSolver/wordGridSolver';\r\n\r\nfunction App() {\r\n    // TODO: boot people out\r\n    // TODO: keep score\r\n    // \r\n    return (\r\n        <PictureSocketContext.Provider value={picturesocket}>\r\n        <SocketContext.Provider value={socket}>\r\n            <div className=\"App\">\r\n                <div className=\"header\">\r\n                    <Header/>\r\n                </div>\r\n                \r\n                <div className=\"main-content\">\r\n                    <Switch>\r\n                        <Route exact path=\"/\" component={GamesList}/>\r\n                        \r\n                        <Route path=\"/categories\" component={Categories}/>\r\n                        <Route exact path=\"/join-categories/:gameID\" component={CategoriesJoin}/>\r\n                        <Route path=\"/categories-waiting-room\" component={CategoriesWaiting}/>\r\n                        <Route path=\"/categories-game-room\" component={CategoriesGame}/>\r\n                        <Route path=\"/categories-scoring\" component={CategoriesScoring}/>\r\n                        \r\n                        <Route path=\"/picture-guess/:gameID\" component={PictureGuess}/>\r\n                        <Route path=\"/picture-guess\" component={PictureGuess}/>\r\n\r\n                        <Route path=\"/wordGrid\" component={WordGridSetup} />\r\n                        <Route exact path=\"/join-wordGrid/:gameID\" component={WordGridJoin}/>\r\n                        <Route path=\"/wordGrid-waiting-room\" component={WordGridWaiting}/>\r\n                        <Route path=\"/wordGrid-game-room\" component={WordGridGame}/>\r\n                        <Route path=\"/wordGrid-scoring\" component={WordGridScoring}/>\r\n\r\n                        <Route path=\"/wordGridSolver\" component={WordGridSolver} />\r\n                    </Switch>\r\n                </div>\r\n            </div>\r\n        </SocketContext.Provider>\r\n        </PictureSocketContext.Provider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","\r\ninterface ReduxAction {\r\n    type: string\r\n    payload?: any\r\n}\r\n\r\nexport interface EnteredWordState {\r\n    wordList: String[]\r\n}\r\n\r\nexport const intialEmptyWordsState = {\r\n    wordList: []\r\n} as EnteredWordState\r\n\r\nexport const wordGridEnteredWordList = (\r\n    state: EnteredWordState = intialEmptyWordsState,\r\n    action: ReduxAction\r\n): EnteredWordState => {\r\n    switch(action.type){\r\n        case 'ADD_WORD_WORDGRID':\r\n            return {\r\n                wordList: [action.payload, ...state.wordList]\r\n            }\r\n        case 'GET_WORDGRID_ENTERED_WORDS':\r\n            return state\r\n        case 'CLEAR_WORDGRID_ENTERED_WORDS':\r\n            return intialEmptyWordsState\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default wordGridEnteredWordList","interface ReduxAction {\r\n    type: string\r\n    payload?: any\r\n}\r\n\r\nexport interface WordGridDictWord {\r\n    word: string\r\n    path: string[],\r\n    definition: string\r\n}\r\n\r\nexport interface EnteredWords {\r\n    wordList?: string[]\r\n}\r\n\r\nexport interface WordGridPlayerAnswers {\r\n    enteredWords: EnteredWords,\r\n    gameID: string,\r\n    playerScore: number,\r\n    userID: string,\r\n    userName: string\r\n}\r\n\r\nexport interface AllWordGridAnswers {\r\n    dictionaryAnswers: WordGridDictWord[]\r\n    allAnswers: WordGridPlayerAnswers[]\r\n}\r\n\r\nexport const intialAllWordGridAnswers = {\r\n    dictionaryAnswers: [],\r\n    allAnswers: []\r\n} as AllWordGridAnswers\r\n\r\nexport const wordGridPlayerAnswers = (\r\n    state: AllWordGridAnswers = intialAllWordGridAnswers,\r\n    action: ReduxAction\r\n): AllWordGridAnswers => {\r\n    switch(action.type){\r\n        case 'SET_WORDGRID_ANSWERS':\r\n            // console.log(\"setting wordGrid answers\")\r\n            // console.log(action.payload)\r\n            return {\r\n                dictionaryAnswers: action.payload[\"dictionaryAnswers\"],\r\n                allAnswers: action.payload[\"allAnswers\"]\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default wordGridPlayerAnswers","interface ReduxAction {\r\n    type: string\r\n    payload?: any\r\n}\r\n\r\nfunction genNewBoard(){\r\n    const availableOptions = \"AAEEGN, ELRTTY, AOOTTW, ABBJOO, EHRTVW, CIMOTU, DISTTY, EIOSST, DELRVY, ACHOPS, HIMNQU, EEINSU, EEGHNW, AFFKPS, HLNNRZ, DEILRX\".split(\", \").map(x=>x.split(''))\r\n\r\n    function shuffleArray(array: number[]) {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [array[i], array[j]] = [array[j], array[i]];\r\n        }\r\n        return array\r\n    }\r\n\r\n    // shuffle list of indicies\r\n    //let arrayOrder =  Array(16).fill(-1).map( (_, i) => i+1 ).map( (_, i) => i -1 == -1 ? 15 : i-1 )\r\n    let arrayOrder = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\r\n    arrayOrder = shuffleArray(arrayOrder)\r\n    \r\n    const tilePlacement = [\r\n        \"A1\", \"A2\", \"A3\", \"A4\",\r\n        \"B1\", \"B2\", \"B3\", \"B4\",\r\n        \"C1\", \"C2\", \"C3\", \"C4\",\r\n        \"D1\", \"D2\", \"D3\", \"D4\"\r\n    ]\r\n\r\n    var board : BoardLayout;\r\n    board = {}\r\n\r\n    for (var ind in tilePlacement){\r\n        var randInd = Math.floor(Math.random() * 6);\r\n        board[tilePlacement[ind]] = availableOptions[arrayOrder[ind]][randInd]\r\n    }\r\n\r\n    return board\r\n\r\n}\r\n\r\n\r\nexport interface BoardLayout  {\r\n    [key: string] : string\r\n}\r\n\r\nexport const intialWordGridBoardLayout = genNewBoard() as BoardLayout\r\n\r\nexport const wordGridBoardLayout = (\r\n    state: BoardLayout = intialWordGridBoardLayout,\r\n    action: ReduxAction\r\n): BoardLayout => {\r\n    switch(action.type){\r\n        case 'SET_GAME_DATA':\r\n            console.log(\"setting wordGrid answers\")\r\n            console.log(action.payload)\r\n            return action.payload\r\n        case 'SET_NEW_WORDGRID_BOARD':\r\n            return genNewBoard()\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default wordGridBoardLayout","interface ReduxAction {\r\n    type: string\r\n    payload?: any\r\n}\r\n\r\n\r\n\r\nfunction genEmptySolverBoard(){\r\n\r\n    const tilePlacement = [\r\n        \"A1\", \"A2\", \"A3\", \"A4\",\r\n        \"B1\", \"B2\", \"B3\", \"B4\",\r\n        \"C1\", \"C2\", \"C3\", \"C4\",\r\n        \"D1\", \"D2\", \"D3\", \"D4\"\r\n    ]\r\n\r\n    var board : BoardSolverLayout;\r\n    board = {}\r\n\r\n    for (var ind in tilePlacement){\r\n        board[tilePlacement[ind]] = \"\"\r\n    }\r\n\r\n    console.log(\"empty board\")\r\n    console.log(board)\r\n\r\n    return board\r\n\r\n}\r\n\r\nexport interface BoardSolverLayout  {\r\n    [key: string] : string\r\n}\r\nexport const intialWordGridSolverBoardLayout = genEmptySolverBoard() as BoardSolverLayout\r\n\r\nexport const wordGridSolverLayout = (\r\n    state: BoardSolverLayout = intialWordGridSolverBoardLayout,\r\n    action: ReduxAction\r\n): BoardSolverLayout => {\r\n    switch(action.type){\r\n        case 'SET_WORD_GRID_SOLVER':\r\n            // console.log(\"setting wordGrid answers\")\r\n            // console.log(action.payload)\r\n            return action.payload\r\n        case 'CLEAR_WORD_GRID_SOLVER':\r\n            return genEmptySolverBoard()\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport default wordGridSolverLayout","import { combineReducers } from 'redux';\r\nimport wordGridEnteredWordList from './wordgrid';\r\nimport wordGridPlayerAnswers from './wordgrid-scoring';\r\nimport wordGridGameData from \"./wordgrid-game-data\";\r\nimport wordGridSolverLayout from \"./wordgrid-solver-data\"\r\n\r\nconst allReducers = combineReducers({\r\n    wordGridEnteredWords: wordGridEnteredWordList,\r\n    wordGridPlayerAnswers: wordGridPlayerAnswers,\r\n    wordGridGameData: wordGridGameData,\r\n\r\n    wordGridSolverData: wordGridSolverLayout\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport allReducers from './reducers'\r\nimport {createStore} from 'redux';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(\r\n    allReducers\r\n)\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}